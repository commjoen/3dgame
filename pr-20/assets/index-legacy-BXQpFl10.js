System.register(["./three-legacy-4-DXKNgv.js"],function(t,e){"use strict";var i,s,o,n,a,r,c,h,l,d,p,y,m,u,v,w,g,S,f,b;return{setters:[t=>{i=t.V,s=t.C,o=t.B,n=t.a,a=t.S,r=t.A,c=t.P,h=t.T,l=t.b,d=t.M,p=t.c,y=t.d,m=t.W,u=t.e,v=t.f,w=t.g,g=t.h,S=t.D,f=t.i,b=t.j}],execute:function(){class t{constructor(){this.colliders=[],this.staticColliders=[]}addCollider(t,e=!1){(e?this.staticColliders:this.colliders).push(t)}removeCollider(t){let e=this.colliders.indexOf(t);-1===e?(e=this.staticColliders.indexOf(t),-1!==e&&this.staticColliders.splice(e,1)):this.colliders.splice(e,1)}checkCollision(t,e){return"sphere"===t.collisionType&&"sphere"===e.collisionType?this.checkSphereCollision(t,e):"box"===t.collisionType&&"box"===e.collisionType?this.checkAABBCollision(t,e):("sphere"===t.collisionType&&"box"===e.collisionType||"box"===t.collisionType&&"sphere"===e.collisionType)&&this.checkSphereAABBCollision(t,e)}checkSphereCollision(t,e){return t.position.distanceTo(e.position)<=t.radius+e.radius}checkAABBCollision(t,e){const i=t.position.clone().sub(t.size.clone().multiplyScalar(.5)),s=t.position.clone().add(t.size.clone().multiplyScalar(.5)),o=e.position.clone().sub(e.size.clone().multiplyScalar(.5)),n=e.position.clone().add(e.size.clone().multiplyScalar(.5));return i.x<=n.x&&s.x>=o.x&&i.y<=n.y&&s.y>=o.y&&i.z<=n.z&&s.z>=o.z}checkSphereAABBCollision(t,e){const s="sphere"===t.collisionType?t:e,o="box"===t.collisionType?t:e,n=o.position.clone().sub(o.size.clone().multiplyScalar(.5)),a=o.position.clone().add(o.size.clone().multiplyScalar(.5)),r=new i(Math.max(n.x,Math.min(s.position.x,a.x)),Math.max(n.y,Math.min(s.position.y,a.y)),Math.max(n.z,Math.min(s.position.z,a.z)));return s.position.distanceTo(r)<=s.radius}checkCollisions(t){const e=[];for(const i of this.colliders)i!==t&&this.checkCollision(t,i)&&e.push(i);for(const i of this.staticColliders)this.checkCollision(t,i)&&e.push(i);return e}}class e{constructor(){this.buoyancyForce=9.8,this.dragCoefficient=.95,this.currentDirection=new i(.1,0,.05),this.currentStrength=.02}applyBuoyancy(t,e){const s=new i(0,this.buoyancyForce*e,0);t.velocity.add(s)}applyDrag(t){t.velocity.multiplyScalar(this.dragCoefficient)}applyCurrent(t,e=1,i){const s=this.currentDirection.clone().multiplyScalar(this.currentStrength*e*i);t.velocity.add(s)}applyUnderwaterEffects(t,e){this.applyBuoyancy(t,e),this.applyDrag(t),this.applyCurrent(t,1,e)}}class x{constructor(){this.gravity=new i(0,-9.8,0),this.waterDensity=1e3,this.collisionSystem=new t,this.underwaterPhysics=new e,this.rigidBodies=[],this.isUnderwater=!0}addRigidBody(t){this.rigidBodies.push(t),t.collisionType&&this.collisionSystem.addCollider(t,t.isStatic)}removeRigidBody(t){const e=this.rigidBodies.indexOf(t);-1!==e&&(this.rigidBodies.splice(e,1),this.collisionSystem.removeCollider(t))}update(t){for(const e of this.rigidBodies)this.updateBody(e,t)}updateBody(t,e){if(t.isStatic)return;t.velocity||(t.velocity=new i);const s=t.position.clone();if(this.isUnderwater)this.underwaterPhysics.applyUnderwaterEffects(t,e);else{const i=this.gravity.clone().multiplyScalar(e);t.velocity.add(i)}const o=t.velocity.clone().multiplyScalar(e);t.position.add(o);const n=this.collisionSystem.checkCollisions(t);n.length>0&&this.resolveCollisions(t,n,s)}resolveCollisions(t,e,i){t.position.copy(i),t.velocity.multiplyScalar(.3),t.onCollision&&t.onCollision(e)}checkCollisions(){const t=[];for(let e=0;e<this.rigidBodies.length;e++){const i=this.rigidBodies[e],s=this.collisionSystem.checkCollisions(i);for(const e of s)t.push([i,e])}return t}createSphereBody(t,e,s=!1){return{position:t.clone(),velocity:new i,collisionType:"sphere",radius:e,isStatic:s}}createBoxBody(t,e,s=!1){return{position:t.clone(),velocity:new i,collisionType:"box",size:e.clone(),isStatic:s}}}class B{constructor(t,e,i,s,o){this.position=t.clone(),this.velocity=e.clone(),this.life=i,this.maxLife=i,this.size=s,this.color=o.clone(),this.alpha=1,this.active=!0}update(t){this.active&&(this.position.add(this.velocity.clone().multiplyScalar(t)),this.life-=t,this.alpha=this.life/this.maxLife,this.life<=0&&(this.active=!1))}reset(t,e,i,s,o){this.position.copy(t),this.velocity.copy(e),this.life=i,this.maxLife=i,this.size=s,this.color.copy(o),this.alpha=1,this.active=!0}}class C{constructor(t,e=1e3){this.scene=t,this.maxParticles=e,this.particles=[],this.emitters=[],this.initializeParticlePool(),this.createParticleRenderSystem(),this.createUnderwaterEmitters()}initializeParticlePool(){for(let t=0;t<this.maxParticles;t++){const t=new B(new i,new i,1,1,new s(16777215));t.active=!1,this.particles.push(t)}}createParticleRenderSystem(){this.geometry=new o,this.positions=new Float32Array(3*this.maxParticles),this.colors=new Float32Array(3*this.maxParticles),this.sizes=new Float32Array(this.maxParticles),this.alphas=new Float32Array(this.maxParticles),this.geometry.setAttribute("position",new n(this.positions,3)),this.geometry.setAttribute("color",new n(this.colors,3)),this.geometry.setAttribute("size",new n(this.sizes,1)),this.geometry.setAttribute("alpha",new n(this.alphas,1)),this.material=new a({uniforms:{time:{value:0},pointTexture:{value:this.createParticleTexture()}},vertexShader:"\n        attribute float size;\n        attribute float alpha;\n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vAlpha = alpha;\n          vColor = color;\n          \n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_PointSize = size * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      ",fragmentShader:"\n        uniform sampler2D pointTexture;\n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vec4 texColor = texture2D(pointTexture, gl_PointCoord);\n          gl_FragColor = vec4(vColor, vAlpha * texColor.a);\n        }\n      ",transparent:!0,blending:r,depthWrite:!1}),this.points=new c(this.geometry,this.material),this.scene.add(this.points)}createParticleTexture(){const t=document.createElement("canvas");t.width=64,t.height=64;const e=t.getContext("2d"),i=e.createRadialGradient(32,32,0,32,32,32);i.addColorStop(0,"rgba(255,255,255,1)"),i.addColorStop(.2,"rgba(255,255,255,0.8)"),i.addColorStop(.4,"rgba(255,255,255,0.4)"),i.addColorStop(1,"rgba(255,255,255,0)"),e.fillStyle=i,e.fillRect(0,0,64,64);const s=new h(t);return s.needsUpdate=!0,s}createUnderwaterEmitters(){this.addEmitter({type:"bubbles",position:new i(0,-10,0),rate:5,life:8,size:{min:2,max:6},velocity:new i(0,2,0),velocityVariation:new i(.5,.5,.5),color:new s(8900331),colorVariation:.1,area:new i(20,2,20)}),this.addEmitter({type:"debris",position:new i(0,0,0),rate:3,life:15,size:{min:1,max:3},velocity:new i(.1,.05,.1),velocityVariation:new i(.3,.2,.3),color:new s(16777215),colorVariation:.2,area:new i(40,20,40)}),this.addEmitter({type:"lightRays",position:new i(0,15,0),rate:.5,life:20,size:{min:8,max:15},velocity:new i(0,-.5,0),velocityVariation:new i(.1,.2,.1),color:new s(16766720),colorVariation:.1,area:new i(30,5,30)})}addEmitter(t){const e={...t,accumulator:0,active:!0};this.emitters.push(e)}emitParticle(t){const e=this.particles.find(t=>!t.active);if(!e)return;const s=t.position.clone().add(new i((Math.random()-.5)*t.area.x,(Math.random()-.5)*t.area.y,(Math.random()-.5)*t.area.z)),o=t.velocity.clone().add(new i((Math.random()-.5)*t.velocityVariation.x,(Math.random()-.5)*t.velocityVariation.y,(Math.random()-.5)*t.velocityVariation.z)),n=t.size.min+Math.random()*(t.size.max-t.size.min),a=t.color.clone();t.colorVariation>0&&a.offsetHSL((Math.random()-.5)*t.colorVariation,0,(Math.random()-.5)*t.colorVariation*.5),e.reset(s,o,t.life,n,a)}createBurst(t,e={}){const o=e.count||20,n=e.life||2,a=e.velocity||new i(0,1,0),r=e.velocityVariation||new i(2,2,2),c=e.color||new s(16766720),h=e.size||{min:2,max:8};for(let s=0;s<o;s++){const e=this.particles.find(t=>!t.active);if(!e)break;const s=a.clone().add(new i((Math.random()-.5)*r.x,(Math.random()-.5)*r.y,(Math.random()-.5)*r.z)),o=h.min+Math.random()*(h.max-h.min);e.reset(t.clone(),s,n,o,c)}}update(t){for(const i of this.emitters){if(!i.active)continue;i.accumulator+=t;const e=1/i.rate;for(;i.accumulator>=e;)this.emitParticle(i),i.accumulator-=e}let e=0;for(let i=0;i<this.particles.length;i++){const s=this.particles[i];if(s.active){s.update(t);const i=3*e;this.positions[i]=s.position.x,this.positions[i+1]=s.position.y,this.positions[i+2]=s.position.z,this.colors[i]=s.color.r,this.colors[i+1]=s.color.g,this.colors[i+2]=s.color.b,this.sizes[e]=s.size,this.alphas[e]=s.alpha,e++}}this.geometry.attributes.position.needsUpdate=!0,this.geometry.attributes.color.needsUpdate=!0,this.geometry.attributes.size.needsUpdate=!0,this.geometry.attributes.alpha.needsUpdate=!0,this.geometry.setDrawRange(0,e),this.material.uniforms.time.value+=t}setEmitterActive(t,e){const i=this.emitters.find(e=>e.type===t);i&&(i.active=e)}clear(){for(const t of this.particles)t.active=!1}dispose(){this.scene.remove(this.points),this.geometry.dispose(),this.material.dispose(),this.material.uniforms.pointTexture.value&&this.material.uniforms.pointTexture.value.dispose()}}class k{constructor(t,e){this.scene=t,this.physicsEngine=e,this.moveSpeed=8,this.rotationSpeed=3,this.maxVelocity=5,this.movementVector=new i,this.isMoving=!1,this.createPlayerMesh(),this.createPhysicsBody(),this.physicsBody.onCollision=t=>this.handleCollisions(t)}createPlayerMesh(){const t=new l(.5,1.5,4,8),e=new d({color:65416,transparent:!0,opacity:.9});this.mesh=new p(t,e),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.scene.add(this.mesh)}createPhysicsBody(){this.physicsBody=this.physicsEngine.createSphereBody(this.mesh.position,.7,!1),this.physicsEngine.addRigidBody(this.physicsBody)}handleInput(t){this.movementVector.set(0,0,0),this.isMoving=!1,t.keys&&(t.keys.forward&&(this.movementVector.z-=1,this.isMoving=!0),t.keys.backward&&(this.movementVector.z+=1,this.isMoving=!0),t.keys.left&&(this.movementVector.x-=1,this.isMoving=!0),t.keys.right&&(this.movementVector.x+=1,this.isMoving=!0),t.keys.up&&(this.movementVector.y+=1,this.isMoving=!0),t.keys.down&&(this.movementVector.y-=1,this.isMoving=!0)),t.joystick&&(this.movementVector.x+=t.joystick.x,this.movementVector.z+=t.joystick.y,(Math.abs(t.joystick.x)>.1||Math.abs(t.joystick.y)>.1)&&(this.isMoving=!0)),t.mobileButtons&&(t.mobileButtons.swimUp&&(this.movementVector.y+=1,this.isMoving=!0),t.mobileButtons.swimDown&&(this.movementVector.y-=1,this.isMoving=!0)),this.movementVector.length()>1&&this.movementVector.normalize(),this.applyMovement()}applyMovement(){if(!this.isMoving)return void this.physicsBody.velocity.multiplyScalar(.9);const t=this.movementVector.clone().multiplyScalar(.016*this.moveSpeed);if(this.physicsBody.velocity.add(t),this.physicsBody.velocity.length()>this.maxVelocity&&this.physicsBody.velocity.normalize().multiplyScalar(this.maxVelocity),this.movementVector.length()>.1){const t=Math.atan2(this.movementVector.x,this.movementVector.z);this.mesh.rotation.y=y.lerp(this.mesh.rotation.y,t,.016*this.rotationSpeed)}}update(){this.mesh.position.copy(this.physicsBody.position);const t=.001*Date.now();this.mesh.position.y+=.02*Math.sin(2*t),this.physicsBody.position.copy(this.mesh.position)}handleCollisions(t){for(const e of t)"collectible"===e.type?this.handleCollectibleCollision(e):"obstacle"===e.type?this.handleObstacleCollision(e):"environment"===e.type&&this.handleEnvironmentCollision(e)}handleCollectibleCollision(t){console.log("Player collected item:",t)}handleObstacleCollision(t){const e=this.physicsBody.position.clone().sub(t.position).normalize();this.physicsBody.velocity.add(e.multiplyScalar(2))}handleEnvironmentCollision(){}getPosition(){return this.mesh.position.clone()}setPosition(t){this.mesh.position.copy(t),this.physicsBody.position.copy(t)}getVelocity(){return this.physicsBody.velocity.clone()}getIsMoving(){return this.isMoving||this.physicsBody.velocity.length()>.1}dispose(){this.physicsEngine.removeRigidBody(this.physicsBody),this.scene.remove(this.mesh),this.mesh.geometry.dispose(),this.mesh.material.dispose()}}const M="gameCanvas",z="loading",E="ui";class P{constructor(){this.scene=null,this.camera=null,this.renderer=null,this.canvas=null,this.isLoaded=!1,this.isMobile=this.detectMobile(),this.physicsEngine=null,this.particleSystem=null,this.player=null,this.environmentObjects=[],this.starCount=0,this.levelNumber=1,this.inputState={keys:{forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},joystick:{x:0,y:0},mobileButtons:{swimUp:!1,swimDown:!1}},this.lastTime=0,console.log("🌊 Ocean Adventure - Initializing...")}async initialize(){try{this.setupCanvas(),this.setupRenderer(),this.setupScene(),this.setupCamera(),this.setupLights(),this.initializePhysics(),this.initializeParticleSystem(),this.createUnderwaterEnvironment(),this.createPlayer(),this.createSampleStars(),this.setupEventListeners(),this.hideLoading(),this.showUI(),this.startGameLoop(),this.isLoaded=!0,console.log("🎮 Ocean Adventure - Ready to play!")}catch(t){console.error("❌ Failed to initialize game:",t)}}setupCanvas(){if(this.canvas=document.getElementById(M),!this.canvas)throw new Error("Game canvas not found")}setupRenderer(){this.renderer=new m({canvas:this.canvas,antialias:!this.isMobile,alpha:!1}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.setClearColor(4386,1),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=u}setupScene(){this.scene=new v}initializePhysics(){this.physicsEngine=new x,console.log("⚡ Physics engine initialized")}initializeParticleSystem(){this.particleSystem=new C(this.scene,500),console.log("✨ Particle system initialized")}setupCamera(){this.camera=new w(75,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.set(0,5,10),this.camera.lookAt(0,0,0)}setupLights(){const t=new g(4210816,.4);this.scene.add(t);const e=new S(8900331,.8);e.position.set(0,50,0),e.castShadow=!0,e.shadow.mapSize.width=2048,e.shadow.mapSize.height=2048,this.scene.add(e)}createUnderwaterEnvironment(){const t=new f(100,100),e=new d({color:9127187}),o=new p(t,e);o.rotation.x=-Math.PI/2,o.position.y=-5,o.receiveShadow=!0,this.scene.add(o);const n=this.physicsEngine.createBoxBody(new i(0,-5,0),new i(100,.1,100),!0);n.type="environment",this.physicsEngine.addRigidBody(n);for(let a=0;a<10;a++){const t=.5+1.5*Math.random(),e=new b(t),o=new d({color:(new s).setHSL(.3*Math.random(),.7,.5)}),n=new p(e,o),a=new i(80*(Math.random()-.5),2*Math.random()-4,80*(Math.random()-.5));n.position.copy(a),n.castShadow=!0,this.scene.add(n);const r=this.physicsEngine.createSphereBody(a,1.2*t,!0);r.type="environment",r.mesh=n,this.physicsEngine.addRigidBody(r),this.environmentObjects.push({mesh:n,physicsBody:r})}}createPlayer(){this.player=new k(this.scene,this.physicsEngine),console.log("🏊 Player created with physics")}createSampleStars(){this.stars=[];for(let t=0;t<5;t++){const t=new b(.3),e=new d({color:16766720,emissive:16766720,emissiveIntensity:.3}),s=new p(t,e),o=new i(20*(Math.random()-.5),8*Math.random()-2,20*(Math.random()-.5));s.position.copy(o);const n=this.physicsEngine.createSphereBody(o,.5,!0);n.type="collectible",n.mesh=s,n.collected=!1,this.physicsEngine.addRigidBody(n),s.userData={rotationSpeed:.02+.02*Math.random(),physicsBody:n},this.stars.push({mesh:s,physicsBody:n}),this.scene.add(s)}}setupEventListeners(){window.addEventListener("resize",()=>this.onWindowResize()),window.addEventListener("keydown",t=>this.onKeyDown(t)),window.addEventListener("keyup",t=>this.onKeyUp(t)),this.isMobile&&this.setupTouchControls()}onKeyDown(t){switch(t.code){case"ArrowUp":case"KeyW":this.inputState.keys.forward=!0;break;case"ArrowDown":case"KeyS":this.inputState.keys.backward=!0;break;case"ArrowLeft":case"KeyA":this.inputState.keys.left=!0;break;case"ArrowRight":case"KeyD":this.inputState.keys.right=!0;break;case"Space":this.inputState.keys.up=!0,t.preventDefault();break;case"ShiftLeft":this.inputState.keys.down=!0}}onKeyUp(t){switch(t.code){case"ArrowUp":case"KeyW":this.inputState.keys.forward=!1;break;case"ArrowDown":case"KeyS":this.inputState.keys.backward=!1;break;case"ArrowLeft":case"KeyA":this.inputState.keys.left=!1;break;case"ArrowRight":case"KeyD":this.inputState.keys.right=!1;break;case"Space":this.inputState.keys.up=!1;break;case"ShiftLeft":this.inputState.keys.down=!1}}setupTouchControls(){this.setupVirtualJoystick(),this.setupMobileButtons(),this.touchState={startX:0,startY:0,currentX:0,currentY:0,isActive:!1},this.canvas.addEventListener("touchstart",t=>{if(t.preventDefault(),t.touches.length>0){const e=t.touches[0];this.touchState.startX=e.clientX,this.touchState.startY=e.clientY,this.touchState.currentX=e.clientX,this.touchState.currentY=e.clientY,this.touchState.isActive=!0}}),this.canvas.addEventListener("touchmove",t=>{if(t.preventDefault(),t.touches.length>0&&this.touchState.isActive){const e=t.touches[0];this.touchState.currentX=e.clientX,this.touchState.currentY=e.clientY;const i=this.touchState.currentX-this.touchState.startX,s=this.touchState.currentY-this.touchState.startY,o=.05,n=3;Math.abs(i)>20&&(this.player.position.x+=i/n*o*.01),Math.abs(s)>20&&(this.player.position.z+=s/n*o*.01),this.updateCamera()}}),this.canvas.addEventListener("touchend",t=>{t.preventDefault(),this.touchState.isActive=!1}),this.canvas.addEventListener("touchcancel",t=>{t.preventDefault(),this.touchState.isActive=!1})}setupVirtualJoystick(){const t=document.getElementById("virtualJoystick"),e=document.getElementById("joystickKnob");if(!t||!e)return;const i={isActive:!1,centerX:0,centerY:0,currentX:0,currentY:0};t.addEventListener("touchstart",s=>{if(s.preventDefault(),s.stopPropagation(),s.touches.length>0){const o=s.touches[0],n=t.getBoundingClientRect();i.isActive=!0,i.centerX=n.left+n.width/2,i.centerY=n.top+n.height/2,i.currentX=o.clientX,i.currentY=o.clientY,this.updateJoystickKnob(e,i,n)}}),t.addEventListener("touchmove",s=>{if(s.preventDefault(),s.stopPropagation(),s.touches.length>0&&i.isActive){const o=s.touches[0],n=t.getBoundingClientRect();i.currentX=o.clientX,i.currentY=o.clientY;const a=i.currentX-i.centerX,r=i.currentY-i.centerY,c=Math.sqrt(a*a+r*r),h=n.width/2-20;if(c>5){const t=a/h,e=r/h;this.inputState.joystick.x=.8*t,this.inputState.joystick.y=.8*e}else this.inputState.joystick.x=0,this.inputState.joystick.y=0;this.updateJoystickKnob(e,i,n)}}),t.addEventListener("touchend",t=>{t.preventDefault(),t.stopPropagation(),i.isActive=!1,this.inputState.joystick.x=0,this.inputState.joystick.y=0,e.style.transform="translate(-50%, -50%)"}),t.addEventListener("touchcancel",t=>{t.preventDefault(),t.stopPropagation(),i.isActive=!1,this.inputState.joystick.x=0,this.inputState.joystick.y=0,e.style.transform="translate(-50%, -50%)"})}updateJoystickKnob(t,e,i){const s=e.currentX-e.centerX,o=e.currentY-e.centerY,n=Math.sqrt(s*s+o*o),a=i.width/2-20;if(n<=a)t.style.transform=`translate(calc(-50% + ${s}px), calc(-50% + ${o}px))`;else{const e=Math.atan2(o,s),i=Math.cos(e)*a,n=Math.sin(e)*a;t.style.transform=`translate(calc(-50% + ${i}px), calc(-50% + ${n}px))`}}setupMobileButtons(){const t=document.getElementById("swimUpBtn"),e=document.getElementById("swimDownBtn");t&&(t.addEventListener("touchstart",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimUp=!0}),t.addEventListener("touchend",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimUp=!1})),e&&(e.addEventListener("touchstart",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimDown=!0}),e.addEventListener("touchend",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimDown=!1}))}onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}updateCamera(){const t=this.player.getPosition(),e=new i(0,5,10),s=t.clone().add(e);this.camera.position.lerp(s,.1),this.camera.lookAt(t)}startGameLoop(){const t=e=>{requestAnimationFrame(t);const i=this.lastTime>0?(e-this.lastTime)/1e3:.016;this.lastTime=e,this.update(i),this.render()};t(0)}update(t){this.isLoaded&&(t=Math.min(t,.033),this.physicsEngine.update(t),this.player.handleInput(this.inputState),this.player.update(),this.particleSystem.update(t),this.updateCamera(),this.stars.forEach(t=>{const e=t.mesh;e.rotation.y+=e.userData.rotationSpeed,e.rotation.x+=.5*e.userData.rotationSpeed}),this.checkStarCollection())}checkStarCollection(){const t=this.physicsEngine.collisionSystem.checkCollisions(this.player.physicsBody);for(const e of t)if("collectible"===e.type&&!e.collected){e.collected=!0;const t=this.stars.find(t=>t.physicsBody===e);if(t){this.scene.remove(t.mesh),this.physicsEngine.removeRigidBody(t.physicsBody);const e=this.stars.indexOf(t);-1!==e&&this.stars.splice(e,1),this.starCount++,this.updateUI(),this.particleSystem.createBurst(t.mesh.position,{count:15,life:1.5,velocity:new i(0,2,0),velocityVariation:new i(3,3,3),color:new s(16766720),size:{min:3,max:8}}),console.log(`⭐ Star collected! Total: ${this.starCount}`),0===this.stars.length&&this.levelComplete()}}}levelComplete(){console.log("🎉 Level Complete!"),this.levelNumber++,this.createSampleStars(),this.updateUI()}updateUI(){document.getElementById("starCount").textContent=this.starCount,document.getElementById("levelNumber").textContent=this.levelNumber}render(){this.renderer&&this.scene&&this.camera&&this.renderer.render(this.scene,this.camera)}hideLoading(){const t=document.getElementById(z);t&&t.classList.add("hidden")}showUI(){const t=document.getElementById(E);t&&t.classList.remove("hidden"),this.updateUI()}detectMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}}window.addEventListener("DOMContentLoaded",async()=>{const t=new P;await t.initialize()}),window.addEventListener("webglcontextlost",t=>{t.preventDefault(),console.warn("WebGL context lost")}),window.addEventListener("webglcontextrestored",()=>{console.log("WebGL context restored")})}}});
//# sourceMappingURL=index-legacy-BXQpFl10.js.map
