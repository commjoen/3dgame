{"version":3,"file":"index-ojxsXvj4.js","sources":["../../src/core/Physics.js","../../src/core/ParticleSystem.js","../../src/components/Player.js","../../src/main.js"],"sourcesContent":["/**\n * Physics Engine for Ocean Adventure\n *\n * Implements collision detection and underwater physics simulation\n * including buoyancy, drag, and environmental forces.\n */\n\nimport * as THREE from 'three'\n\n/**\n * Collision system supporting AABB and sphere-based collision detection\n */\nexport class CollisionSystem {\n  constructor() {\n    this.colliders = []\n    this.staticColliders = []\n  }\n\n  /**\n   * Add a collider to the system\n   * @param {Object} collider - Collider object with geometry and position\n   * @param {boolean} isStatic - Whether the collider is static (doesn't move)\n   */\n  addCollider(collider, isStatic = false) {\n    const list = isStatic ? this.staticColliders : this.colliders\n    list.push(collider)\n  }\n\n  /**\n   * Remove a collider from the system\n   * @param {Object} collider - Collider to remove\n   */\n  removeCollider(collider) {\n    let index = this.colliders.indexOf(collider)\n    if (index !== -1) {\n      this.colliders.splice(index, 1)\n      return\n    }\n\n    index = this.staticColliders.indexOf(collider)\n    if (index !== -1) {\n      this.staticColliders.splice(index, 1)\n    }\n  }\n\n  /**\n   * Check for collisions between two objects\n   * @param {Object} objectA - First object with position and geometry\n   * @param {Object} objectB - Second object with position and geometry\n   * @returns {boolean} Whether objects are colliding\n   */\n  checkCollision(objectA, objectB) {\n    // Sphere-sphere collision detection\n    if (\n      objectA.collisionType === 'sphere' &&\n      objectB.collisionType === 'sphere'\n    ) {\n      return this.checkSphereCollision(objectA, objectB)\n    }\n\n    // AABB-AABB collision detection\n    if (objectA.collisionType === 'box' && objectB.collisionType === 'box') {\n      return this.checkAABBCollision(objectA, objectB)\n    }\n\n    // Sphere-AABB collision detection\n    if (\n      (objectA.collisionType === 'sphere' && objectB.collisionType === 'box') ||\n      (objectA.collisionType === 'box' && objectB.collisionType === 'sphere')\n    ) {\n      return this.checkSphereAABBCollision(objectA, objectB)\n    }\n\n    return false\n  }\n\n  /**\n   * Check sphere-sphere collision\n   * @param {Object} sphereA - First sphere\n   * @param {Object} sphereB - Second sphere\n   * @returns {boolean} Whether spheres are colliding\n   */\n  checkSphereCollision(sphereA, sphereB) {\n    const distance = sphereA.position.distanceTo(sphereB.position)\n    const radiusSum = sphereA.radius + sphereB.radius\n    return distance <= radiusSum\n  }\n\n  /**\n   * Check AABB-AABB collision\n   * @param {Object} boxA - First box\n   * @param {Object} boxB - Second box\n   * @returns {boolean} Whether boxes are colliding\n   */\n  checkAABBCollision(boxA, boxB) {\n    const minA = boxA.position\n      .clone()\n      .sub(boxA.size.clone().multiplyScalar(0.5))\n    const maxA = boxA.position\n      .clone()\n      .add(boxA.size.clone().multiplyScalar(0.5))\n    const minB = boxB.position\n      .clone()\n      .sub(boxB.size.clone().multiplyScalar(0.5))\n    const maxB = boxB.position\n      .clone()\n      .add(boxB.size.clone().multiplyScalar(0.5))\n\n    return (\n      minA.x <= maxB.x &&\n      maxA.x >= minB.x &&\n      minA.y <= maxB.y &&\n      maxA.y >= minB.y &&\n      minA.z <= maxB.z &&\n      maxA.z >= minB.z\n    )\n  }\n\n  /**\n   * Check sphere-AABB collision\n   * @param {Object} objectA - First object (sphere or box)\n   * @param {Object} objectB - Second object (sphere or box)\n   * @returns {boolean} Whether objects are colliding\n   */\n  checkSphereAABBCollision(objectA, objectB) {\n    const sphere = objectA.collisionType === 'sphere' ? objectA : objectB\n    const box = objectA.collisionType === 'box' ? objectA : objectB\n\n    const boxMin = box.position\n      .clone()\n      .sub(box.size.clone().multiplyScalar(0.5))\n    const boxMax = box.position\n      .clone()\n      .add(box.size.clone().multiplyScalar(0.5))\n\n    // Find closest point on box to sphere center\n    const closestPoint = new THREE.Vector3(\n      Math.max(boxMin.x, Math.min(sphere.position.x, boxMax.x)),\n      Math.max(boxMin.y, Math.min(sphere.position.y, boxMax.y)),\n      Math.max(boxMin.z, Math.min(sphere.position.z, boxMax.z))\n    )\n\n    const distance = sphere.position.distanceTo(closestPoint)\n    return distance <= sphere.radius\n  }\n\n  /**\n   * Check all collisions for a given object\n   * @param {Object} object - Object to check collisions for\n   * @returns {Array} Array of colliding objects\n   */\n  checkCollisions(object) {\n    const collisions = []\n\n    // Check against dynamic colliders\n    for (const collider of this.colliders) {\n      if (collider !== object && this.checkCollision(object, collider)) {\n        collisions.push(collider)\n      }\n    }\n\n    // Check against static colliders\n    for (const collider of this.staticColliders) {\n      if (this.checkCollision(object, collider)) {\n        collisions.push(collider)\n      }\n    }\n\n    return collisions\n  }\n}\n\n/**\n * Underwater physics simulation\n */\nexport class UnderwaterPhysics {\n  constructor() {\n    this.buoyancyForce = 9.8 // Force opposing gravity underwater\n    this.dragCoefficient = 0.95 // Water resistance (0-1, lower = more drag)\n    this.currentDirection = new THREE.Vector3(0.1, 0, 0.05) // Gentle underwater current\n    this.currentStrength = 0.02\n  }\n\n  /**\n   * Apply buoyancy force to an object\n   * @param {Object} body - Physics body with velocity and position\n   * @param {number} deltaTime - Time since last frame\n   */\n  applyBuoyancy(body, deltaTime) {\n    const buoyancy = new THREE.Vector3(0, this.buoyancyForce * deltaTime, 0)\n    body.velocity.add(buoyancy)\n  }\n\n  /**\n   * Apply drag force to an object\n   * @param {Object} body - Physics body with velocity\n   */\n  applyDrag(body) {\n    body.velocity.multiplyScalar(this.dragCoefficient)\n  }\n\n  /**\n   * Apply underwater current to an object\n   * @param {Object} body - Physics body with velocity\n   * @param {number} currentStrength - Strength multiplier for current effect\n   * @param {number} deltaTime - Time since last frame\n   */\n  applyCurrent(body, currentStrength = 1.0, deltaTime) {\n    const currentForce = this.currentDirection\n      .clone()\n      .multiplyScalar(this.currentStrength * currentStrength * deltaTime)\n    body.velocity.add(currentForce)\n  }\n\n  /**\n   * Apply all underwater physics effects\n   * @param {Object} body - Physics body\n   * @param {number} deltaTime - Time since last frame\n   */\n  applyUnderwaterEffects(body, deltaTime) {\n    this.applyBuoyancy(body, deltaTime)\n    this.applyDrag(body)\n    this.applyCurrent(body, 1.0, deltaTime)\n  }\n}\n\n/**\n * Main Physics Engine\n */\nexport class PhysicsEngine {\n  constructor() {\n    this.gravity = new THREE.Vector3(0, -9.8, 0)\n    this.waterDensity = 1000 // kg/mÂ³\n    this.collisionSystem = new CollisionSystem()\n    this.underwaterPhysics = new UnderwaterPhysics()\n    this.rigidBodies = []\n    this.isUnderwater = true // For now, everything is underwater\n  }\n\n  /**\n   * Add a rigid body to the physics simulation\n   * @param {Object} body - Physics body to add\n   */\n  addRigidBody(body) {\n    this.rigidBodies.push(body)\n\n    // Add to collision system if it has collision properties\n    if (body.collisionType) {\n      this.collisionSystem.addCollider(body, body.isStatic)\n    }\n  }\n\n  /**\n   * Remove a rigid body from the physics simulation\n   * @param {Object} body - Physics body to remove\n   */\n  removeRigidBody(body) {\n    const index = this.rigidBodies.indexOf(body)\n    if (index !== -1) {\n      this.rigidBodies.splice(index, 1)\n      this.collisionSystem.removeCollider(body)\n    }\n  }\n\n  /**\n   * Update all physics bodies\n   * @param {number} deltaTime - Time since last frame\n   */\n  update(deltaTime) {\n    for (const body of this.rigidBodies) {\n      this.updateBody(body, deltaTime)\n    }\n  }\n\n  /**\n   * Update a single physics body\n   * @param {Object} body - Physics body to update\n   * @param {number} deltaTime - Time since last frame\n   */\n  updateBody(body, deltaTime) {\n    if (body.isStatic) {\n      return\n    }\n\n    // Initialize velocity if not present\n    if (!body.velocity) {\n      body.velocity = new THREE.Vector3()\n    }\n\n    // Store previous position for collision resolution\n    const previousPosition = body.position.clone()\n\n    // Apply forces based on environment\n    if (this.isUnderwater) {\n      this.underwaterPhysics.applyUnderwaterEffects(body, deltaTime)\n    } else {\n      // Apply gravity in air\n      const gravityForce = this.gravity.clone().multiplyScalar(deltaTime)\n      body.velocity.add(gravityForce)\n    }\n\n    // Apply velocity to position\n    const velocityDelta = body.velocity.clone().multiplyScalar(deltaTime)\n    body.position.add(velocityDelta)\n\n    // Check collisions and resolve\n    const collisions = this.collisionSystem.checkCollisions(body)\n    if (collisions.length > 0) {\n      this.resolveCollisions(body, collisions, previousPosition)\n    }\n  }\n\n  /**\n   * Resolve collisions for a body\n   * @param {Object} body - Physics body that collided\n   * @param {Array} collisions - Array of colliding objects\n   * @param {THREE.Vector3} previousPosition - Position before collision\n   */\n  resolveCollisions(body, collisions, previousPosition) {\n    // Simple collision resolution: revert to previous position and stop movement\n    body.position.copy(previousPosition)\n\n    // Reduce velocity on collision (bounce/friction)\n    body.velocity.multiplyScalar(0.3)\n\n    // Notify collision callbacks if present\n    if (body.onCollision) {\n      body.onCollision(collisions)\n    }\n  }\n\n  /**\n   * Check collisions for all bodies\n   * @returns {Array} Array of collision pairs\n   */\n  checkCollisions() {\n    const collisionPairs = []\n\n    for (let i = 0; i < this.rigidBodies.length; i++) {\n      const bodyA = this.rigidBodies[i]\n      const collisions = this.collisionSystem.checkCollisions(bodyA)\n\n      for (const bodyB of collisions) {\n        collisionPairs.push([bodyA, bodyB])\n      }\n    }\n\n    return collisionPairs\n  }\n\n  /**\n   * Create a sphere collision body\n   * @param {THREE.Vector3} position - Position of the sphere\n   * @param {number} radius - Radius of the sphere\n   * @param {boolean} isStatic - Whether the body is static\n   * @returns {Object} Collision body\n   */\n  createSphereBody(position, radius, isStatic = false) {\n    return {\n      position: position.clone(),\n      velocity: new THREE.Vector3(),\n      collisionType: 'sphere',\n      radius: radius,\n      isStatic: isStatic,\n    }\n  }\n\n  /**\n   * Create a box collision body\n   * @param {THREE.Vector3} position - Position of the box\n   * @param {THREE.Vector3} size - Size of the box\n   * @param {boolean} isStatic - Whether the body is static\n   * @returns {Object} Collision body\n   */\n  createBoxBody(position, size, isStatic = false) {\n    return {\n      position: position.clone(),\n      velocity: new THREE.Vector3(),\n      collisionType: 'box',\n      size: size.clone(),\n      isStatic: isStatic,\n    }\n  }\n}\n","/**\n * Particle System for Ocean Adventure\n *\n * Creates underwater atmosphere with bubbles, light rays,\n * and collection effects for enhanced immersion.\n */\n\nimport * as THREE from 'three'\n\n/**\n * Individual particle class\n */\nclass Particle {\n  constructor(position, velocity, life, size, color) {\n    this.position = position.clone()\n    this.velocity = velocity.clone()\n    this.life = life\n    this.maxLife = life\n    this.size = size\n    this.color = color.clone()\n    this.alpha = 1.0\n    this.active = true\n  }\n\n  /**\n   * Update particle state\n   * @param {number} deltaTime - Time since last frame\n   */\n  update(deltaTime) {\n    if (!this.active) {\n      return\n    }\n\n    // Update position\n    this.position.add(this.velocity.clone().multiplyScalar(deltaTime))\n\n    // Update life\n    this.life -= deltaTime\n\n    // Update alpha based on life remaining\n    this.alpha = this.life / this.maxLife\n\n    // Deactivate particle if life is over\n    if (this.life <= 0) {\n      this.active = false\n    }\n  }\n\n  /**\n   * Reset particle with new properties\n   * @param {THREE.Vector3} position - New position\n   * @param {THREE.Vector3} velocity - New velocity\n   * @param {number} life - New life span\n   * @param {number} size - New size\n   * @param {THREE.Color} color - New color\n   */\n  reset(position, velocity, life, size, color) {\n    this.position.copy(position)\n    this.velocity.copy(velocity)\n    this.life = life\n    this.maxLife = life\n    this.size = size\n    this.color.copy(color)\n    this.alpha = 1.0\n    this.active = true\n  }\n}\n\n/**\n * Main particle system class\n */\nexport class ParticleSystem {\n  constructor(scene, maxParticles = 1000) {\n    this.scene = scene\n    this.maxParticles = maxParticles\n    this.particles = []\n    this.emitters = []\n\n    // Create particle pool\n    this.initializeParticlePool()\n\n    // Create particle geometry and material\n    this.createParticleRenderSystem()\n\n    // Add default underwater emitters\n    this.createUnderwaterEmitters()\n  }\n\n  /**\n   * Initialize the particle pool for object reuse\n   */\n  initializeParticlePool() {\n    for (let i = 0; i < this.maxParticles; i++) {\n      const particle = new Particle(\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        1.0,\n        1.0,\n        new THREE.Color(0xffffff)\n      )\n      particle.active = false\n      this.particles.push(particle)\n    }\n  }\n\n  /**\n   * Create the rendering system for particles\n   */\n  createParticleRenderSystem() {\n    // Create geometry for point sprites\n    this.geometry = new THREE.BufferGeometry()\n\n    // Create arrays for particle attributes\n    this.positions = new Float32Array(this.maxParticles * 3)\n    this.colors = new Float32Array(this.maxParticles * 3)\n    this.sizes = new Float32Array(this.maxParticles)\n    this.alphas = new Float32Array(this.maxParticles)\n\n    // Set attributes\n    this.geometry.setAttribute(\n      'position',\n      new THREE.BufferAttribute(this.positions, 3)\n    )\n    this.geometry.setAttribute(\n      'color',\n      new THREE.BufferAttribute(this.colors, 3)\n    )\n    this.geometry.setAttribute('size', new THREE.BufferAttribute(this.sizes, 1))\n    this.geometry.setAttribute(\n      'alpha',\n      new THREE.BufferAttribute(this.alphas, 1)\n    )\n\n    // Create shader material for better underwater effects\n    this.material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0.0 },\n        pointTexture: { value: this.createParticleTexture() },\n      },\n      vertexShader: `\n        attribute float size;\n        attribute float alpha;\n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vAlpha = alpha;\n          vColor = color;\n          \n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_PointSize = size * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        uniform sampler2D pointTexture;\n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vec4 texColor = texture2D(pointTexture, gl_PointCoord);\n          gl_FragColor = vec4(vColor, vAlpha * texColor.a);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n    })\n\n    // Create points object\n    this.points = new THREE.Points(this.geometry, this.material)\n    this.scene.add(this.points)\n  }\n\n  /**\n   * Create texture for particles\n   * @returns {THREE.Texture} Particle texture\n   */\n  createParticleTexture() {\n    const canvas = document.createElement('canvas')\n    canvas.width = 64\n    canvas.height = 64\n\n    const context = canvas.getContext('2d')\n    const gradient = context.createRadialGradient(32, 32, 0, 32, 32, 32)\n    gradient.addColorStop(0, 'rgba(255,255,255,1)')\n    gradient.addColorStop(0.2, 'rgba(255,255,255,0.8)')\n    gradient.addColorStop(0.4, 'rgba(255,255,255,0.4)')\n    gradient.addColorStop(1, 'rgba(255,255,255,0)')\n\n    context.fillStyle = gradient\n    context.fillRect(0, 0, 64, 64)\n\n    const texture = new THREE.Texture(canvas)\n    texture.needsUpdate = true\n    return texture\n  }\n\n  /**\n   * Create underwater particle emitters\n   */\n  createUnderwaterEmitters() {\n    // Bubble emitter\n    this.addEmitter({\n      type: 'bubbles',\n      position: new THREE.Vector3(0, -10, 0),\n      rate: 5, // particles per second\n      life: 8.0,\n      size: { min: 2, max: 6 },\n      velocity: new THREE.Vector3(0, 2, 0),\n      velocityVariation: new THREE.Vector3(0.5, 0.5, 0.5),\n      color: new THREE.Color(0x87ceeb),\n      colorVariation: 0.1,\n      area: new THREE.Vector3(20, 2, 20), // Emission area\n    })\n\n    // Floating particles (debris/plankton)\n    this.addEmitter({\n      type: 'debris',\n      position: new THREE.Vector3(0, 0, 0),\n      rate: 3,\n      life: 15.0,\n      size: { min: 1, max: 3 },\n      velocity: new THREE.Vector3(0.1, 0.05, 0.1),\n      velocityVariation: new THREE.Vector3(0.3, 0.2, 0.3),\n      color: new THREE.Color(0xffffff),\n      colorVariation: 0.2,\n      area: new THREE.Vector3(40, 20, 40),\n    })\n\n    // Light rays effect (very sparse)\n    this.addEmitter({\n      type: 'lightRays',\n      position: new THREE.Vector3(0, 15, 0),\n      rate: 0.5,\n      life: 20.0,\n      size: { min: 8, max: 15 },\n      velocity: new THREE.Vector3(0, -0.5, 0),\n      velocityVariation: new THREE.Vector3(0.1, 0.2, 0.1),\n      color: new THREE.Color(0xffd700),\n      colorVariation: 0.1,\n      area: new THREE.Vector3(30, 5, 30),\n    })\n  }\n\n  /**\n   * Add a particle emitter\n   * @param {Object} emitterConfig - Configuration for the emitter\n   */\n  addEmitter(emitterConfig) {\n    const emitter = {\n      ...emitterConfig,\n      accumulator: 0.0, // For rate control\n      active: true,\n    }\n    this.emitters.push(emitter)\n  }\n\n  /**\n   * Emit a single particle\n   * @param {Object} emitter - Emitter configuration\n   */\n  emitParticle(emitter) {\n    // Find inactive particle\n    const particle = this.particles.find(p => !p.active)\n    if (!particle) {\n      return\n    } // No available particles\n\n    // Calculate random position within emission area\n    const position = emitter.position\n      .clone()\n      .add(\n        new THREE.Vector3(\n          (Math.random() - 0.5) * emitter.area.x,\n          (Math.random() - 0.5) * emitter.area.y,\n          (Math.random() - 0.5) * emitter.area.z\n        )\n      )\n\n    // Calculate random velocity\n    const velocity = emitter.velocity\n      .clone()\n      .add(\n        new THREE.Vector3(\n          (Math.random() - 0.5) * emitter.velocityVariation.x,\n          (Math.random() - 0.5) * emitter.velocityVariation.y,\n          (Math.random() - 0.5) * emitter.velocityVariation.z\n        )\n      )\n\n    // Calculate random size\n    const size =\n      emitter.size.min + Math.random() * (emitter.size.max - emitter.size.min)\n\n    // Calculate random color\n    const color = emitter.color.clone()\n    if (emitter.colorVariation > 0) {\n      color.offsetHSL(\n        (Math.random() - 0.5) * emitter.colorVariation,\n        0,\n        (Math.random() - 0.5) * emitter.colorVariation * 0.5\n      )\n    }\n\n    // Reset particle with new properties\n    particle.reset(position, velocity, emitter.life, size, color)\n  }\n\n  /**\n   * Create a burst of particles at a specific location\n   * @param {THREE.Vector3} position - Position to emit particles\n   * @param {Object} config - Burst configuration\n   */\n  createBurst(position, config = {}) {\n    const count = config.count || 20\n    const life = config.life || 2.0\n    const velocity = config.velocity || new THREE.Vector3(0, 1, 0)\n    const velocityVariation =\n      config.velocityVariation || new THREE.Vector3(2, 2, 2)\n    const color = config.color || new THREE.Color(0xffd700)\n    const size = config.size || { min: 2, max: 8 }\n\n    for (let i = 0; i < count; i++) {\n      const particle = this.particles.find(p => !p.active)\n      if (!particle) {\n        break\n      }\n\n      const burstVelocity = velocity\n        .clone()\n        .add(\n          new THREE.Vector3(\n            (Math.random() - 0.5) * velocityVariation.x,\n            (Math.random() - 0.5) * velocityVariation.y,\n            (Math.random() - 0.5) * velocityVariation.z\n          )\n        )\n\n      const particleSize = size.min + Math.random() * (size.max - size.min)\n\n      particle.reset(position.clone(), burstVelocity, life, particleSize, color)\n    }\n  }\n\n  /**\n   * Update particle system\n   * @param {number} deltaTime - Time since last frame\n   */\n  update(deltaTime) {\n    // Update emitters\n    for (const emitter of this.emitters) {\n      if (!emitter.active) {\n        continue\n      }\n\n      emitter.accumulator += deltaTime\n      const emissionInterval = 1.0 / emitter.rate\n\n      while (emitter.accumulator >= emissionInterval) {\n        this.emitParticle(emitter)\n        emitter.accumulator -= emissionInterval\n      }\n    }\n\n    // Update particles\n    let activeCount = 0\n    for (let i = 0; i < this.particles.length; i++) {\n      const particle = this.particles[i]\n\n      if (particle.active) {\n        particle.update(deltaTime)\n\n        // Update render attributes\n        const index3 = activeCount * 3\n        this.positions[index3] = particle.position.x\n        this.positions[index3 + 1] = particle.position.y\n        this.positions[index3 + 2] = particle.position.z\n\n        this.colors[index3] = particle.color.r\n        this.colors[index3 + 1] = particle.color.g\n        this.colors[index3 + 2] = particle.color.b\n\n        this.sizes[activeCount] = particle.size\n        this.alphas[activeCount] = particle.alpha\n\n        activeCount++\n      }\n    }\n\n    // Update geometry\n    this.geometry.attributes.position.needsUpdate = true\n    this.geometry.attributes.color.needsUpdate = true\n    this.geometry.attributes.size.needsUpdate = true\n    this.geometry.attributes.alpha.needsUpdate = true\n\n    // Update draw range to only render active particles\n    this.geometry.setDrawRange(0, activeCount)\n\n    // Update shader uniforms\n    this.material.uniforms.time.value += deltaTime\n  }\n\n  /**\n   * Set emitter active state\n   * @param {string} type - Emitter type\n   * @param {boolean} active - Whether emitter should be active\n   */\n  setEmitterActive(type, active) {\n    const emitter = this.emitters.find(e => e.type === type)\n    if (emitter) {\n      emitter.active = active\n    }\n  }\n\n  /**\n   * Remove all particles\n   */\n  clear() {\n    for (const particle of this.particles) {\n      particle.active = false\n    }\n  }\n\n  /**\n   * Dispose of particle system resources\n   */\n  dispose() {\n    this.scene.remove(this.points)\n    this.geometry.dispose()\n    this.material.dispose()\n    if (this.material.uniforms.pointTexture.value) {\n      this.material.uniforms.pointTexture.value.dispose()\n    }\n  }\n}\n","/**\n * Player Component for Ocean Adventure\n *\n * Enhanced player controller with physics integration,\n * underwater movement mechanics, and collision handling.\n */\n\nimport * as THREE from 'three'\n\nexport class Player {\n  constructor(scene, physicsEngine) {\n    this.scene = scene\n    this.physicsEngine = physicsEngine\n\n    // Player properties\n    this.moveSpeed = 8.0\n    this.rotationSpeed = 3.0\n    this.maxVelocity = 5.0\n\n    // Movement state\n    this.movementVector = new THREE.Vector3()\n    this.isMoving = false\n\n    // Create player mesh and physics body\n    this.createPlayerMesh()\n    this.createPhysicsBody()\n\n    // Bind collision handler\n    this.physicsBody.onCollision = collisions =>\n      this.handleCollisions(collisions)\n  }\n\n  /**\n   * Create the visual representation of the player\n   */\n  createPlayerMesh() {\n    // Create player geometry (capsule for better collision detection)\n    const geometry = new THREE.CapsuleGeometry(0.5, 1.5, 4, 8)\n    const material = new THREE.MeshLambertMaterial({\n      color: 0x00ff88,\n      transparent: true,\n      opacity: 0.9,\n    })\n\n    this.mesh = new THREE.Mesh(geometry, material)\n    this.mesh.castShadow = true\n    this.mesh.receiveShadow = true\n\n    // Add to scene\n    this.scene.add(this.mesh)\n  }\n\n  /**\n   * Create physics body for collision detection and movement\n   */\n  createPhysicsBody() {\n    this.physicsBody = this.physicsEngine.createSphereBody(\n      this.mesh.position,\n      0.7, // Slightly larger radius for collision detection\n      false // Not static - player can move\n    )\n\n    // Add physics body to engine\n    this.physicsEngine.addRigidBody(this.physicsBody)\n  }\n\n  /**\n   * Handle input and update movement vector\n   * @param {Object} inputState - Current input state\n   */\n  handleInput(inputState) {\n    // Reset movement vector\n    this.movementVector.set(0, 0, 0)\n    this.isMoving = false\n\n    // Keyboard input\n    if (inputState.keys) {\n      if (inputState.keys.forward) {\n        this.movementVector.z -= 1\n        this.isMoving = true\n      }\n      if (inputState.keys.backward) {\n        this.movementVector.z += 1\n        this.isMoving = true\n      }\n      if (inputState.keys.left) {\n        this.movementVector.x -= 1\n        this.isMoving = true\n      }\n      if (inputState.keys.right) {\n        this.movementVector.x += 1\n        this.isMoving = true\n      }\n      if (inputState.keys.up) {\n        this.movementVector.y += 1\n        this.isMoving = true\n      }\n      if (inputState.keys.down) {\n        this.movementVector.y -= 1\n        this.isMoving = true\n      }\n    }\n\n    // Touch/mobile input\n    if (inputState.joystick) {\n      this.movementVector.x += inputState.joystick.x\n      this.movementVector.z += inputState.joystick.y\n      if (\n        Math.abs(inputState.joystick.x) > 0.1 ||\n        Math.abs(inputState.joystick.y) > 0.1\n      ) {\n        this.isMoving = true\n      }\n    }\n\n    // Mobile buttons\n    if (inputState.mobileButtons) {\n      if (inputState.mobileButtons.swimUp) {\n        this.movementVector.y += 1\n        this.isMoving = true\n      }\n      if (inputState.mobileButtons.swimDown) {\n        this.movementVector.y -= 1\n        this.isMoving = true\n      }\n    }\n\n    // Normalize movement vector to prevent faster diagonal movement\n    if (this.movementVector.length() > 1) {\n      this.movementVector.normalize()\n    }\n\n    // Apply movement to physics body\n    this.applyMovement()\n  }\n\n  /**\n   * Apply movement forces to the physics body\n   */\n  applyMovement() {\n    if (!this.isMoving) {\n      // Apply stronger drag when not actively moving\n      this.physicsBody.velocity.multiplyScalar(0.9)\n      return\n    }\n\n    // Calculate movement force\n    const force = this.movementVector\n      .clone()\n      .multiplyScalar(this.moveSpeed * 0.016) // Assume ~60fps for consistent feel\n\n    // Add force to velocity\n    this.physicsBody.velocity.add(force)\n\n    // Clamp velocity to max speed\n    if (this.physicsBody.velocity.length() > this.maxVelocity) {\n      this.physicsBody.velocity.normalize().multiplyScalar(this.maxVelocity)\n    }\n\n    // Rotate player to face movement direction (optional visual enhancement)\n    if (this.movementVector.length() > 0.1) {\n      const targetRotation = Math.atan2(\n        this.movementVector.x,\n        this.movementVector.z\n      )\n      this.mesh.rotation.y = THREE.MathUtils.lerp(\n        this.mesh.rotation.y,\n        targetRotation,\n        this.rotationSpeed * 0.016\n      )\n    }\n  }\n\n  /**\n   * Update player state\n   */\n  update() {\n    // Sync mesh position with physics body\n    this.mesh.position.copy(this.physicsBody.position)\n\n    // Add gentle floating animation\n    const time = Date.now() * 0.001\n    this.mesh.position.y += Math.sin(time * 2) * 0.02\n\n    // Update physics body position to match (for the floating effect)\n    this.physicsBody.position.copy(this.mesh.position)\n  }\n\n  /**\n   * Handle collisions with other objects\n   * @param {Array} collisions - Array of objects the player collided with\n   */\n  handleCollisions(collisions) {\n    for (const collision of collisions) {\n      // Handle different types of collisions\n      if (collision.type === 'collectible') {\n        this.handleCollectibleCollision(collision)\n      } else if (collision.type === 'obstacle') {\n        this.handleObstacleCollision(collision)\n      } else if (collision.type === 'environment') {\n        this.handleEnvironmentCollision(collision)\n      }\n    }\n  }\n\n  /**\n   * Handle collision with collectible items\n   * @param {Object} collectible - Collectible object\n   */\n  handleCollectibleCollision(collectible) {\n    // Collectibles will be handled by the game manager\n    // This is just for reference and future expansion\n    console.log('Player collected item:', collectible)\n  }\n\n  /**\n   * Handle collision with obstacles\n   * @param {Object} obstacle - Obstacle object\n   */\n  handleObstacleCollision(obstacle) {\n    // Bounce back slightly from obstacles\n    const direction = this.physicsBody.position\n      .clone()\n      .sub(obstacle.position)\n      .normalize()\n\n    this.physicsBody.velocity.add(direction.multiplyScalar(2))\n  }\n\n  /**\n   * Handle collision with environment objects\n   * @param {Object} _envObject - Environment object (unused for now)\n   */\n  handleEnvironmentCollision() {\n    // Environment collisions are handled by physics engine\n    // This can be used for special effects or sounds\n  }\n\n  /**\n   * Get current player position\n   * @returns {THREE.Vector3} Current position\n   */\n  getPosition() {\n    return this.mesh.position.clone()\n  }\n\n  /**\n   * Set player position\n   * @param {THREE.Vector3} position - New position\n   */\n  setPosition(position) {\n    this.mesh.position.copy(position)\n    this.physicsBody.position.copy(position)\n  }\n\n  /**\n   * Get current velocity\n   * @returns {THREE.Vector3} Current velocity\n   */\n  getVelocity() {\n    return this.physicsBody.velocity.clone()\n  }\n\n  /**\n   * Check if player is moving\n   * @returns {boolean} Whether player is currently moving\n   */\n  getIsMoving() {\n    return this.isMoving || this.physicsBody.velocity.length() > 0.1\n  }\n\n  /**\n   * Dispose of player resources\n   */\n  dispose() {\n    // Remove from physics engine\n    this.physicsEngine.removeRigidBody(this.physicsBody)\n\n    // Remove mesh from scene\n    this.scene.remove(this.mesh)\n\n    // Dispose geometry and material\n    this.mesh.geometry.dispose()\n    this.mesh.material.dispose()\n  }\n}\n","/**\n * Ocean Adventure - Main Game Entry Point\n *\n * This is a placeholder implementation showing the basic structure\n * for the 3D underwater platform game. The actual game engine\n * implementation will be developed following the Copilot plan.\n */\n\nimport * as THREE from 'three'\nimport { PhysicsEngine } from './core/Physics.js'\nimport { ParticleSystem } from './core/ParticleSystem.js'\nimport { Player } from './components/Player.js'\n\n// Game configuration\nconst CONFIG = {\n  targetFPS: 60,\n  mobileFPS: 30,\n  canvasId: 'gameCanvas',\n  loadingId: 'loading',\n  uiId: 'ui',\n}\n\nclass OceanAdventure {\n  constructor() {\n    this.scene = null\n    this.camera = null\n    this.renderer = null\n    this.canvas = null\n    this.isLoaded = false\n    this.isMobile = this.detectMobile()\n\n    // Core systems\n    this.physicsEngine = null\n    this.particleSystem = null\n    this.player = null\n    this.environmentObjects = []\n\n    // Game state\n    this.starCount = 0\n    this.levelNumber = 1\n\n    // Input state\n    this.inputState = {\n      keys: {\n        forward: false,\n        backward: false,\n        left: false,\n        right: false,\n        up: false,\n        down: false,\n      },\n      joystick: { x: 0, y: 0 },\n      mobileButtons: { swimUp: false, swimDown: false },\n    }\n\n    // Timing\n    this.lastTime = 0\n\n    console.log('ð Ocean Adventure - Initializing...')\n  }\n\n  async initialize() {\n    try {\n      this.setupCanvas()\n      this.setupRenderer()\n      this.setupScene()\n      this.setupCamera()\n      this.setupLights()\n\n      // Initialize core systems\n      this.initializePhysics()\n      this.initializeParticleSystem()\n\n      // Create game objects\n      this.createUnderwaterEnvironment()\n      this.createPlayer()\n      this.createSampleStars()\n\n      this.setupEventListeners()\n\n      // Hide loading screen and show UI\n      this.hideLoading()\n      this.showUI()\n\n      // Start game loop\n      this.startGameLoop()\n\n      this.isLoaded = true\n      console.log('ð® Ocean Adventure - Ready to play!')\n    } catch (error) {\n      console.error('â Failed to initialize game:', error)\n    }\n  }\n\n  setupCanvas() {\n    this.canvas = document.getElementById(CONFIG.canvasId)\n    if (!this.canvas) {\n      throw new Error('Game canvas not found')\n    }\n  }\n\n  setupRenderer() {\n    this.renderer = new THREE.WebGLRenderer({\n      canvas: this.canvas,\n      antialias: !this.isMobile, // Disable antialiasing on mobile for performance\n      alpha: false,\n    })\n\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n    this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n    this.renderer.setClearColor(0x001122, 1) // Deep ocean blue\n\n    // Enable shadows for better visual quality\n    this.renderer.shadowMap.enabled = true\n    this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\n  }\n\n  setupScene() {\n    this.scene = new THREE.Scene()\n  }\n\n  /**\n   * Initialize physics engine\n   */\n  initializePhysics() {\n    this.physicsEngine = new PhysicsEngine()\n    console.log('â¡ Physics engine initialized')\n  }\n\n  /**\n   * Initialize particle system\n   */\n  initializeParticleSystem() {\n    this.particleSystem = new ParticleSystem(this.scene, 500) // Reduced for mobile performance\n    console.log('â¨ Particle system initialized')\n  }\n\n  setupCamera() {\n    this.camera = new THREE.PerspectiveCamera(\n      75, // Field of view\n      window.innerWidth / window.innerHeight, // Aspect ratio\n      0.1, // Near clipping plane\n      1000 // Far clipping plane\n    )\n\n    // Position camera behind and above the player\n    this.camera.position.set(0, 5, 10)\n    this.camera.lookAt(0, 0, 0)\n  }\n\n  setupLights() {\n    // Ambient light for underwater ambience\n    const ambientLight = new THREE.AmbientLight(0x404080, 0.4)\n    this.scene.add(ambientLight)\n\n    // Directional light simulating filtered sunlight\n    const directionalLight = new THREE.DirectionalLight(0x87ceeb, 0.8)\n    directionalLight.position.set(0, 50, 0)\n    directionalLight.castShadow = true\n    directionalLight.shadow.mapSize.width = 2048\n    directionalLight.shadow.mapSize.height = 2048\n    this.scene.add(directionalLight)\n  }\n\n  createUnderwaterEnvironment() {\n    // Create ocean floor\n    const floorGeometry = new THREE.PlaneGeometry(100, 100)\n    const floorMaterial = new THREE.MeshLambertMaterial({ color: 0x8b4513 })\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial)\n    floor.rotation.x = -Math.PI / 2\n    floor.position.y = -5\n    floor.receiveShadow = true\n    this.scene.add(floor)\n\n    // Create physics body for floor\n    const floorPhysicsBody = this.physicsEngine.createBoxBody(\n      new THREE.Vector3(0, -5, 0),\n      new THREE.Vector3(100, 0.1, 100),\n      true // Static\n    )\n    floorPhysicsBody.type = 'environment'\n    this.physicsEngine.addRigidBody(floorPhysicsBody)\n\n    // Add coral/rocks with collision detection\n    for (let i = 0; i < 10; i++) {\n      const radius = 0.5 + Math.random() * 1.5\n      const geometry = new THREE.SphereGeometry(radius)\n      const material = new THREE.MeshLambertMaterial({\n        color: new THREE.Color().setHSL(Math.random() * 0.3, 0.7, 0.5),\n      })\n      const coral = new THREE.Mesh(geometry, material)\n\n      const position = new THREE.Vector3(\n        (Math.random() - 0.5) * 80,\n        -4 + Math.random() * 2,\n        (Math.random() - 0.5) * 80\n      )\n      coral.position.copy(position)\n      coral.castShadow = true\n      this.scene.add(coral)\n\n      // Add physics body for collision\n      const coralPhysicsBody = this.physicsEngine.createSphereBody(\n        position,\n        radius * 1.2, // Slightly larger for collision detection\n        true // Static\n      )\n      coralPhysicsBody.type = 'environment'\n      coralPhysicsBody.mesh = coral // Reference to visual representation\n      this.physicsEngine.addRigidBody(coralPhysicsBody)\n      this.environmentObjects.push({\n        mesh: coral,\n        physicsBody: coralPhysicsBody,\n      })\n    }\n  }\n\n  createPlayer() {\n    // Create enhanced player with physics\n    this.player = new Player(this.scene, this.physicsEngine)\n    console.log('ð Player created with physics')\n  }\n\n  createSampleStars() {\n    this.stars = []\n\n    // Create glowing star collectibles with physics\n    for (let i = 0; i < 5; i++) {\n      const starGeometry = new THREE.SphereGeometry(0.3)\n      const starMaterial = new THREE.MeshLambertMaterial({\n        color: 0xffd700,\n        emissive: 0xffd700,\n        emissiveIntensity: 0.3,\n      })\n\n      const star = new THREE.Mesh(starGeometry, starMaterial)\n      const position = new THREE.Vector3(\n        (Math.random() - 0.5) * 20,\n        Math.random() * 8 - 2,\n        (Math.random() - 0.5) * 20\n      )\n      star.position.copy(position)\n\n      // Add physics body for collision detection\n      const starPhysicsBody = this.physicsEngine.createSphereBody(\n        position,\n        0.5, // Slightly larger for easier collection\n        true // Static - stars don't move\n      )\n      starPhysicsBody.type = 'collectible'\n      starPhysicsBody.mesh = star\n      starPhysicsBody.collected = false\n      this.physicsEngine.addRigidBody(starPhysicsBody)\n\n      // Add simple rotation animation\n      star.userData = {\n        rotationSpeed: 0.02 + Math.random() * 0.02,\n        physicsBody: starPhysicsBody,\n      }\n\n      this.stars.push({ mesh: star, physicsBody: starPhysicsBody })\n      this.scene.add(star)\n    }\n  }\n\n  setupEventListeners() {\n    // Handle window resize\n    window.addEventListener('resize', () => this.onWindowResize())\n\n    // Enhanced input handling\n    window.addEventListener('keydown', event => this.onKeyDown(event))\n    window.addEventListener('keyup', event => this.onKeyUp(event))\n\n    // Touch controls for mobile\n    if (this.isMobile) {\n      this.setupTouchControls()\n    }\n  }\n\n  onKeyDown(event) {\n    switch (event.code) {\n      case 'ArrowUp':\n      case 'KeyW':\n        this.inputState.keys.forward = true\n        break\n      case 'ArrowDown':\n      case 'KeyS':\n        this.inputState.keys.backward = true\n        break\n      case 'ArrowLeft':\n      case 'KeyA':\n        this.inputState.keys.left = true\n        break\n      case 'ArrowRight':\n      case 'KeyD':\n        this.inputState.keys.right = true\n        break\n      case 'Space':\n        this.inputState.keys.up = true\n        event.preventDefault()\n        break\n      case 'ShiftLeft':\n        this.inputState.keys.down = true\n        break\n    }\n  }\n\n  onKeyUp(event) {\n    switch (event.code) {\n      case 'ArrowUp':\n      case 'KeyW':\n        this.inputState.keys.forward = false\n        break\n      case 'ArrowDown':\n      case 'KeyS':\n        this.inputState.keys.backward = false\n        break\n      case 'ArrowLeft':\n      case 'KeyA':\n        this.inputState.keys.left = false\n        break\n      case 'ArrowRight':\n      case 'KeyD':\n        this.inputState.keys.right = false\n        break\n      case 'Space':\n        this.inputState.keys.up = false\n        break\n      case 'ShiftLeft':\n        this.inputState.keys.down = false\n        break\n    }\n  }\n\n  setupTouchControls() {\n    // Setup virtual joystick\n    this.setupVirtualJoystick()\n\n    // Setup mobile action buttons\n    this.setupMobileButtons()\n\n    // Touch control state for general canvas interactions\n    this.touchState = {\n      startX: 0,\n      startY: 0,\n      currentX: 0,\n      currentY: 0,\n      isActive: false,\n    }\n\n    // General canvas touch events (for swipe gestures)\n    this.canvas.addEventListener('touchstart', event => {\n      event.preventDefault()\n      if (event.touches.length > 0) {\n        const touch = event.touches[0]\n        this.touchState.startX = touch.clientX\n        this.touchState.startY = touch.clientY\n        this.touchState.currentX = touch.clientX\n        this.touchState.currentY = touch.clientY\n        this.touchState.isActive = true\n      }\n    })\n\n    this.canvas.addEventListener('touchmove', event => {\n      event.preventDefault()\n      if (event.touches.length > 0 && this.touchState.isActive) {\n        const touch = event.touches[0]\n        this.touchState.currentX = touch.clientX\n        this.touchState.currentY = touch.clientY\n\n        // Calculate movement delta for swipe gestures\n        const deltaX = this.touchState.currentX - this.touchState.startX\n        const deltaY = this.touchState.currentY - this.touchState.startY\n\n        // Apply gentle swipe-based movement (subtle effect)\n        const moveSpeed = 0.05\n        const sensitivity = 3\n\n        if (Math.abs(deltaX) > 20) {\n          this.player.position.x += (deltaX / sensitivity) * moveSpeed * 0.01\n        }\n\n        if (Math.abs(deltaY) > 20) {\n          this.player.position.z += (deltaY / sensitivity) * moveSpeed * 0.01\n        }\n\n        this.updateCamera()\n      }\n    })\n\n    this.canvas.addEventListener('touchend', event => {\n      event.preventDefault()\n      this.touchState.isActive = false\n    })\n\n    this.canvas.addEventListener('touchcancel', event => {\n      event.preventDefault()\n      this.touchState.isActive = false\n    })\n  }\n\n  setupVirtualJoystick() {\n    const joystick = document.getElementById('virtualJoystick')\n    const knob = document.getElementById('joystickKnob')\n\n    if (!joystick || !knob) {\n      return\n    }\n\n    const joystickState = {\n      isActive: false,\n      centerX: 0,\n      centerY: 0,\n      currentX: 0,\n      currentY: 0,\n    }\n\n    joystick.addEventListener('touchstart', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.touches.length > 0) {\n        const touch = event.touches[0]\n        const rect = joystick.getBoundingClientRect()\n\n        joystickState.isActive = true\n        joystickState.centerX = rect.left + rect.width / 2\n        joystickState.centerY = rect.top + rect.height / 2\n        joystickState.currentX = touch.clientX\n        joystickState.currentY = touch.clientY\n\n        this.updateJoystickKnob(knob, joystickState, rect)\n      }\n    })\n\n    joystick.addEventListener('touchmove', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.touches.length > 0 && joystickState.isActive) {\n        const touch = event.touches[0]\n        const rect = joystick.getBoundingClientRect()\n\n        joystickState.currentX = touch.clientX\n        joystickState.currentY = touch.clientY\n\n        // Calculate movement vector\n        const deltaX = joystickState.currentX - joystickState.centerX\n        const deltaY = joystickState.currentY - joystickState.centerY\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n        const maxDistance = rect.width / 2 - 20\n\n        // Normalize and apply movement\n        if (distance > 5) {\n          const normalizedX = deltaX / maxDistance\n          const normalizedY = deltaY / maxDistance\n\n          // Update input state instead of directly moving player\n          this.inputState.joystick.x = normalizedX * 0.8 // Scale down for smoother control\n          this.inputState.joystick.y = normalizedY * 0.8\n        } else {\n          this.inputState.joystick.x = 0\n          this.inputState.joystick.y = 0\n        }\n\n        this.updateJoystickKnob(knob, joystickState, rect)\n      }\n    })\n\n    joystick.addEventListener('touchend', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      joystickState.isActive = false\n      this.inputState.joystick.x = 0\n      this.inputState.joystick.y = 0\n      knob.style.transform = 'translate(-50%, -50%)'\n    })\n\n    joystick.addEventListener('touchcancel', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      joystickState.isActive = false\n      this.inputState.joystick.x = 0\n      this.inputState.joystick.y = 0\n      knob.style.transform = 'translate(-50%, -50%)'\n    })\n  }\n\n  updateJoystickKnob(knob, joystickState, rect) {\n    const deltaX = joystickState.currentX - joystickState.centerX\n    const deltaY = joystickState.currentY - joystickState.centerY\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n    const maxDistance = rect.width / 2 - 20\n\n    if (distance <= maxDistance) {\n      knob.style.transform = `translate(calc(-50% + ${deltaX}px), calc(-50% + ${deltaY}px))`\n    } else {\n      const angle = Math.atan2(deltaY, deltaX)\n      const x = Math.cos(angle) * maxDistance\n      const y = Math.sin(angle) * maxDistance\n      knob.style.transform = `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`\n    }\n  }\n\n  setupMobileButtons() {\n    const swimUpBtn = document.getElementById('swimUpBtn')\n    const swimDownBtn = document.getElementById('swimDownBtn')\n\n    if (swimUpBtn) {\n      swimUpBtn.addEventListener('touchstart', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimUp = true\n      })\n\n      swimUpBtn.addEventListener('touchend', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimUp = false\n      })\n    }\n\n    if (swimDownBtn) {\n      swimDownBtn.addEventListener('touchstart', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimDown = true\n      })\n\n      swimDownBtn.addEventListener('touchend', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimDown = false\n      })\n    }\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  updateCamera() {\n    // Enhanced camera follow logic\n    const playerPosition = this.player.getPosition()\n    const offset = new THREE.Vector3(0, 5, 10)\n    const targetPosition = playerPosition.clone().add(offset)\n\n    this.camera.position.lerp(targetPosition, 0.1)\n    this.camera.lookAt(playerPosition)\n  }\n\n  startGameLoop() {\n    const animate = currentTime => {\n      requestAnimationFrame(animate)\n\n      // Calculate delta time\n      const deltaTime =\n        this.lastTime > 0 ? (currentTime - this.lastTime) / 1000 : 0.016\n      this.lastTime = currentTime\n\n      this.update(deltaTime)\n      this.render()\n    }\n    animate(0)\n  }\n\n  update(deltaTime) {\n    if (!this.isLoaded) {\n      return\n    }\n\n    // Clamp delta time to prevent large jumps\n    deltaTime = Math.min(deltaTime, 0.033) // Max 30fps equivalent\n\n    // Update physics engine\n    this.physicsEngine.update(deltaTime)\n\n    // Update player with input\n    this.player.handleInput(this.inputState)\n    this.player.update()\n\n    // Update particle system\n    this.particleSystem.update(deltaTime)\n\n    // Update camera\n    this.updateCamera()\n\n    // Animate stars\n    this.stars.forEach(starData => {\n      const star = starData.mesh\n      star.rotation.y += star.userData.rotationSpeed\n      star.rotation.x += star.userData.rotationSpeed * 0.5\n    })\n\n    // Check star collection using collision detection\n    this.checkStarCollection()\n  }\n\n  checkStarCollection() {\n    // Get player collisions from physics engine\n    const playerCollisions = this.physicsEngine.collisionSystem.checkCollisions(\n      this.player.physicsBody\n    )\n\n    for (const collision of playerCollisions) {\n      if (collision.type === 'collectible' && !collision.collected) {\n        // Collect star\n        collision.collected = true\n\n        // Find and remove the star from scene and physics\n        const starData = this.stars.find(s => s.physicsBody === collision)\n        if (starData) {\n          // Remove from scene\n          this.scene.remove(starData.mesh)\n\n          // Remove from physics\n          this.physicsEngine.removeRigidBody(starData.physicsBody)\n\n          // Remove from stars array\n          const index = this.stars.indexOf(starData)\n          if (index !== -1) {\n            this.stars.splice(index, 1)\n          }\n\n          // Update game state\n          this.starCount++\n          this.updateUI()\n\n          // Create collection effect\n          this.particleSystem.createBurst(starData.mesh.position, {\n            count: 15,\n            life: 1.5,\n            velocity: new THREE.Vector3(0, 2, 0),\n            velocityVariation: new THREE.Vector3(3, 3, 3),\n            color: new THREE.Color(0xffd700),\n            size: { min: 3, max: 8 },\n          })\n\n          console.log(`â­ Star collected! Total: ${this.starCount}`)\n\n          // Check if level is complete\n          if (this.stars.length === 0) {\n            this.levelComplete()\n          }\n        }\n      }\n    }\n  }\n\n  levelComplete() {\n    console.log('ð Level Complete!')\n    this.levelNumber++\n    // Reset level with new stars\n    this.createSampleStars()\n    this.updateUI()\n  }\n\n  updateUI() {\n    document.getElementById('starCount').textContent = this.starCount\n    document.getElementById('levelNumber').textContent = this.levelNumber\n  }\n\n  render() {\n    if (this.renderer && this.scene && this.camera) {\n      this.renderer.render(this.scene, this.camera)\n    }\n  }\n\n  hideLoading() {\n    const loadingElement = document.getElementById(CONFIG.loadingId)\n    if (loadingElement) {\n      loadingElement.classList.add('hidden')\n    }\n  }\n\n  showUI() {\n    const uiElement = document.getElementById(CONFIG.uiId)\n    if (uiElement) {\n      uiElement.classList.remove('hidden')\n    }\n    this.updateUI()\n  }\n\n  detectMobile() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    )\n  }\n}\n\n// Initialize the game when the page loads\nwindow.addEventListener('DOMContentLoaded', async () => {\n  const game = new OceanAdventure()\n  await game.initialize()\n})\n\n// Handle WebGL context loss\nwindow.addEventListener('webglcontextlost', event => {\n  event.preventDefault()\n  console.warn('WebGL context lost')\n})\n\nwindow.addEventListener('webglcontextrestored', () => {\n  console.log('WebGL context restored')\n  // Reinitialize game here if needed\n})\n"],"names":["CollisionSystem","collider","isStatic","index","objectA","objectB","sphereA","sphereB","distance","radiusSum","boxA","boxB","minA","maxA","minB","maxB","sphere","box","boxMin","boxMax","closestPoint","THREE.Vector3","object","collisions","UnderwaterPhysics","body","deltaTime","buoyancy","currentStrength","currentForce","PhysicsEngine","previousPosition","gravityForce","velocityDelta","collisionPairs","i","bodyA","bodyB","position","radius","size","Particle","velocity","life","color","ParticleSystem","scene","maxParticles","particle","THREE.Color","THREE.BufferGeometry","THREE.BufferAttribute","THREE.ShaderMaterial","THREE.AdditiveBlending","THREE.Points","canvas","context","gradient","texture","THREE.Texture","emitterConfig","emitter","p","config","count","velocityVariation","burstVelocity","particleSize","emissionInterval","activeCount","index3","type","active","e","Player","physicsEngine","geometry","THREE.CapsuleGeometry","material","THREE.MeshLambertMaterial","THREE.Mesh","inputState","force","targetRotation","THREE.MathUtils","time","collision","collectible","obstacle","direction","CONFIG","OceanAdventure","error","THREE.WebGLRenderer","THREE.PCFSoftShadowMap","THREE.Scene","THREE.PerspectiveCamera","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","floorGeometry","THREE.PlaneGeometry","floorMaterial","floor","floorPhysicsBody","THREE.SphereGeometry","coral","coralPhysicsBody","starGeometry","starMaterial","star","starPhysicsBody","event","touch","deltaX","deltaY","moveSpeed","sensitivity","joystick","knob","joystickState","rect","maxDistance","normalizedX","normalizedY","angle","x","y","swimUpBtn","swimDownBtn","playerPosition","offset","targetPosition","animate","currentTime","starData","playerCollisions","loadingElement","uiElement"],"mappings":"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"}