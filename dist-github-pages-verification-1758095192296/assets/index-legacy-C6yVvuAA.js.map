{"version":3,"file":"index-legacy-C6yVvuAA.js","sources":["../../src/core/Physics.js","../../src/core/ParticleSystem.js","../../src/core/AudioEngine.js","../../src/components/Player.js","../../src/components/Gate.js","../../src/components/StarGeometry.js","../../src/main.js"],"sourcesContent":["/**\n * Physics Engine for Ocean Adventure\n *\n * Implements collision detection and underwater physics simulation\n * including buoyancy, drag, and environmental forces.\n */\n\nimport * as THREE from 'three'\n\n/**\n * Collision system supporting AABB and sphere-based collision detection\n */\nexport class CollisionSystem {\n  constructor() {\n    this.colliders = []\n    this.staticColliders = []\n  }\n\n  /**\n   * Add a collider to the system\n   * @param {Object} collider - Collider object with geometry and position\n   * @param {boolean} isStatic - Whether the collider is static (doesn't move)\n   */\n  addCollider(collider, isStatic = false) {\n    const list = isStatic ? this.staticColliders : this.colliders\n    list.push(collider)\n  }\n\n  /**\n   * Remove a collider from the system\n   * @param {Object} collider - Collider to remove\n   */\n  removeCollider(collider) {\n    let index = this.colliders.indexOf(collider)\n    if (index !== -1) {\n      this.colliders.splice(index, 1)\n      return\n    }\n\n    index = this.staticColliders.indexOf(collider)\n    if (index !== -1) {\n      this.staticColliders.splice(index, 1)\n    }\n  }\n\n  /**\n   * Check for collisions between two objects\n   * @param {Object} objectA - First object with position and geometry\n   * @param {Object} objectB - Second object with position and geometry\n   * @returns {boolean} Whether objects are colliding\n   */\n  checkCollision(objectA, objectB) {\n    // Sphere-sphere collision detection\n    if (\n      objectA.collisionType === 'sphere' &&\n      objectB.collisionType === 'sphere'\n    ) {\n      return this.checkSphereCollision(objectA, objectB)\n    }\n\n    // AABB-AABB collision detection\n    if (objectA.collisionType === 'box' && objectB.collisionType === 'box') {\n      return this.checkAABBCollision(objectA, objectB)\n    }\n\n    // Sphere-AABB collision detection\n    if (\n      (objectA.collisionType === 'sphere' && objectB.collisionType === 'box') ||\n      (objectA.collisionType === 'box' && objectB.collisionType === 'sphere')\n    ) {\n      return this.checkSphereAABBCollision(objectA, objectB)\n    }\n\n    return false\n  }\n\n  /**\n   * Check sphere-sphere collision\n   * @param {Object} sphereA - First sphere\n   * @param {Object} sphereB - Second sphere\n   * @returns {boolean} Whether spheres are colliding\n   */\n  checkSphereCollision(sphereA, sphereB) {\n    const distance = sphereA.position.distanceTo(sphereB.position)\n    const radiusSum = sphereA.radius + sphereB.radius\n    return distance <= radiusSum\n  }\n\n  /**\n   * Check AABB-AABB collision\n   * @param {Object} boxA - First box\n   * @param {Object} boxB - Second box\n   * @returns {boolean} Whether boxes are colliding\n   */\n  checkAABBCollision(boxA, boxB) {\n    const minA = boxA.position\n      .clone()\n      .sub(boxA.size.clone().multiplyScalar(0.5))\n    const maxA = boxA.position\n      .clone()\n      .add(boxA.size.clone().multiplyScalar(0.5))\n    const minB = boxB.position\n      .clone()\n      .sub(boxB.size.clone().multiplyScalar(0.5))\n    const maxB = boxB.position\n      .clone()\n      .add(boxB.size.clone().multiplyScalar(0.5))\n\n    return (\n      minA.x <= maxB.x &&\n      maxA.x >= minB.x &&\n      minA.y <= maxB.y &&\n      maxA.y >= minB.y &&\n      minA.z <= maxB.z &&\n      maxA.z >= minB.z\n    )\n  }\n\n  /**\n   * Check sphere-AABB collision\n   * @param {Object} objectA - First object (sphere or box)\n   * @param {Object} objectB - Second object (sphere or box)\n   * @returns {boolean} Whether objects are colliding\n   */\n  checkSphereAABBCollision(objectA, objectB) {\n    const sphere = objectA.collisionType === 'sphere' ? objectA : objectB\n    const box = objectA.collisionType === 'box' ? objectA : objectB\n\n    const boxMin = box.position\n      .clone()\n      .sub(box.size.clone().multiplyScalar(0.5))\n    const boxMax = box.position\n      .clone()\n      .add(box.size.clone().multiplyScalar(0.5))\n\n    // Find closest point on box to sphere center\n    const closestPoint = new THREE.Vector3(\n      Math.max(boxMin.x, Math.min(sphere.position.x, boxMax.x)),\n      Math.max(boxMin.y, Math.min(sphere.position.y, boxMax.y)),\n      Math.max(boxMin.z, Math.min(sphere.position.z, boxMax.z))\n    )\n\n    const distance = sphere.position.distanceTo(closestPoint)\n    return distance <= sphere.radius\n  }\n\n  /**\n   * Check all collisions for a given object\n   * @param {Object} object - Object to check collisions for\n   * @returns {Array} Array of colliding objects\n   */\n  checkCollisions(object) {\n    const collisions = []\n\n    // Check against dynamic colliders\n    for (const collider of this.colliders) {\n      if (collider !== object && this.checkCollision(object, collider)) {\n        collisions.push(collider)\n      }\n    }\n\n    // Check against static colliders\n    for (const collider of this.staticColliders) {\n      if (this.checkCollision(object, collider)) {\n        collisions.push(collider)\n      }\n    }\n\n    return collisions\n  }\n}\n\n/**\n * Underwater physics simulation\n */\nexport class UnderwaterPhysics {\n  constructor() {\n    this.buoyancyForce = 2.0 // Further reduced buoyancy force (was 4.0)\n    this.dragCoefficient = 0.95 // Water resistance (0-1, lower = more drag)\n    this.currentDirection = new THREE.Vector3(0.1, 0, 0.05) // Gentle underwater current\n    this.currentStrength = 0.02\n  }\n\n  /**\n   * Apply buoyancy force to an object\n   * @param {Object} body - Physics body with velocity and position\n   * @param {number} deltaTime - Time since last frame\n   */\n  applyBuoyancy(body, deltaTime) {\n    const buoyancy = new THREE.Vector3(0, this.buoyancyForce * deltaTime, 0)\n    body.velocity.add(buoyancy)\n  }\n\n  /**\n   * Apply drag force to an object\n   * @param {Object} body - Physics body with velocity\n   */\n  applyDrag(body) {\n    body.velocity.multiplyScalar(this.dragCoefficient)\n  }\n\n  /**\n   * Apply underwater current to an object\n   * @param {Object} body - Physics body with velocity\n   * @param {number} currentStrength - Strength multiplier for current effect\n   * @param {number} deltaTime - Time since last frame\n   */\n  applyCurrent(body, currentStrength = 1.0, deltaTime) {\n    const currentForce = this.currentDirection\n      .clone()\n      .multiplyScalar(this.currentStrength * currentStrength * deltaTime)\n    body.velocity.add(currentForce)\n  }\n\n  /**\n   * Apply all underwater physics effects\n   * @param {Object} body - Physics body\n   * @param {number} deltaTime - Time since last frame\n   */\n  applyUnderwaterEffects(body, deltaTime) {\n    this.applyBuoyancy(body, deltaTime)\n    this.applyDrag(body)\n    this.applyCurrent(body, 1.0, deltaTime)\n  }\n}\n\n/**\n * Main Physics Engine\n */\nexport class PhysicsEngine {\n  constructor() {\n    this.gravity = new THREE.Vector3(0, -9.8, 0)\n    this.waterDensity = 1000 // kg/mÂ³\n    this.collisionSystem = new CollisionSystem()\n    this.underwaterPhysics = new UnderwaterPhysics()\n    this.rigidBodies = []\n    this.isUnderwater = true // For now, everything is underwater\n  }\n\n  /**\n   * Add a rigid body to the physics simulation\n   * @param {Object} body - Physics body to add\n   */\n  addRigidBody(body) {\n    this.rigidBodies.push(body)\n\n    // Add to collision system if it has collision properties\n    if (body.collisionType) {\n      this.collisionSystem.addCollider(body, body.isStatic)\n    }\n  }\n\n  /**\n   * Remove a rigid body from the physics simulation\n   * @param {Object} body - Physics body to remove\n   */\n  removeRigidBody(body) {\n    const index = this.rigidBodies.indexOf(body)\n    if (index !== -1) {\n      this.rigidBodies.splice(index, 1)\n      this.collisionSystem.removeCollider(body)\n    }\n  }\n\n  /**\n   * Update all physics bodies\n   * @param {number} deltaTime - Time since last frame\n   */\n  update(deltaTime) {\n    for (const body of this.rigidBodies) {\n      this.updateBody(body, deltaTime)\n    }\n  }\n\n  /**\n   * Update a single physics body\n   * @param {Object} body - Physics body to update\n   * @param {number} deltaTime - Time since last frame\n   */\n  updateBody(body, deltaTime) {\n    if (body.isStatic) {\n      return\n    }\n\n    // Initialize velocity if not present\n    if (!body.velocity) {\n      body.velocity = new THREE.Vector3()\n    }\n\n    // Store previous position for collision resolution\n    const previousPosition = body.position.clone()\n\n    // Apply forces based on environment\n    if (this.isUnderwater) {\n      this.underwaterPhysics.applyUnderwaterEffects(body, deltaTime)\n    } else {\n      // Apply gravity in air\n      const gravityForce = this.gravity.clone().multiplyScalar(deltaTime)\n      body.velocity.add(gravityForce)\n    }\n\n    // Apply velocity to position\n    const velocityDelta = body.velocity.clone().multiplyScalar(deltaTime)\n    body.position.add(velocityDelta)\n\n    // Check collisions and resolve\n    const collisions = this.collisionSystem.checkCollisions(body)\n    if (collisions.length > 0) {\n      this.resolveCollisions(body, collisions, previousPosition)\n    }\n  }\n\n  /**\n   * Resolve collisions for a body\n   * @param {Object} body - Physics body that collided\n   * @param {Array} collisions - Array of colliding objects\n   * @param {THREE.Vector3} previousPosition - Position before collision\n   */\n  resolveCollisions(body, collisions, previousPosition) {\n    // Check if any collisions are with collectibles or gates that should not block movement\n    const blockingCollisions = collisions.filter(\n      collision =>\n        (collision.type !== 'collectible' || collision.collected) &&\n        collision.type !== 'gate'\n    )\n\n    // Only revert position and stop movement for blocking collisions\n    if (blockingCollisions.length > 0) {\n      // Simple collision resolution: revert to previous position and stop movement\n      body.position.copy(previousPosition)\n\n      // Reduce velocity on collision (bounce/friction)\n      body.velocity.multiplyScalar(0.3)\n    }\n\n    // Notify collision callbacks if present (for all collisions)\n    if (body.onCollision) {\n      body.onCollision(collisions)\n    }\n  }\n\n  /**\n   * Check collisions for all bodies\n   * @returns {Array} Array of collision pairs\n   */\n  checkCollisions() {\n    const collisionPairs = []\n\n    for (let i = 0; i < this.rigidBodies.length; i++) {\n      const bodyA = this.rigidBodies[i]\n      const collisions = this.collisionSystem.checkCollisions(bodyA)\n\n      for (const bodyB of collisions) {\n        collisionPairs.push([bodyA, bodyB])\n      }\n    }\n\n    return collisionPairs\n  }\n\n  /**\n   * Create a sphere collision body\n   * @param {THREE.Vector3} position - Position of the sphere\n   * @param {number} radius - Radius of the sphere\n   * @param {boolean} isStatic - Whether the body is static\n   * @returns {Object} Collision body\n   */\n  createSphereBody(position, radius, isStatic = false) {\n    return {\n      position: position.clone(),\n      velocity: new THREE.Vector3(),\n      collisionType: 'sphere',\n      radius: radius,\n      isStatic: isStatic,\n    }\n  }\n\n  /**\n   * Create a box collision body\n   * @param {THREE.Vector3} position - Position of the box\n   * @param {THREE.Vector3} size - Size of the box\n   * @param {boolean} isStatic - Whether the body is static\n   * @returns {Object} Collision body\n   */\n  createBoxBody(position, size, isStatic = false) {\n    return {\n      position: position.clone(),\n      velocity: new THREE.Vector3(),\n      collisionType: 'box',\n      size: size.clone(),\n      isStatic: isStatic,\n    }\n  }\n}\n","/**\n * Particle System for Ocean Adventure\n *\n * Creates underwater atmosphere with bubbles, light rays,\n * and collection effects for enhanced immersion.\n */\n\nimport * as THREE from 'three'\n\n/**\n * Individual particle class\n */\nclass Particle {\n  constructor(position, velocity, life, size, color) {\n    this.position = position.clone()\n    this.velocity = velocity.clone()\n    this.life = life\n    this.maxLife = life\n    this.size = size\n    this.color = color.clone()\n    this.alpha = 1.0\n    this.active = true\n  }\n\n  /**\n   * Update particle state\n   * @param {number} deltaTime - Time since last frame\n   */\n  update(deltaTime) {\n    if (!this.active) {\n      return\n    }\n\n    // Update position\n    this.position.add(this.velocity.clone().multiplyScalar(deltaTime))\n\n    // Update life\n    this.life -= deltaTime\n\n    // Update alpha based on life remaining\n    this.alpha = this.life / this.maxLife\n\n    // Deactivate particle if life is over\n    if (this.life <= 0) {\n      this.active = false\n    }\n  }\n\n  /**\n   * Reset particle with new properties\n   * @param {THREE.Vector3} position - New position\n   * @param {THREE.Vector3} velocity - New velocity\n   * @param {number} life - New life span\n   * @param {number} size - New size\n   * @param {THREE.Color} color - New color\n   */\n  reset(position, velocity, life, size, color) {\n    this.position.copy(position)\n    this.velocity.copy(velocity)\n    this.life = life\n    this.maxLife = life\n    this.size = size\n    this.color.copy(color)\n    this.alpha = 1.0\n    this.active = true\n  }\n}\n\n/**\n * Main particle system class\n */\nexport class ParticleSystem {\n  constructor(scene, maxParticles = 1000) {\n    this.scene = scene\n    this.maxParticles = maxParticles\n    this.particles = []\n    this.emitters = []\n\n    // Create particle pool\n    this.initializeParticlePool()\n\n    // Create particle geometry and material\n    this.createParticleRenderSystem()\n\n    // Add default underwater emitters\n    this.createUnderwaterEmitters()\n  }\n\n  /**\n   * Initialize the particle pool for object reuse\n   */\n  initializeParticlePool() {\n    for (let i = 0; i < this.maxParticles; i++) {\n      const particle = new Particle(\n        new THREE.Vector3(),\n        new THREE.Vector3(),\n        1.0,\n        1.0,\n        new THREE.Color(0xffffff)\n      )\n      particle.active = false\n      this.particles.push(particle)\n    }\n  }\n\n  /**\n   * Create the rendering system for particles\n   */\n  createParticleRenderSystem() {\n    // Create geometry for point sprites\n    this.geometry = new THREE.BufferGeometry()\n\n    // Create arrays for particle attributes\n    this.positions = new Float32Array(this.maxParticles * 3)\n    this.colors = new Float32Array(this.maxParticles * 3)\n    this.sizes = new Float32Array(this.maxParticles)\n    this.alphas = new Float32Array(this.maxParticles)\n\n    // Set attributes\n    this.geometry.setAttribute(\n      'position',\n      new THREE.BufferAttribute(this.positions, 3)\n    )\n    this.geometry.setAttribute(\n      'color',\n      new THREE.BufferAttribute(this.colors, 3)\n    )\n    this.geometry.setAttribute('size', new THREE.BufferAttribute(this.sizes, 1))\n    this.geometry.setAttribute(\n      'alpha',\n      new THREE.BufferAttribute(this.alphas, 1)\n    )\n\n    // Create shader material for better underwater effects\n    this.material = new THREE.ShaderMaterial({\n      uniforms: {\n        time: { value: 0.0 },\n        pointTexture: { value: this.createParticleTexture() },\n      },\n      vertexShader: `\n        attribute float size;\n        attribute float alpha;\n        attribute vec3 color;\n        \n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vAlpha = alpha;\n          vColor = color;\n          \n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_PointSize = size * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      `,\n      fragmentShader: `\n        uniform sampler2D pointTexture;\n        \n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vec4 texColor = texture2D(pointTexture, gl_PointCoord);\n          gl_FragColor = vec4(vColor, vAlpha * texColor.a);\n        }\n      `,\n      transparent: true,\n      blending: THREE.AdditiveBlending,\n      depthWrite: false,\n    })\n\n    // Create points object\n    this.points = new THREE.Points(this.geometry, this.material)\n    this.scene.add(this.points)\n  }\n\n  /**\n   * Create texture for particles\n   * @returns {THREE.Texture} Particle texture\n   */\n  createParticleTexture() {\n    const canvas = document.createElement('canvas')\n    canvas.width = 64\n    canvas.height = 64\n\n    const context = canvas.getContext('2d')\n    const gradient = context.createRadialGradient(32, 32, 0, 32, 32, 32)\n    gradient.addColorStop(0, 'rgba(255,255,255,1)')\n    gradient.addColorStop(0.2, 'rgba(255,255,255,0.8)')\n    gradient.addColorStop(0.4, 'rgba(255,255,255,0.4)')\n    gradient.addColorStop(1, 'rgba(255,255,255,0)')\n\n    context.fillStyle = gradient\n    context.fillRect(0, 0, 64, 64)\n\n    const texture = new THREE.Texture(canvas)\n    texture.needsUpdate = true\n    return texture\n  }\n\n  /**\n   * Create underwater particle emitters\n   */\n  createUnderwaterEmitters() {\n    // Bubble emitter\n    this.addEmitter({\n      type: 'bubbles',\n      position: new THREE.Vector3(0, -10, 0),\n      rate: 5, // particles per second\n      life: 8.0,\n      size: { min: 2, max: 6 },\n      velocity: new THREE.Vector3(0, 2, 0),\n      velocityVariation: new THREE.Vector3(0.5, 0.5, 0.5),\n      color: new THREE.Color(0x87ceeb),\n      colorVariation: 0.1,\n      area: new THREE.Vector3(20, 2, 20), // Emission area\n    })\n\n    // Floating particles (debris/plankton)\n    this.addEmitter({\n      type: 'debris',\n      position: new THREE.Vector3(0, 0, 0),\n      rate: 3,\n      life: 15.0,\n      size: { min: 1, max: 3 },\n      velocity: new THREE.Vector3(0.1, 0.05, 0.1),\n      velocityVariation: new THREE.Vector3(0.3, 0.2, 0.3),\n      color: new THREE.Color(0xffffff),\n      colorVariation: 0.2,\n      area: new THREE.Vector3(40, 20, 40),\n    })\n\n    // Light rays effect (very sparse)\n    this.addEmitter({\n      type: 'lightRays',\n      position: new THREE.Vector3(0, 15, 0),\n      rate: 0.5,\n      life: 20.0,\n      size: { min: 8, max: 15 },\n      velocity: new THREE.Vector3(0, -0.5, 0),\n      velocityVariation: new THREE.Vector3(0.1, 0.2, 0.1),\n      color: new THREE.Color(0xffd700),\n      colorVariation: 0.1,\n      area: new THREE.Vector3(30, 5, 30),\n    })\n  }\n\n  /**\n   * Add a particle emitter\n   * @param {Object} emitterConfig - Configuration for the emitter\n   */\n  addEmitter(emitterConfig) {\n    const emitter = {\n      ...emitterConfig,\n      accumulator: 0.0, // For rate control\n      active: true,\n    }\n    this.emitters.push(emitter)\n  }\n\n  /**\n   * Emit a single particle\n   * @param {Object} emitter - Emitter configuration\n   */\n  emitParticle(emitter) {\n    // Find inactive particle\n    const particle = this.particles.find(p => !p.active)\n    if (!particle) {\n      return\n    } // No available particles\n\n    // Calculate random position within emission area\n    const position = emitter.position\n      .clone()\n      .add(\n        new THREE.Vector3(\n          (Math.random() - 0.5) * emitter.area.x,\n          (Math.random() - 0.5) * emitter.area.y,\n          (Math.random() - 0.5) * emitter.area.z\n        )\n      )\n\n    // Calculate random velocity\n    const velocity = emitter.velocity\n      .clone()\n      .add(\n        new THREE.Vector3(\n          (Math.random() - 0.5) * emitter.velocityVariation.x,\n          (Math.random() - 0.5) * emitter.velocityVariation.y,\n          (Math.random() - 0.5) * emitter.velocityVariation.z\n        )\n      )\n\n    // Calculate random size\n    const size =\n      emitter.size.min + Math.random() * (emitter.size.max - emitter.size.min)\n\n    // Calculate random color\n    const color = emitter.color.clone()\n    if (emitter.colorVariation > 0) {\n      color.offsetHSL(\n        (Math.random() - 0.5) * emitter.colorVariation,\n        0,\n        (Math.random() - 0.5) * emitter.colorVariation * 0.5\n      )\n    }\n\n    // Reset particle with new properties\n    particle.reset(position, velocity, emitter.life, size, color)\n  }\n\n  /**\n   * Create a burst of particles at a specific location\n   * @param {THREE.Vector3} position - Position to emit particles\n   * @param {Object} config - Burst configuration\n   */\n  createBurst(position, config = {}) {\n    const count = config.count || 20\n    const life = config.life || 2.0\n    const velocity = config.velocity || new THREE.Vector3(0, 1, 0)\n    const velocityVariation =\n      config.velocityVariation || new THREE.Vector3(2, 2, 2)\n    const color = config.color || new THREE.Color(0xffd700)\n    const size = config.size || { min: 2, max: 8 }\n\n    for (let i = 0; i < count; i++) {\n      const particle = this.particles.find(p => !p.active)\n      if (!particle) {\n        break\n      }\n\n      const burstVelocity = velocity\n        .clone()\n        .add(\n          new THREE.Vector3(\n            (Math.random() - 0.5) * velocityVariation.x,\n            (Math.random() - 0.5) * velocityVariation.y,\n            (Math.random() - 0.5) * velocityVariation.z\n          )\n        )\n\n      const particleSize = size.min + Math.random() * (size.max - size.min)\n\n      particle.reset(position.clone(), burstVelocity, life, particleSize, color)\n    }\n  }\n\n  /**\n   * Update particle system\n   * @param {number} deltaTime - Time since last frame\n   */\n  update(deltaTime) {\n    // Update emitters\n    for (const emitter of this.emitters) {\n      if (!emitter.active) {\n        continue\n      }\n\n      emitter.accumulator += deltaTime\n      const emissionInterval = 1.0 / emitter.rate\n\n      while (emitter.accumulator >= emissionInterval) {\n        this.emitParticle(emitter)\n        emitter.accumulator -= emissionInterval\n      }\n    }\n\n    // Update particles\n    let activeCount = 0\n    for (let i = 0; i < this.particles.length; i++) {\n      const particle = this.particles[i]\n\n      if (particle.active) {\n        particle.update(deltaTime)\n\n        // Update render attributes\n        const index3 = activeCount * 3\n        this.positions[index3] = particle.position.x\n        this.positions[index3 + 1] = particle.position.y\n        this.positions[index3 + 2] = particle.position.z\n\n        this.colors[index3] = particle.color.r\n        this.colors[index3 + 1] = particle.color.g\n        this.colors[index3 + 2] = particle.color.b\n\n        this.sizes[activeCount] = particle.size\n        this.alphas[activeCount] = particle.alpha\n\n        activeCount++\n      }\n    }\n\n    // Update geometry\n    this.geometry.attributes.position.needsUpdate = true\n    this.geometry.attributes.color.needsUpdate = true\n    this.geometry.attributes.size.needsUpdate = true\n    this.geometry.attributes.alpha.needsUpdate = true\n\n    // Update draw range to only render active particles\n    this.geometry.setDrawRange(0, activeCount)\n\n    // Update shader uniforms\n    this.material.uniforms.time.value += deltaTime\n  }\n\n  /**\n   * Set emitter active state\n   * @param {string} type - Emitter type\n   * @param {boolean} active - Whether emitter should be active\n   */\n  setEmitterActive(type, active) {\n    const emitter = this.emitters.find(e => e.type === type)\n    if (emitter) {\n      emitter.active = active\n    }\n  }\n\n  /**\n   * Remove all particles\n   */\n  clear() {\n    for (const particle of this.particles) {\n      particle.active = false\n    }\n  }\n\n  /**\n   * Dispose of particle system resources\n   */\n  dispose() {\n    this.scene.remove(this.points)\n    this.geometry.dispose()\n    this.material.dispose()\n    if (this.material.uniforms.pointTexture.value) {\n      this.material.uniforms.pointTexture.value.dispose()\n    }\n  }\n}\n","/**\n * Audio Engine for Ocean Adventure\n *\n * Handles underwater ambient sounds, sound effects, and 3D spatial audio\n * using Web Audio API for immersive underwater experience.\n */\n\nexport class AudioEngine {\n  constructor() {\n    this.audioContext = null\n    this.listener = null\n    this.sounds = new Map()\n    this.isInitialized = false\n    this.isMuted = false\n    this.masterVolume = 0.5\n\n    // Separate volume controls\n    this.musicVolume = 0.5\n    this.sfxVolume = 0.5\n\n    // Audio settings\n    this.underwaterFilterFrequency = 800 // Low-pass filter for underwater effect\n    this.reverbAmount = 0.3\n\n    // Load saved settings\n    this.loadSettings()\n\n    console.log('ð AudioEngine created')\n  }\n\n  /**\n   * Initialize the audio system\n   * Note: Must be called after user interaction due to browser autoplay policies\n   */\n  async initialize() {\n    try {\n      // Create audio context\n      this.audioContext = new (window.AudioContext ||\n        window.webkitAudioContext)()\n\n      // Create audio listener for 3D spatial audio\n      this.listener = this.audioContext.listener\n\n      // Create master gain node for volume control\n      this.masterGain = this.audioContext.createGain()\n      this.masterGain.gain.setValueAtTime(\n        this.masterVolume,\n        this.audioContext.currentTime\n      )\n      this.masterGain.connect(this.audioContext.destination)\n\n      // Create separate gain nodes for music and sound effects\n      this.musicGain = this.audioContext.createGain()\n      this.sfxGain = this.audioContext.createGain()\n\n      this.musicGain.gain.setValueAtTime(\n        this.musicVolume,\n        this.audioContext.currentTime\n      )\n      this.sfxGain.gain.setValueAtTime(\n        this.sfxVolume,\n        this.audioContext.currentTime\n      )\n\n      this.musicGain.connect(this.masterGain)\n      this.sfxGain.connect(this.masterGain)\n\n      // Create underwater effect chain\n      this.createUnderwaterEffects()\n\n      // Load basic sound effects (using simple oscillators for now - avoiding file dependencies)\n      this.createSoundEffects()\n\n      this.isInitialized = true\n      console.log('â AudioEngine initialized successfully')\n    } catch (error) {\n      console.warn('â ï¸ AudioEngine initialization failed:', error)\n      // Graceful fallback - game continues without audio\n    }\n  }\n\n  /**\n   * Create underwater audio effects (reverb, low-pass filter)\n   */\n  createUnderwaterEffects() {\n    if (!this.audioContext) {\n      return\n    }\n\n    // Low-pass filter for muffled underwater sound\n    this.underwaterFilter = this.audioContext.createBiquadFilter()\n    this.underwaterFilter.type = 'lowpass'\n    this.underwaterFilter.frequency.setValueAtTime(\n      this.underwaterFilterFrequency,\n      this.audioContext.currentTime\n    )\n    this.underwaterFilter.Q.setValueAtTime(1, this.audioContext.currentTime)\n\n    // Connect filter to master gain\n    this.underwaterFilter.connect(this.masterGain)\n\n    console.log('ð Underwater audio effects created')\n  }\n\n  /**\n   * Create enhanced sound effects using oscillators and filters\n   * This avoids external file dependencies while providing rich audio feedback\n   */\n  createSoundEffects() {\n    if (!this.audioContext) {\n      return\n    }\n\n    // Enhanced sound configurations with more complex patterns\n    this.soundConfigs = {\n      starCollect: {\n        type: 'sine',\n        frequency: 880,\n        duration: 0.4,\n        volume: 0.3,\n        envelope: { attack: 0.01, decay: 0.1, sustain: 0.8, release: 0.3 },\n        harmonics: [\n          { frequency: 1320, volume: 0.5 },\n          { frequency: 1760, volume: 0.3 },\n        ],\n      },\n      gateActivate: {\n        type: 'triangle',\n        frequency: 220,\n        duration: 1.5,\n        volume: 0.4,\n        envelope: { attack: 0.2, decay: 0.3, sustain: 0.7, release: 0.5 },\n        modulation: { frequency: 4, depth: 20 },\n      },\n      levelComplete: {\n        type: 'square',\n        frequency: 440,\n        duration: 2.5,\n        volume: 0.5,\n        envelope: { attack: 0.1, decay: 0.2, sustain: 0.8, release: 0.4 },\n        melody: [440, 554.37, 659.25, 880], // A4, C#5, E5, A5\n      },\n      swimming: {\n        type: 'sine',\n        frequency: 200,\n        duration: 0.2,\n        volume: 0.15,\n        envelope: { attack: 0.05, decay: 0.1, sustain: 0.5, release: 0.05 },\n      },\n      underwater: {\n        type: 'sine',\n        frequency: 80,\n        duration: -1, // Continuous\n        volume: 0.12,\n        envelope: { attack: 2.0, decay: 0, sustain: 1.0, release: 2.0 },\n        modulation: { frequency: 0.3, depth: 5 },\n      },\n    }\n\n    console.log('ðµ Enhanced sound effects configured')\n  }\n\n  /**\n   * Play an enhanced sound effect with envelopes and harmonics\n   */\n  playSound(soundName, position = null) {\n    if (!this.isInitialized || this.isMuted || !this.audioContext) {\n      return\n    }\n\n    const config = this.soundConfigs[soundName]\n    if (!config) {\n      console.warn(`Sound \"${soundName}\" not found`)\n      return\n    }\n\n    try {\n      const currentTime = this.audioContext.currentTime\n\n      // Handle melody-based sounds (like levelComplete)\n      if (config.melody) {\n        this.playMelody(config, position)\n        return\n      }\n\n      // Create main oscillator\n      const oscillator = this.audioContext.createOscillator()\n      const gainNode = this.audioContext.createGain()\n\n      // Configure oscillator\n      oscillator.type = config.type\n      oscillator.frequency.setValueAtTime(config.frequency, currentTime)\n\n      // Add frequency modulation if specified\n      if (config.modulation) {\n        const lfo = this.audioContext.createOscillator()\n        const lfoGain = this.audioContext.createGain()\n        lfo.frequency.setValueAtTime(config.modulation.frequency, currentTime)\n        lfoGain.gain.setValueAtTime(config.modulation.depth, currentTime)\n        lfo.connect(lfoGain)\n        lfoGain.connect(oscillator.frequency)\n        lfo.start(currentTime)\n        if (config.duration > 0) {\n          lfo.stop(currentTime + config.duration)\n        }\n      }\n\n      // Configure ADSR envelope\n      const envelope = config.envelope || {\n        attack: 0.01,\n        decay: 0.1,\n        sustain: 0.8,\n        release: 0.2,\n      }\n      const attackTime = currentTime + envelope.attack\n      const decayTime = attackTime + envelope.decay\n      const sustainLevel = config.volume * envelope.sustain\n      const releaseTime =\n        config.duration > 0 ? currentTime + config.duration : currentTime + 1\n\n      gainNode.gain.setValueAtTime(0, currentTime)\n      gainNode.gain.linearRampToValueAtTime(config.volume, attackTime)\n      gainNode.gain.linearRampToValueAtTime(sustainLevel, decayTime)\n      gainNode.gain.setValueAtTime(sustainLevel, releaseTime - envelope.release)\n      gainNode.gain.linearRampToValueAtTime(0, releaseTime)\n\n      // Connect audio chain\n      oscillator.connect(gainNode)\n\n      // Add harmonics for richer sound\n      const harmonicOscillators = []\n      if (config.harmonics) {\n        config.harmonics.forEach(harmonic => {\n          const harmonicOsc = this.audioContext.createOscillator()\n          const harmonicGain = this.audioContext.createGain()\n\n          harmonicOsc.type = config.type\n          harmonicOsc.frequency.setValueAtTime(harmonic.frequency, currentTime)\n          harmonicGain.gain.setValueAtTime(\n            harmonic.volume * config.volume,\n            currentTime\n          )\n          harmonicGain.gain.linearRampToValueAtTime(0, releaseTime)\n\n          harmonicOsc.connect(harmonicGain)\n          harmonicGain.connect(gainNode)\n          harmonicOsc.start(currentTime)\n\n          if (config.duration > 0) {\n            harmonicOsc.stop(releaseTime)\n          }\n          harmonicOscillators.push(harmonicOsc)\n        })\n      }\n\n      // Add 3D positioning if position provided\n      if (position) {\n        const panner = this.audioContext.createPanner()\n        panner.panningModel = 'HRTF'\n        panner.setPosition(position.x, position.y, position.z)\n        gainNode.connect(panner)\n        panner.connect(this.underwaterFilter)\n        this.underwaterFilter.connect(this.sfxGain)\n      } else {\n        gainNode.connect(this.underwaterFilter)\n        this.underwaterFilter.connect(this.sfxGain)\n      }\n\n      // Start and stop the sound\n      oscillator.start(currentTime)\n      if (config.duration > 0) {\n        oscillator.stop(releaseTime)\n      }\n\n      console.log(`ð Playing enhanced sound: ${soundName}`)\n    } catch (error) {\n      console.warn(`Failed to play sound \"${soundName}\":`, error)\n    }\n  }\n\n  /**\n   * Play a melody sequence\n   */\n  playMelody(config, position = null) {\n    const noteDuration = config.duration / config.melody.length\n\n    config.melody.forEach((frequency, index) => {\n      const startTime = this.audioContext.currentTime + index * noteDuration\n\n      const oscillator = this.audioContext.createOscillator()\n      const gainNode = this.audioContext.createGain()\n\n      oscillator.type = config.type\n      oscillator.frequency.setValueAtTime(frequency, startTime)\n\n      gainNode.gain.setValueAtTime(0, startTime)\n      gainNode.gain.linearRampToValueAtTime(config.volume, startTime + 0.05)\n      gainNode.gain.linearRampToValueAtTime(0, startTime + noteDuration - 0.05)\n\n      oscillator.connect(gainNode)\n\n      if (position) {\n        const panner = this.audioContext.createPanner()\n        panner.panningModel = 'HRTF'\n        panner.setPosition(position.x, position.y, position.z)\n        gainNode.connect(panner)\n        panner.connect(this.underwaterFilter)\n        this.underwaterFilter.connect(this.sfxGain)\n      } else {\n        gainNode.connect(this.underwaterFilter)\n        this.underwaterFilter.connect(this.sfxGain)\n      }\n\n      oscillator.start(startTime)\n      oscillator.stop(startTime + noteDuration)\n    })\n  }\n\n  /**\n   * Start enhanced ambient underwater sound with background music\n   */\n  startAmbientSound() {\n    if (!this.isInitialized || this.isMuted) {\n      return\n    }\n\n    // Only start if not already playing\n    if (this.ambientOscillator) {\n      return\n    }\n\n    try {\n      // Create main ambient sound (underwater rumble)\n      this.ambientOscillator = this.audioContext.createOscillator()\n      this.ambientGain = this.audioContext.createGain()\n\n      this.ambientOscillator.type = 'sine'\n      this.ambientOscillator.frequency.setValueAtTime(\n        60,\n        this.audioContext.currentTime\n      )\n\n      // Gentle fade in\n      this.ambientGain.gain.setValueAtTime(0, this.audioContext.currentTime)\n      this.ambientGain.gain.linearRampToValueAtTime(\n        0.08,\n        this.audioContext.currentTime + 3.0\n      )\n\n      this.ambientOscillator.connect(this.ambientGain)\n      this.ambientGain.connect(this.underwaterFilter)\n      this.underwaterFilter.connect(this.musicGain)\n\n      this.ambientOscillator.start()\n\n      // Create background music layers\n      this.createBackgroundMusic()\n\n      console.log('ð Ambient underwater sound and music started')\n    } catch (error) {\n      console.warn('Failed to start ambient sound:', error)\n    }\n  }\n\n  /**\n   * Create layered background music using harmonic oscillators\n   */\n  createBackgroundMusic() {\n    this.musicLayers = []\n\n    // Musical notes in the key of A minor (underwater/mysterious feel)\n    const musicNotes = [\n      { frequency: 110, volume: 0.03, type: 'sine' }, // A2\n      { frequency: 146.83, volume: 0.025, type: 'sine' }, // D3\n      { frequency: 164.81, volume: 0.02, type: 'triangle' }, // E3\n      { frequency: 220, volume: 0.015, type: 'sine' }, // A3\n    ]\n\n    musicNotes.forEach((note, index) => {\n      const oscillator = this.audioContext.createOscillator()\n      const gainNode = this.audioContext.createGain()\n      const lfo = this.audioContext.createOscillator() // Low frequency oscillator for modulation\n      const lfoGain = this.audioContext.createGain()\n\n      // Setup main oscillator\n      oscillator.type = note.type\n      oscillator.frequency.setValueAtTime(\n        note.frequency,\n        this.audioContext.currentTime\n      )\n\n      // Setup LFO for subtle frequency modulation\n      lfo.type = 'sine'\n      lfo.frequency.setValueAtTime(\n        0.1 + index * 0.05,\n        this.audioContext.currentTime\n      ) // Different rates for each layer\n      lfoGain.gain.setValueAtTime(2, this.audioContext.currentTime) // Small modulation depth\n\n      // Connect modulation\n      lfo.connect(lfoGain)\n      lfoGain.connect(oscillator.frequency)\n\n      // Setup volume envelope with slow fade in\n      gainNode.gain.setValueAtTime(0, this.audioContext.currentTime)\n      gainNode.gain.linearRampToValueAtTime(\n        note.volume,\n        this.audioContext.currentTime + 5.0 + index // Staggered entry\n      )\n\n      // Connect audio chain\n      oscillator.connect(gainNode)\n      gainNode.connect(this.underwaterFilter)\n      this.underwaterFilter.connect(this.musicGain)\n\n      // Start oscillators\n      oscillator.start()\n      lfo.start()\n\n      this.musicLayers.push({ oscillator, gainNode, lfo, lfoGain })\n    })\n  }\n\n  /**\n   * Stop ambient underwater sound and background music\n   */\n  stopAmbientSound() {\n    if (this.ambientOscillator) {\n      try {\n        this.ambientGain.gain.linearRampToValueAtTime(\n          0,\n          this.audioContext.currentTime + 1\n        )\n        this.ambientOscillator.stop(this.audioContext.currentTime + 1)\n        this.ambientOscillator = null\n        this.ambientGain = null\n      } catch (error) {\n        console.warn('Error stopping ambient sound:', error)\n      }\n    }\n\n    // Stop background music layers\n    if (this.musicLayers) {\n      this.musicLayers.forEach(layer => {\n        try {\n          layer.gainNode.gain.linearRampToValueAtTime(\n            0,\n            this.audioContext.currentTime + 1\n          )\n          layer.oscillator.stop(this.audioContext.currentTime + 1)\n          layer.lfo.stop(this.audioContext.currentTime + 1)\n        } catch (error) {\n          console.warn('Error stopping music layer:', error)\n        }\n      })\n      this.musicLayers = null\n    }\n\n    console.log('ð Ambient sound and music stopped')\n  }\n\n  /**\n   * Update listener position for 3D audio (should be called each frame)\n   */\n  updateListenerPosition(position, forward, up) {\n    if (!this.listener || !this.isInitialized) {\n      return\n    }\n\n    try {\n      if (this.listener.positionX) {\n        // New Web Audio API approach\n        this.listener.positionX.setValueAtTime(\n          position.x,\n          this.audioContext.currentTime\n        )\n        this.listener.positionY.setValueAtTime(\n          position.y,\n          this.audioContext.currentTime\n        )\n        this.listener.positionZ.setValueAtTime(\n          position.z,\n          this.audioContext.currentTime\n        )\n\n        this.listener.forwardX.setValueAtTime(\n          forward.x,\n          this.audioContext.currentTime\n        )\n        this.listener.forwardY.setValueAtTime(\n          forward.y,\n          this.audioContext.currentTime\n        )\n        this.listener.forwardZ.setValueAtTime(\n          forward.z,\n          this.audioContext.currentTime\n        )\n\n        this.listener.upX.setValueAtTime(up.x, this.audioContext.currentTime)\n        this.listener.upY.setValueAtTime(up.y, this.audioContext.currentTime)\n        this.listener.upZ.setValueAtTime(up.z, this.audioContext.currentTime)\n      } else {\n        // Fallback for older browsers\n        this.listener.setPosition(position.x, position.y, position.z)\n        this.listener.setOrientation(\n          forward.x,\n          forward.y,\n          forward.z,\n          up.x,\n          up.y,\n          up.z\n        )\n      }\n    } catch {\n      // Silently ignore positioning errors\n    }\n  }\n\n  /**\n   * Set master volume\n   */\n  setMasterVolume(volume) {\n    this.masterVolume = Math.max(0, Math.min(1, volume))\n\n    if (this.masterGain && this.audioContext) {\n      this.masterGain.gain.setValueAtTime(\n        this.masterVolume,\n        this.audioContext.currentTime\n      )\n    }\n\n    this.saveSettings()\n  }\n\n  /**\n   * Set music volume\n   */\n  setMusicVolume(volume) {\n    this.musicVolume = Math.max(0, Math.min(1, volume))\n\n    if (this.musicGain && this.audioContext) {\n      this.musicGain.gain.setValueAtTime(\n        this.musicVolume,\n        this.audioContext.currentTime\n      )\n    }\n\n    this.saveSettings()\n  }\n\n  /**\n   * Set sound effects volume\n   */\n  setSfxVolume(volume) {\n    this.sfxVolume = Math.max(0, Math.min(1, volume))\n\n    if (this.sfxGain && this.audioContext) {\n      this.sfxGain.gain.setValueAtTime(\n        this.sfxVolume,\n        this.audioContext.currentTime\n      )\n    }\n\n    this.saveSettings()\n  }\n\n  /**\n   * Toggle mute state\n   */\n  toggleMute() {\n    this.isMuted = !this.isMuted\n\n    if (this.isMuted) {\n      this.stopAmbientSound()\n    } else if (this.isInitialized) {\n      this.startAmbientSound()\n    }\n\n    console.log(`ð Audio ${this.isMuted ? 'muted' : 'unmuted'}`)\n    return this.isMuted\n  }\n\n  /**\n   * Get current audio state\n   */\n  getState() {\n    return {\n      isInitialized: this.isInitialized,\n      isMuted: this.isMuted,\n      masterVolume: this.masterVolume,\n      musicVolume: this.musicVolume,\n      sfxVolume: this.sfxVolume,\n    }\n  }\n\n  /**\n   * Load audio settings from localStorage\n   */\n  loadSettings() {\n    try {\n      const savedSettings = localStorage.getItem('oceanAdventure_audioSettings')\n      if (savedSettings) {\n        const settings = JSON.parse(savedSettings)\n        this.masterVolume = settings.masterVolume ?? 0.5\n        this.musicVolume = settings.musicVolume ?? 0.5\n        this.sfxVolume = settings.sfxVolume ?? 0.5\n      }\n    } catch (error) {\n      console.warn('Failed to load audio settings:', error)\n    }\n  }\n\n  /**\n   * Save audio settings to localStorage\n   */\n  saveSettings() {\n    try {\n      const settings = {\n        masterVolume: this.masterVolume,\n        musicVolume: this.musicVolume,\n        sfxVolume: this.sfxVolume,\n      }\n      localStorage.setItem(\n        'oceanAdventure_audioSettings',\n        JSON.stringify(settings)\n      )\n    } catch (error) {\n      console.warn('Failed to save audio settings:', error)\n    }\n  }\n\n  /**\n   * Dispose of audio resources\n   */\n  dispose() {\n    this.stopAmbientSound()\n\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      this.audioContext.close()\n    }\n\n    this.sounds.clear()\n    this.isInitialized = false\n\n    console.log('ðï¸ AudioEngine disposed')\n  }\n}\n","/**\n * Player Component for Ocean Adventure\n *\n * Enhanced player controller with physics integration,\n * underwater movement mechanics, and collision handling.\n */\n\nimport * as THREE from 'three'\n\nexport class Player {\n  constructor(scene, physicsEngine) {\n    this.scene = scene\n    this.physicsEngine = physicsEngine\n\n    // Player properties\n    this.moveSpeed = 8.0\n    this.rotationSpeed = 3.0\n    this.maxVelocity = 5.0\n\n    // Movement state\n    this.movementVector = new THREE.Vector3()\n    this.isMoving = false\n\n    // Create player mesh and physics body\n    this.createPlayerMesh()\n    this.createPhysicsBody()\n\n    // Bind collision handler\n    this.physicsBody.onCollision = collisions =>\n      this.handleCollisions(collisions)\n  }\n\n  /**\n   * Create the visual representation of the player\n   */\n  createPlayerMesh() {\n    // Create swimmer-like body using a group of geometries\n    this.mesh = new THREE.Group()\n\n    // Main body (torso) - elongated ellipsoid shape\n    const bodyGeometry = new THREE.CapsuleGeometry(0.3, 1.2, 4, 8)\n    const bodyMaterial = new THREE.MeshPhongMaterial({\n      color: 0xfdbcb4, // Skin tone\n      transparent: true,\n      opacity: 0.95,\n      shininess: 30,\n      specular: 0x444444,\n    })\n    const bodyMesh = new THREE.Mesh(bodyGeometry, bodyMaterial)\n    bodyMesh.castShadow = true\n    bodyMesh.receiveShadow = true\n    this.mesh.add(bodyMesh)\n\n    // Head\n    const headGeometry = new THREE.SphereGeometry(0.25, 8, 6)\n    const headMaterial = new THREE.MeshPhongMaterial({\n      color: 0xfdbcb4, // Same skin tone\n      shininess: 20,\n    })\n    const headMesh = new THREE.Mesh(headGeometry, headMaterial)\n    headMesh.position.set(0, 0.9, 0)\n    headMesh.castShadow = true\n    headMesh.receiveShadow = true\n    this.mesh.add(headMesh)\n\n    // Swimming arms (simplified)\n    const armGeometry = new THREE.CapsuleGeometry(0.08, 0.6, 4, 6)\n    const armMaterial = new THREE.MeshPhongMaterial({\n      color: 0xfdbcb4,\n      shininess: 20,\n    })\n\n    // Left arm\n    const leftArm = new THREE.Mesh(armGeometry, armMaterial)\n    leftArm.position.set(-0.4, 0.3, 0)\n    leftArm.rotation.z = 0.3 // Swimming position\n    leftArm.castShadow = true\n    leftArm.receiveShadow = true\n    this.mesh.add(leftArm)\n\n    // Right arm\n    const rightArm = new THREE.Mesh(armGeometry, armMaterial)\n    rightArm.position.set(0.4, 0.3, 0)\n    rightArm.rotation.z = -0.3 // Swimming position\n    rightArm.castShadow = true\n    rightArm.receiveShadow = true\n    this.mesh.add(rightArm)\n\n    // Swimming legs\n    const legGeometry = new THREE.CapsuleGeometry(0.1, 0.8, 4, 6)\n    const legMaterial = new THREE.MeshPhongMaterial({\n      color: 0xfdbcb4,\n      shininess: 20,\n    })\n\n    // Left leg\n    const leftLeg = new THREE.Mesh(legGeometry, legMaterial)\n    leftLeg.position.set(-0.15, -0.9, 0)\n    leftLeg.castShadow = true\n    leftLeg.receiveShadow = true\n    this.mesh.add(leftLeg)\n\n    // Right leg\n    const rightLeg = new THREE.Mesh(legGeometry, legMaterial)\n    rightLeg.position.set(0.15, -0.9, 0)\n    rightLeg.castShadow = true\n    rightLeg.receiveShadow = true\n    this.mesh.add(rightLeg)\n\n    // Swimming gear (goggles/mask)\n    const gogglesGeometry = new THREE.SphereGeometry(0.28, 8, 6)\n    const gogglesMaterial = new THREE.MeshPhongMaterial({\n      color: 0x333333,\n      transparent: true,\n      opacity: 0.8,\n      shininess: 100,\n    })\n    const goggles = new THREE.Mesh(gogglesGeometry, gogglesMaterial)\n    goggles.position.set(0, 0.9, 0.1)\n    goggles.scale.set(1, 0.6, 0.8) // Flatten for goggle shape\n    this.mesh.add(goggles)\n\n    // Store references for animation\n    this.bodyParts = {\n      leftArm,\n      rightArm,\n      leftLeg,\n      rightLeg,\n    }\n\n    // Set initial position - start deep underwater for blue glow effect\n    this.mesh.position.set(0, -8, 0) // Start 13 meters below water surface (5 - (-8) = 13m depth)\n\n    // Add to scene\n    this.scene.add(this.mesh)\n  }\n\n  /**\n   * Create physics body for collision detection and movement\n   */\n  createPhysicsBody() {\n    this.physicsBody = this.physicsEngine.createSphereBody(\n      this.mesh.position.clone(), // Use the mesh position which is now set to (0, 2, 0)\n      1.0, // Increased from 0.7 to 1.0 for better collision detection\n      false // Not static - player can move\n    )\n\n    // Add physics body to engine\n    this.physicsEngine.addRigidBody(this.physicsBody)\n  }\n\n  /**\n   * Handle input and update movement vector\n   * @param {Object} inputState - Current input state\n   */\n  handleInput(inputState) {\n    // Reset movement vector\n    this.movementVector.set(0, 0, 0)\n    this.isMoving = false\n\n    // Keyboard input\n    if (inputState.keys) {\n      if (inputState.keys.forward) {\n        this.movementVector.z -= 1\n        this.isMoving = true\n      }\n      if (inputState.keys.backward) {\n        this.movementVector.z += 1\n        this.isMoving = true\n      }\n      if (inputState.keys.left) {\n        this.movementVector.x -= 1\n        this.isMoving = true\n      }\n      if (inputState.keys.right) {\n        this.movementVector.x += 1\n        this.isMoving = true\n      }\n      if (inputState.keys.up) {\n        this.movementVector.y += 1\n        this.isMoving = true\n      }\n      if (inputState.keys.down) {\n        this.movementVector.y -= 1\n        this.isMoving = true\n      }\n    }\n\n    // Touch/mobile input\n    if (inputState.joystick) {\n      this.movementVector.x += inputState.joystick.x\n      this.movementVector.z += inputState.joystick.y\n      if (\n        Math.abs(inputState.joystick.x) > 0.1 ||\n        Math.abs(inputState.joystick.y) > 0.1\n      ) {\n        this.isMoving = true\n      }\n    }\n\n    // Mobile buttons\n    if (inputState.mobileButtons) {\n      if (inputState.mobileButtons.swimUp) {\n        this.movementVector.y += 1\n        this.isMoving = true\n      }\n      if (inputState.mobileButtons.swimDown) {\n        this.movementVector.y -= 1\n        this.isMoving = true\n      }\n    }\n\n    // Normalize movement vector to prevent faster diagonal movement\n    if (this.movementVector.length() > 1) {\n      this.movementVector.normalize()\n    }\n\n    // Apply movement to physics body\n    this.applyMovement()\n  }\n\n  /**\n   * Apply movement forces to the physics body\n   */\n  applyMovement() {\n    if (!this.isMoving) {\n      // Apply stronger drag when not actively moving\n      this.physicsBody.velocity.multiplyScalar(0.9)\n      return\n    }\n\n    // Calculate movement force\n    const force = this.movementVector\n      .clone()\n      .multiplyScalar(this.moveSpeed * 0.05) // Increased force for better responsiveness\n\n    // Add force to velocity\n    this.physicsBody.velocity.add(force)\n\n    // Clamp velocity to max speed\n    if (this.physicsBody.velocity.length() > this.maxVelocity) {\n      this.physicsBody.velocity.normalize().multiplyScalar(this.maxVelocity)\n    }\n\n    // Rotate player to face movement direction (optional visual enhancement)\n    if (this.movementVector.length() > 0.1) {\n      const targetRotation = Math.atan2(\n        this.movementVector.x,\n        this.movementVector.z\n      )\n      this.mesh.rotation.y = THREE.MathUtils.lerp(\n        this.mesh.rotation.y,\n        targetRotation,\n        this.rotationSpeed * 0.016\n      )\n\n      // Add tilting based on movement direction\n      // Pitch (X-axis): Tilt down when swimming forward, up when swimming backward\n      const targetPitch = this.movementVector.z * 0.6 // Forward/backward movement controls pitch\n      this.mesh.rotation.x = THREE.MathUtils.lerp(\n        this.mesh.rotation.x,\n        targetPitch,\n        this.rotationSpeed * 0.016\n      )\n\n      // Roll (Z-axis): Bank when turning left/right (only when moving forward/backward)\n      const forwardMovement = Math.abs(this.movementVector.z)\n      const bankingAmount = this.movementVector.x * forwardMovement * 0.2\n      this.mesh.rotation.z = THREE.MathUtils.lerp(\n        this.mesh.rotation.z,\n        bankingAmount,\n        this.rotationSpeed * 0.016\n      )\n    } else {\n      // Return to neutral position when not moving\n      this.mesh.rotation.x = THREE.MathUtils.lerp(\n        this.mesh.rotation.x,\n        0,\n        this.rotationSpeed * 0.016\n      )\n      this.mesh.rotation.z = THREE.MathUtils.lerp(\n        this.mesh.rotation.z,\n        0,\n        this.rotationSpeed * 0.016\n      )\n    }\n  }\n\n  /**\n   * Update player state\n   */\n  update() {\n    // Sync mesh position with physics body (don't override physics with floating animation)\n    this.mesh.position.copy(this.physicsBody.position)\n\n    // Add gentle floating animation to visual representation only\n    const time = Date.now() * 0.001\n    const floatingOffset = Math.sin(time * 2) * 0.02\n    this.mesh.position.y += floatingOffset\n\n    // Add swimming animation to body parts when moving\n    if (this.bodyParts && this.isMoving) {\n      const swimTime = time * 4 // Faster swimming animation\n\n      // Animate arms - alternating stroke motion\n      this.bodyParts.leftArm.rotation.x = Math.sin(swimTime) * 0.5\n      this.bodyParts.rightArm.rotation.x = Math.sin(swimTime + Math.PI) * 0.5\n\n      // Animate legs - flutter kick motion\n      this.bodyParts.leftLeg.rotation.x = Math.sin(swimTime * 1.5) * 0.3\n      this.bodyParts.rightLeg.rotation.x =\n        Math.sin(swimTime * 1.5 + Math.PI) * 0.3\n    } else if (this.bodyParts) {\n      // Gentle idle animation when not moving\n      const idleTime = time * 0.5\n      this.bodyParts.leftArm.rotation.x = Math.sin(idleTime) * 0.1\n      this.bodyParts.rightArm.rotation.x = Math.sin(idleTime + Math.PI) * 0.1\n      this.bodyParts.leftLeg.rotation.x = Math.sin(idleTime * 0.8) * 0.05\n      this.bodyParts.rightLeg.rotation.x =\n        Math.sin(idleTime * 0.8 + Math.PI) * 0.05\n    }\n\n    // Don't update physics body position from mesh - let physics handle position\n    // The physics body position should be authoritative\n  }\n\n  /**\n   * Handle collisions with other objects\n   * @param {Array} collisions - Array of objects the player collided with\n   */\n  handleCollisions(collisions) {\n    for (const collision of collisions) {\n      // Handle different types of collisions\n      if (collision.type === 'collectible') {\n        this.handleCollectibleCollision(collision)\n      } else if (collision.type === 'obstacle') {\n        this.handleObstacleCollision(collision)\n      } else if (collision.type === 'environment') {\n        this.handleEnvironmentCollision(collision)\n      }\n    }\n  }\n\n  /**\n   * Handle collision with collectible items\n   * @param {Object} collectible - Collectible object\n   */\n  handleCollectibleCollision(collectible) {\n    // Collectibles will be handled by the game manager\n    // This is just for reference and future expansion\n    console.log('Player collected item:', collectible)\n  }\n\n  /**\n   * Handle collision with obstacles\n   * @param {Object} obstacle - Obstacle object\n   */\n  handleObstacleCollision(obstacle) {\n    // Bounce back slightly from obstacles\n    const direction = this.physicsBody.position\n      .clone()\n      .sub(obstacle.position)\n      .normalize()\n\n    this.physicsBody.velocity.add(direction.multiplyScalar(2))\n  }\n\n  /**\n   * Handle collision with environment objects\n   * @param {Object} _envObject - Environment object (unused for now)\n   */\n  handleEnvironmentCollision() {\n    // Environment collisions are handled by physics engine\n    // This can be used for special effects or sounds\n  }\n\n  /**\n   * Get current player position\n   * @returns {THREE.Vector3} Current position\n   */\n  getPosition() {\n    // Return physics body position (authoritative) instead of mesh position (includes floating animation)\n    return this.physicsBody.position.clone()\n  }\n\n  /**\n   * Set player position\n   * @param {THREE.Vector3} position - New position\n   */\n  setPosition(position) {\n    this.mesh.position.copy(position)\n    this.physicsBody.position.copy(position)\n  }\n\n  /**\n   * Get current velocity\n   * @returns {THREE.Vector3} Current velocity\n   */\n  getVelocity() {\n    return this.physicsBody.velocity.clone()\n  }\n\n  /**\n   * Check if player is moving\n   * @returns {boolean} Whether player is currently moving\n   */\n  getIsMoving() {\n    return this.isMoving || this.physicsBody.velocity.length() > 0.1\n  }\n\n  /**\n   * Dispose of player resources\n   */\n  dispose() {\n    // Remove from physics engine\n    this.physicsEngine.removeRigidBody(this.physicsBody)\n\n    // Remove mesh from scene\n    this.scene.remove(this.mesh)\n\n    // Dispose geometry and material for the group\n    if (this.mesh.children) {\n      this.mesh.children.forEach(child => {\n        if (child.geometry) {\n          child.geometry.dispose()\n        }\n        if (child.material) {\n          if (Array.isArray(child.material)) {\n            child.material.forEach(material => material.dispose())\n          } else {\n            child.material.dispose()\n          }\n        }\n      })\n    } else {\n      // Fallback for simple mesh (backward compatibility)\n      if (this.mesh.geometry) {\n        this.mesh.geometry.dispose()\n      }\n      if (this.mesh.material) {\n        this.mesh.material.dispose()\n      }\n    }\n  }\n}\n","/**\n * Gate Component for Ocean Adventure\n *\n * Represents the glowing portal gates that players must swim through\n * to complete levels after collecting all stars.\n */\n\nimport * as THREE from 'three'\n\nexport class Gate {\n  constructor(scene, physicsEngine, position = new THREE.Vector3(0, 0, -15)) {\n    this.scene = scene\n    this.physicsEngine = physicsEngine\n    this.position = position.clone()\n\n    // Gate properties\n    this.width = 4\n    this.height = 6\n    this.depth = 0.5\n    this.isActivated = false\n    this.isCollected = false\n\n    // Animation properties\n    this.pulseSpeed = 0.02\n    this.rotationSpeed = 0.01\n    this.time = 0\n\n    // Create gate mesh and physics body\n    this.createGateMesh()\n    this.createPhysicsBody()\n\n    console.log('ðª Gate created at position:', position)\n  }\n\n  /**\n   * Create the visual representation of the gate\n   */\n  createGateMesh() {\n    // Create gate frame (torus shape for portal effect)\n    const gateGeometry = new THREE.TorusGeometry(this.width, 0.3, 8, 32)\n\n    // Enhanced glowing material with stronger emissive properties\n    const gateMaterial = new THREE.MeshPhongMaterial({\n      color: 0x00ffff,\n      emissive: 0x006666,\n      emissiveIntensity: 0.5,\n      transparent: true,\n      opacity: 0.9,\n      shininess: 100,\n    })\n\n    this.gateMesh = new THREE.Mesh(gateGeometry, gateMaterial)\n    this.gateMesh.position.copy(this.position)\n    this.gateMesh.castShadow = true\n    this.gateMesh.receiveShadow = true\n\n    // Create inner portal effect with enhanced materials\n    const portalGeometry = new THREE.PlaneGeometry(\n      this.width * 1.5,\n      this.height\n    )\n    const portalMaterial = new THREE.MeshBasicMaterial({\n      color: 0x0088ff,\n      transparent: true,\n      opacity: 0.3,\n      side: THREE.DoubleSide,\n    })\n\n    this.portalMesh = new THREE.Mesh(portalGeometry, portalMaterial)\n    this.portalMesh.position.copy(this.position)\n\n    // Create multiple enhanced light sources for better illumination\n    this.gateLight = new THREE.PointLight(0x00ffff, 1.0, 25)\n    this.gateLight.position.copy(this.position)\n    this.gateLight.position.z += 1\n\n    // Add secondary lights for rim lighting effect\n    this.rimLights = []\n    const numRimLights = 6\n    for (let i = 0; i < numRimLights; i++) {\n      const angle = (i / numRimLights) * Math.PI * 2\n      const rimLight = new THREE.PointLight(0x0088ff, 0.3, 10)\n      const lightRadius = this.width * 1.2\n      rimLight.position.set(\n        this.position.x + Math.cos(angle) * lightRadius,\n        this.position.y + Math.sin(angle) * lightRadius * 0.7,\n        this.position.z + (Math.random() - 0.5) * 2\n      )\n      rimLight.userData = {\n        originalAngle: angle,\n        animationOffset: Math.random() * Math.PI * 2,\n      }\n      this.rimLights.push(rimLight)\n    }\n\n    // Add to scene (initially invisible until activated)\n    this.setVisibility(false)\n  }\n\n  /**\n   * Create physics body for collision detection\n   * Using a ring shape instead of a solid box to allow swimming through\n   */\n  createPhysicsBody() {\n    // Create multiple collision bodies around the ring\n    // This allows detection when player swims through the gate center\n    this.physicsBody = []\n\n    // Position collision spheres at the inner edge of the torus opening\n    // Visual gate: TorusGeometry(4, 0.3) means major radius 4, tube radius 0.3\n    // Inner opening radius = major radius - tube radius = 4 - 0.3 = 3.7\n    // Place collision spheres slightly inside the opening at radius 3.2 to ensure detection\n    const ringRadius = this.width - 0.8 // Places spheres at radius 3.2 for reliable detection\n    const segments = 8\n\n    for (let i = 0; i < segments; i++) {\n      const angle = (i / segments) * Math.PI * 2\n      const x = Math.cos(angle) * ringRadius\n      const y = Math.sin(angle) * ringRadius * 0.7 // Make it more oval for height\n\n      const segmentPosition = this.position.clone()\n      segmentPosition.x += x\n      segmentPosition.y += y\n\n      const segmentBody = this.physicsEngine.createSphereBody(\n        segmentPosition,\n        2.0, // Increased from 1.0 to 2.0 for better collision coverage\n        true // Static - gates don't move\n      )\n      segmentBody.type = 'gate'\n      segmentBody.gate = this\n      this.physicsEngine.addRigidBody(segmentBody)\n      this.physicsBody.push(segmentBody)\n    }\n\n    // Add a central collision body to detect when player swims through the gate center\n    const centerBody = this.physicsEngine.createSphereBody(\n      this.position.clone(), // Position at gate center\n      3.0, // Increased from 1.5 to 3.0 for easier collision detection\n      true // Static - gates don't move\n    )\n    centerBody.type = 'gate'\n    centerBody.gate = this\n    this.physicsEngine.addRigidBody(centerBody)\n    this.physicsBody.push(centerBody)\n  }\n\n  /**\n   * Activate the gate (make it visible and interactive)\n   */\n  activate() {\n    if (this.isActivated) {\n      return\n    }\n\n    this.isActivated = true\n    this.setVisibility(true)\n\n    // Enhanced activation effects\n    this.gateMesh.material.emissiveIntensity = 0.8\n    this.gateLight.intensity = 1.5\n\n    // Activate rim lights\n    this.rimLights.forEach(light => {\n      light.intensity = 0.4\n    })\n\n    console.log('â¨ Gate activated!')\n  }\n\n  /**\n   * Deactivate the gate\n   */\n  deactivate() {\n    this.isActivated = false\n    this.setVisibility(false)\n    this.gateMesh.material.emissiveIntensity = 0.5\n    this.gateLight.intensity = 1.0\n\n    // Deactivate rim lights\n    this.rimLights.forEach(light => {\n      light.intensity = 0.1\n    })\n  }\n\n  /**\n   * Set gate visibility\n   */\n  setVisibility(visible) {\n    if (visible) {\n      this.scene.add(this.gateMesh)\n      this.scene.add(this.portalMesh)\n      this.scene.add(this.gateLight)\n      // Add rim lights\n      this.rimLights.forEach(light => this.scene.add(light))\n    } else {\n      this.scene.remove(this.gateMesh)\n      this.scene.remove(this.portalMesh)\n      this.scene.remove(this.gateLight)\n      // Remove rim lights\n      this.rimLights.forEach(light => this.scene.remove(light))\n    }\n  }\n\n  /**\n   * Handle player collision with gate\n   */\n  onPlayerEnter() {\n    if (!this.isActivated || this.isCollected) {\n      return false\n    }\n\n    this.isCollected = true\n    console.log('ð¯ Player entered gate - Level Complete!')\n\n    // Gate completion effects\n    this.gateMesh.material.emissiveIntensity = 1.0\n    this.gateLight.intensity = 2.0\n\n    return true\n  }\n\n  /**\n   * Update gate animations and effects\n   */\n  update(deltaTime) {\n    if (!this.isActivated) {\n      return\n    }\n\n    this.time += deltaTime\n\n    // Enhanced pulsing glow effect\n    const pulseIntensity =\n      0.4 + Math.sin(this.time * this.pulseSpeed * 10) * 0.3\n    this.gateMesh.material.emissiveIntensity = pulseIntensity\n    this.gateLight.intensity = 0.8 + pulseIntensity\n\n    // Gentle rotation\n    this.gateMesh.rotation.z += this.rotationSpeed\n\n    // Enhanced portal shimmer effect\n    this.portalMesh.material.opacity =\n      0.2 + Math.sin(this.time * this.pulseSpeed * 15) * 0.2\n\n    // Animate rim lights for dynamic lighting\n    this.rimLights.forEach((light, index) => {\n      const userData = light.userData\n      const animationTime = this.time * 0.5 + userData.animationOffset\n\n      // Create pulsing effect with phase offset for each light\n      const pulseFactor = 0.2 + Math.sin(animationTime + index * 0.5) * 0.2\n      light.intensity = pulseFactor\n\n      // Slight movement for dynamic effect\n      const lightRadius = this.width * 1.2\n      const wobble = Math.sin(animationTime * 2) * 0.1\n      light.position.set(\n        this.position.x +\n          Math.cos(userData.originalAngle) * (lightRadius + wobble),\n        this.position.y +\n          Math.sin(userData.originalAngle) * (lightRadius + wobble) * 0.7,\n        this.position.z + Math.sin(animationTime * 3) * 0.5\n      )\n    })\n  }\n\n  /**\n   * Get gate position\n   */\n  getPosition() {\n    return this.position.clone()\n  }\n\n  /**\n   * Check if gate is activated\n   */\n  getIsActivated() {\n    return this.isActivated\n  }\n\n  /**\n   * Check if gate has been collected (level completed)\n   */\n  getIsCollected() {\n    return this.isCollected\n  }\n\n  /**\n   * Reset gate for new level\n   */\n  reset() {\n    this.isCollected = false\n    this.deactivate()\n    this.time = 0\n  }\n\n  /**\n   * Dispose of gate resources\n   */\n  dispose() {\n    // Remove from physics engine - handle array of physics bodies\n    if (Array.isArray(this.physicsBody)) {\n      this.physicsBody.forEach(body => {\n        this.physicsEngine.removeRigidBody(body)\n      })\n    } else if (this.physicsBody) {\n      this.physicsEngine.removeRigidBody(this.physicsBody)\n    }\n\n    // Remove from scene\n    this.setVisibility(false)\n\n    // Dispose geometry and materials\n    if (this.gateMesh) {\n      this.gateMesh.geometry.dispose()\n      this.gateMesh.material.dispose()\n    }\n\n    if (this.portalMesh) {\n      this.portalMesh.geometry.dispose()\n      this.portalMesh.material.dispose()\n    }\n\n    console.log('ðï¸ Gate disposed')\n  }\n}\n","/**\n * Star Geometry for Ocean Adventure\n *\n * Creates actual star-shaped geometry instead of simple spheres\n * for more realistic collectible stars.\n */\n\nimport * as THREE from 'three'\n\nexport class StarGeometry {\n  /**\n   * Create a 3D star shape with specified parameters\n   * @param {number} innerRadius - Inner radius of the star points\n   * @param {number} outerRadius - Outer radius of the star points\n   * @param {number} points - Number of star points (default: 5)\n   * @param {number} depth - Depth/thickness of the star (default: 0.1)\n   */\n  static create(innerRadius = 0.2, outerRadius = 0.4, points = 5, depth = 0.1) {\n    // Create star shape using Three.js Shape\n    const starShape = new THREE.Shape()\n\n    // Calculate star points\n    const angleStep = (Math.PI * 2) / points\n    const halfAngleStep = angleStep / 2\n\n    // Start at the top point\n    let angle = -Math.PI / 2 // Start at top\n    starShape.moveTo(\n      Math.cos(angle) * outerRadius,\n      Math.sin(angle) * outerRadius\n    )\n\n    // Create star points by alternating between outer and inner radius\n    for (let i = 0; i < points; i++) {\n      // Inner point\n      angle += halfAngleStep\n      starShape.lineTo(\n        Math.cos(angle) * innerRadius,\n        Math.sin(angle) * innerRadius\n      )\n\n      // Outer point\n      angle += halfAngleStep\n      starShape.lineTo(\n        Math.cos(angle) * outerRadius,\n        Math.sin(angle) * outerRadius\n      )\n    }\n\n    // Extrude the shape to create 3D star\n    const extrudeSettings = {\n      depth: depth,\n      bevelEnabled: true,\n      bevelSegments: 2,\n      steps: 2,\n      bevelSize: 0.02,\n      bevelThickness: 0.02,\n    }\n\n    const starGeometry = new THREE.ExtrudeGeometry(starShape, extrudeSettings)\n\n    // Center the geometry\n    starGeometry.center()\n\n    return starGeometry\n  }\n\n  /**\n   * Create a simple star material with enhanced glowing effects\n   * @param {number} color - Base color (default: gold)\n   * @param {number} emissiveIntensity - Glow intensity (default: 0.6)\n   */\n  static createMaterial(color = 0xffd700, emissiveIntensity = 0.6) {\n    return new THREE.MeshPhongMaterial({\n      color: color,\n      emissive: color,\n      emissiveIntensity: emissiveIntensity,\n      shininess: 100,\n      specular: 0xffffff,\n      transparent: true,\n      opacity: 0.95,\n    })\n  }\n\n  /**\n   * Create multiple star variants with different sizes and colors\n   */\n  static createVariants() {\n    const variants = []\n\n    // Different star sizes and colors\n    const configs = [\n      { inner: 0.15, outer: 0.35, color: 0xffd700 }, // Classic gold\n      { inner: 0.18, outer: 0.38, color: 0xffff80 }, // Light yellow\n      { inner: 0.12, outer: 0.32, color: 0xffa500 }, // Orange\n      { inner: 0.2, outer: 0.4, color: 0xfffacd }, // Light gold\n      { inner: 0.16, outer: 0.36, color: 0xffb347 }, // Sandy brown\n    ]\n\n    configs.forEach(config => {\n      const geometry = StarGeometry.create(config.inner, config.outer)\n      const material = StarGeometry.createMaterial(config.color)\n      variants.push({ geometry, material, config })\n    })\n\n    return variants\n  }\n}\n","/**\n * Ocean Adventure - Main Game Entry Point\n *\n * This is a placeholder implementation showing the basic structure\n * for the 3D underwater platform game. The actual game engine\n * implementation will be developed following the Copilot plan.\n */\n\nimport * as THREE from 'three'\nimport { PhysicsEngine } from './core/Physics.js'\nimport { ParticleSystem } from './core/ParticleSystem.js'\nimport { AudioEngine } from './core/AudioEngine.js'\nimport { Player } from './components/Player.js'\nimport { Gate } from './components/Gate.js'\nimport { StarGeometry } from './components/StarGeometry.js'\n\n// Game configuration\nconst CONFIG = {\n  targetFPS: 60,\n  mobileFPS: 30,\n  canvasId: 'gameCanvas',\n  loadingId: 'loading',\n  uiId: 'ui',\n}\n\nclass OceanAdventure {\n  constructor() {\n    this.scene = null\n    this.camera = null\n    this.renderer = null\n    this.canvas = null\n    this.isLoaded = false\n    this.isMobile = this.detectMobile()\n\n    // Core systems\n    this.physicsEngine = null\n    this.particleSystem = null\n    this.audioEngine = null\n    this.player = null\n    this.gate = null\n    this.environmentObjects = []\n    this.seaCreatures = []\n\n    // Game state\n    this.starCount = 0\n    this.levelNumber = 1\n\n    // Input state\n    this.inputState = {\n      keys: {\n        forward: false,\n        backward: false,\n        left: false,\n        right: false,\n        up: false,\n        down: false,\n      },\n      joystick: { x: 0, y: 0 },\n      cameraJoystick: { x: 0, y: 0 }, // New camera joystick input\n      mobileButtons: { swimUp: false, swimDown: false },\n    }\n\n    // Camera rotation state for independent camera control\n    this.cameraRotation = {\n      horizontal: 0, // Horizontal rotation (yaw)\n      vertical: 0, // Vertical rotation (pitch)\n      sensitivity: this.isMobile ? 0.0015 : 0.005, // Much slower camera movement on mobile for better control\n    }\n\n    // Camera smoothing state for adaptive movement\n    this.previousMovementDirection = null\n\n    // Timing\n    this.lastTime = 0\n\n    console.log('ð Ocean Adventure - Initializing...')\n  }\n\n  async initialize() {\n    const steps = [\n      { name: 'Canvas Setup', fn: () => this.setupCanvas() },\n      { name: 'WebGL Renderer', fn: () => this.setupRenderer() },\n      { name: '3D Scene', fn: () => this.setupScene() },\n      { name: 'Camera', fn: () => this.setupCamera() },\n      { name: 'Lighting', fn: () => this.setupLights() },\n      { name: 'Physics Engine', fn: () => this.initializePhysics() },\n      { name: 'Particle System', fn: () => this.initializeParticleSystem() },\n      { name: 'Audio Engine', fn: () => this.initializeAudio() },\n      { name: 'Environment', fn: () => this.createUnderwaterEnvironment() },\n      { name: 'Player', fn: () => this.createPlayer() },\n      { name: 'Sample Stars', fn: () => this.createSampleStars() },\n      { name: 'Gate', fn: () => this.createGate() },\n      { name: 'Sea Creatures', fn: () => this.createSeaCreatures() },\n      { name: 'Event Listeners', fn: () => this.setupEventListeners() },\n      {\n        name: 'UI Initialization',\n        fn: () => {\n          this.hideLoading()\n          this.showUI()\n        },\n      },\n      { name: 'Game Loop', fn: () => this.startGameLoop() },\n    ]\n\n    try {\n      console.log('ð® Ocean Adventure - Starting initialization...')\n\n      for (let i = 0; i < steps.length; i++) {\n        const step = steps[i]\n        console.log(`[${i + 1}/${steps.length}] Initializing ${step.name}...`)\n\n        try {\n          await step.fn()\n          console.log(`â ${step.name} initialized successfully`)\n        } catch (stepError) {\n          console.error(`â Failed to initialize ${step.name}:`, stepError)\n          throw new Error(\n            `Initialization failed at step \"${step.name}\": ${stepError.message}`\n          )\n        }\n      }\n\n      this.isLoaded = true\n      console.log('ð Ocean Adventure - Ready to play!')\n    } catch (error) {\n      console.error('â Failed to initialize game:', error)\n      this.showError('Failed to initialize game: ' + error.message)\n    }\n  }\n\n  setupCanvas() {\n    console.log('ð® Setting up canvas...')\n    this.canvas = document.getElementById(CONFIG.canvasId)\n    if (!this.canvas) {\n      throw new Error('Game canvas not found')\n    }\n    console.log('â Canvas found and configured')\n  }\n\n  setupRenderer() {\n    console.log('ð¨ Setting up WebGL renderer...')\n    try {\n      this.renderer = new THREE.WebGLRenderer({\n        canvas: this.canvas,\n        antialias: !this.isMobile, // Disable antialiasing on mobile for performance\n        alpha: false,\n        powerPreference: this.isMobile ? 'low-power' : 'high-performance',\n        failIfMajorPerformanceCaveat: false, // Allow fallback rendering\n        preserveDrawingBuffer: false, // Better performance\n        premultipliedAlpha: false,\n        stencil: false, // Reduce memory usage\n      })\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight)\n      this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2))\n      this.renderer.setClearColor(0x001830, 1) // Darker, more contrasting ocean blue\n\n      // Enable shadows with mobile-optimized settings\n      this.renderer.shadowMap.enabled = true\n      this.renderer.shadowMap.type = this.isMobile\n        ? THREE.BasicShadowMap // Faster shadow type for mobile\n        : THREE.PCFSoftShadowMap // Better quality for desktop\n\n      // Enhanced WebGL settings for modern lighting\n      this.renderer.outputColorSpace = THREE.SRGBColorSpace\n      this.renderer.toneMapping = THREE.ACESFilmicToneMapping\n      this.renderer.toneMappingExposure = 1.0\n\n      // Validate WebGL context\n      const gl = this.renderer.getContext()\n      if (!gl) {\n        throw new Error('Failed to get WebGL context')\n      }\n\n      // Add error handling for WebGL\n      gl.getExtension('WEBGL_lose_context')\n\n      console.log('â WebGL renderer configured successfully')\n    } catch (error) {\n      console.error('â Failed to setup WebGL renderer:', error)\n      throw new Error(`WebGL initialization failed: ${error.message}`)\n    }\n  }\n\n  setupScene() {\n    console.log('ð Setting up 3D scene...')\n    this.scene = new THREE.Scene()\n    console.log('â 3D scene created successfully')\n  }\n\n  /**\n   * Initialize physics engine\n   */\n  initializePhysics() {\n    this.physicsEngine = new PhysicsEngine()\n    console.log('â¡ Physics engine initialized')\n  }\n\n  /**\n   * Initialize particle system\n   */\n  initializeParticleSystem() {\n    this.particleSystem = new ParticleSystem(this.scene, 500) // Reduced for mobile performance\n    console.log('â¨ Particle system initialized')\n  }\n\n  /**\n   * Initialize audio engine\n   */\n  initializeAudio() {\n    this.audioEngine = new AudioEngine()\n    // Note: Audio will be initialized on first user interaction due to browser policies\n    console.log('ð Audio engine created (will initialize on user interaction)')\n  }\n\n  /**\n   * Try to initialize audio on first user interaction\n   */\n  async tryInitializeAudio() {\n    if (this.audioEngine && !this.audioEngine.isInitialized) {\n      try {\n        await this.audioEngine.initialize()\n        this.audioEngine.startAmbientSound()\n        console.log('ð Audio initialized and ambient sound started')\n      } catch (error) {\n        console.warn('Audio initialization failed:', error)\n      }\n    }\n  }\n\n  setupCamera() {\n    this.camera = new THREE.PerspectiveCamera(\n      75, // Field of view\n      window.innerWidth / window.innerHeight, // Aspect ratio\n      0.1, // Near clipping plane\n      2000 // Far clipping plane to see sky elements\n    )\n\n    // Position camera to view deep underwater level while still seeing water surface\n    this.camera.position.set(0, 5, 15) // Adjusted for deeper level - closer to water surface\n    this.camera.lookAt(0, -5, 0) // Look down towards the deeper player area\n  }\n\n  setupLights() {\n    // Enhanced underwater ambient lighting (adjusted for modern lighting model)\n    const ambientLight = new THREE.AmbientLight(0x336699, 0.3) // Reduced from 0.6\n    this.scene.add(ambientLight)\n\n    // Primary directional light simulating filtered sunlight from above (adjusted intensity)\n    const directionalLight = new THREE.DirectionalLight(0x87ceeb, 2.5) // Increased from 1.2\n    directionalLight.position.set(0, 50, 10)\n\n    // Enable shadows with optimized settings for mobile compatibility\n    if (this.renderer.shadowMap.enabled) {\n      directionalLight.castShadow = true\n      // Use smaller shadow map sizes on mobile for better performance\n      const shadowMapSize = this.isMobile ? 512 : 1024\n      directionalLight.shadow.mapSize.width = shadowMapSize\n      directionalLight.shadow.mapSize.height = shadowMapSize\n      directionalLight.shadow.camera.near = 0.5\n      directionalLight.shadow.camera.far = 500\n      directionalLight.shadow.camera.left = -50\n      directionalLight.shadow.camera.right = 50\n      directionalLight.shadow.camera.top = 50\n      directionalLight.shadow.camera.bottom = -50\n      // Use less expensive shadow map type on mobile\n      if (this.isMobile) {\n        directionalLight.shadow.bias = -0.0005\n      }\n    }\n\n    this.scene.add(directionalLight)\n\n    // Add volumetric underwater lighting with point lights for better WebGL effects\n    this.addUnderwaterVolumetricLights()\n\n    // Add subtle rim lighting to enhance object definition (adjusted intensity)\n    const rimLight = new THREE.DirectionalLight(0x4a9eff, 0.8) // Increased from 0.4\n    rimLight.position.set(-20, 10, -20)\n    this.scene.add(rimLight)\n\n    // Create background skybox with gradient and clouds\n    this.createSkybox()\n  }\n\n  /**\n   * Create a simple skybox with gradient and cloud effects\n   */\n  createSkybox() {\n    const skyGeometry = new THREE.SphereGeometry(1500, 32, 32) // Much larger sphere\n\n    // Use high contrast visible material\n    const skyMaterial = new THREE.MeshBasicMaterial({\n      color: 0x87ceeb, // Light sky blue\n      side: THREE.BackSide,\n      transparent: false,\n      fog: false,\n    })\n\n    const skyMesh = new THREE.Mesh(skyGeometry, skyMaterial)\n    skyMesh.position.set(0, 0, 0) // Ensure centered\n    this.scene.add(skyMesh)\n\n    // Add some simple cloud sprites\n    this.createClouds()\n\n    console.log('âï¸ Skybox created')\n  }\n\n  /**\n   * Create simple cloud sprites\n   */\n  createClouds() {\n    this.clouds = []\n\n    // Create multiple cloud clusters for realistic appearance\n    for (let i = 0; i < 12; i++) {\n      // Create cloud cluster with multiple spheres\n      const cloudGroup = new THREE.Group()\n\n      // Create 3-5 spheres per cloud for fluffy appearance\n      const sphereCount = 3 + Math.floor(Math.random() * 3)\n      for (let j = 0; j < sphereCount; j++) {\n        const sphereSize = 8 + Math.random() * 12\n        const cloudGeometry = new THREE.SphereGeometry(sphereSize, 16, 16)\n        const cloudMaterial = new THREE.MeshBasicMaterial({\n          color: 0xffffff,\n          transparent: true,\n          opacity: 0.8 + Math.random() * 0.2, // Vary opacity for depth\n          fog: false, // Ensure clouds are not affected by underwater fog\n        })\n\n        const cloudSphere = new THREE.Mesh(cloudGeometry, cloudMaterial)\n\n        // Position spheres within the cloud cluster\n        cloudSphere.position.set(\n          (Math.random() - 0.5) * 25,\n          (Math.random() - 0.5) * 8,\n          (Math.random() - 0.5) * 25\n        )\n\n        cloudGroup.add(cloudSphere)\n      }\n\n      // Position cloud clusters far away in the sky for realistic appearance\n      const angle = (i / 12) * Math.PI * 2\n      const radius = 300 + Math.random() * 200 // Distant horizon: 300-500 units\n      cloudGroup.position.set(\n        Math.cos(angle) * radius,\n        60 + Math.random() * 40, // Lowered clouds: Y=60-100 units above water surface for better visibility\n        Math.sin(angle) * radius\n      )\n\n      // Scale appropriately for distant sky appearance\n      const scale = 3.0 + Math.random() * 2.0 // Larger scale for distant clouds\n      cloudGroup.scale.setScalar(scale)\n\n      // Store animation data\n      cloudGroup.userData = {\n        originalPosition: cloudGroup.position.clone(),\n        speed: 0.01 + Math.random() * 0.01,\n        offset: Math.random() * Math.PI * 2,\n      }\n\n      this.clouds.push(cloudGroup)\n      this.scene.add(cloudGroup)\n    }\n\n    console.log(`âï¸ Created ${this.clouds.length} distant sky cloud clusters`)\n  }\n\n  addUnderwaterVolumetricLights() {\n    // Create multiple point lights for underwater caustics effect\n    const lightColors = [0x4a9eff, 0x87ceeb, 0x6495ed, 0x00bfff]\n    const lightCount = this.isMobile ? 3 : 5 // Fewer lights on mobile\n\n    for (let i = 0; i < lightCount; i++) {\n      const pointLight = new THREE.PointLight(\n        lightColors[i % lightColors.length],\n        this.isMobile ? 2.0 : 3.0, // Adjusted for modern lighting model\n        30, // Distance\n        2 // Decay\n      )\n\n      // Position lights in a scattered pattern above the scene\n      const angle = (i / lightCount) * Math.PI * 2\n      const radius = 15 + Math.random() * 10\n      pointLight.position.set(\n        Math.cos(angle) * radius,\n        8 + Math.random() * 5, // Varying heights\n        Math.sin(angle) * radius\n      )\n\n      // Store animation properties\n      pointLight.userData = {\n        originalPosition: pointLight.position.clone(),\n        animationOffset: Math.random() * Math.PI * 2,\n        animationSpeed: 0.5 + Math.random() * 0.5,\n        animationRadius: 2 + Math.random() * 3,\n      }\n\n      this.scene.add(pointLight)\n\n      // Store reference for animation\n      if (!this.volumetricLights) {\n        this.volumetricLights = []\n      }\n      this.volumetricLights.push(pointLight)\n    }\n  }\n\n  /**\n   * Create sun or moon based on level number\n   */\n  createCelestialBody() {\n    const isEvenLevel = this.levelNumber % 2 === 0\n\n    if (isEvenLevel) {\n      // Create sun\n      const sunGeometry = new THREE.SphereGeometry(8, 32, 32) // Larger and more visible\n      const sunMaterial = new THREE.MeshBasicMaterial({\n        color: 0xffdd44,\n        transparent: false,\n      })\n      this.celestialBody = new THREE.Mesh(sunGeometry, sunMaterial)\n\n      // Position sun closer for better visibility\n      this.celestialBody.position.set(50, 40, -40)\n\n      // Add sun light\n      this.celestialLight = new THREE.DirectionalLight(0xffffff, 1.5)\n      this.celestialLight.position.copy(this.celestialBody.position)\n      this.celestialLight.target.position.set(0, 5, 0) // Point at water surface\n\n      console.log('âï¸ Sun created for even level', this.levelNumber)\n    } else {\n      // Create moon\n      const moonGeometry = new THREE.SphereGeometry(6, 32, 32) // Larger and more visible\n      const moonMaterial = new THREE.MeshBasicMaterial({\n        color: 0xccccdd,\n        transparent: false,\n      })\n      this.celestialBody = new THREE.Mesh(moonGeometry, moonMaterial)\n\n      // Position moon closer for better visibility\n      this.celestialBody.position.set(-45, 35, -35)\n\n      // Add moon light (dimmer)\n      this.celestialLight = new THREE.DirectionalLight(0x9999bb, 0.8)\n      this.celestialLight.position.copy(this.celestialBody.position)\n      this.celestialLight.target.position.set(0, 5, 0) // Point at water surface\n\n      console.log('ð Moon created for odd level', this.levelNumber)\n    }\n\n    // Store initial position for animation\n    this.celestialBody.userData = {\n      originalPosition: this.celestialBody.position.clone(),\n      isEvenLevel: isEvenLevel,\n      animationRadius: 15, // Reduced for closer visibility\n      animationSpeed: 0.2,\n    }\n\n    this.scene.add(this.celestialBody)\n    this.scene.add(this.celestialLight)\n    this.scene.add(this.celestialLight.target)\n  }\n\n  /**\n   * Initialize underwater atmosphere effects (fog, blue tinting)\n   */\n  initializeUnderwaterAtmosphere() {\n    // Initialize fog settings for underwater effect\n    this.underwaterFog = {\n      enabled: false,\n      color: new THREE.Color(0x006699), // Deep blue underwater color\n      near: 15, // Increased from 5 to reduce fog thickness\n      far: 40,\n    }\n\n    // Store original scene background for surface mode\n    this.originalSceneBackground = this.scene.background\n    this.originalClearColor = this.renderer.getClearColor(new THREE.Color())\n\n    // Track whether player is underwater\n    this.isUnderwater = false\n\n    console.log('ð Underwater atmosphere system initialized')\n  }\n\n  /**\n   * Update underwater atmosphere effects based on player position\n   */\n  updateUnderwaterAtmosphere() {\n    // Use player position instead of camera position for underwater detection\n    // This prevents issues with camera lerping lag when player reaches surface\n    const playerPosition = this.player ? this.player.getPosition() : { y: -10 }\n    const waterSurfaceLevel = 5.0\n    const wasUnderwater = this.isUnderwater\n    this.isUnderwater = playerPosition.y < waterSurfaceLevel\n\n    // If underwater state changed, update atmosphere\n    if (this.isUnderwater !== wasUnderwater) {\n      if (this.isUnderwater) {\n        // Entering underwater - apply blue fog and tinting\n        this.scene.fog = new THREE.Fog(\n          this.underwaterFog.color,\n          this.underwaterFog.near,\n          this.underwaterFog.far\n        )\n\n        // Change renderer clear color to underwater blue\n        this.renderer.setClearColor(0x004466, 1)\n\n        // Add blue tint to skybox when underwater\n        if (this.scene.children) {\n          this.scene.children.forEach(child => {\n            if (\n              child.material &&\n              child.material.color &&\n              child.geometry &&\n              child.geometry.type === 'SphereGeometry'\n            ) {\n              // This is likely the skybox\n              child.material.color.setHex(0x004466)\n            }\n          })\n        }\n\n        console.log('ð Entered underwater - fog and blue tinting applied')\n      } else {\n        // Exiting underwater - remove fog effects\n        this.scene.fog = null\n\n        // Set proper sky clear color instead of the original dark color\n        this.renderer.setClearColor(0x87ceeb, 1) // Light sky blue\n\n        // Restore skybox color\n        if (this.scene.children) {\n          this.scene.children.forEach(child => {\n            if (\n              child.material &&\n              child.material.color &&\n              child.geometry &&\n              child.geometry.type === 'SphereGeometry'\n            ) {\n              // This is likely the skybox\n              child.material.color.setHex(0x87ceeb) // Light sky blue\n            }\n          })\n        }\n\n        // Ensure clouds are visible by resetting their material properties\n        if (this.clouds) {\n          this.clouds.forEach(cloudGroup => {\n            cloudGroup.visible = true\n            // Restore visibility for all spheres in each cloud group\n            cloudGroup.children.forEach(sphere => {\n              if (sphere.material) {\n                sphere.material.opacity = Math.max(0.8, sphere.material.opacity)\n                sphere.material.visible = true\n              }\n              sphere.visible = true\n            })\n          })\n        }\n\n        console.log('ð Exited underwater - fog removed, sky elements restored')\n      }\n    }\n\n    // Gradual fog density adjustment based on depth underwater\n    if (this.isUnderwater && this.scene.fog) {\n      const depth = Math.max(0, waterSurfaceLevel - playerPosition.y)\n      const maxDepth = 15 // Maximum depth for fog calculations\n      const fogIntensity = Math.min(1, depth / maxDepth)\n\n      // Adjust fog far distance based on depth - reduced intensity for less thick fog\n      this.scene.fog.far = this.underwaterFog.far * (1 - fogIntensity * 0.3)\n\n      // Make fog more intense at deeper levels - reduced intensity for better visibility\n      const deepBlue = new THREE.Color(0x003355)\n      this.scene.fog.color.lerpColors(\n        this.underwaterFog.color,\n        deepBlue,\n        fogIntensity * 0.25\n      )\n    }\n  }\n\n  createUnderwaterEnvironment() {\n    // Note: Static water surface removed to eliminate z-fighting with animated waves\n    // const waterSurface = new THREE.Mesh(\n    //   waterSurfaceGeometry,\n    //   waterSurfaceMaterial\n    // )\n    // waterSurface.name = 'waterSurface' // Add name for debugging\n    // waterSurface.rotation.x = -Math.PI / 2 // Horizontal surface\n    // waterSurface.position.y = 5 // Water surface level used by depth meter\n    // waterSurface.receiveShadow = true\n    // waterSurface.castShadow = false\n    // this.scene.add(waterSurface)\n\n    // console.log('ð Water surface created at position:', waterSurface.position)\n\n    // Create visible wave surface with enhanced visibility parameters\n    const waveSurfaceGeometry = new THREE.PlaneGeometry(300, 300, 96, 96) // Larger area and higher resolution for better visibility\n    const waveSurfaceMaterial = new THREE.MeshPhongMaterial({\n      color: 0x00aaff, // Brighter blue for enhanced visibility from depth\n      transparent: true, // Enable transparency for better underwater viewing\n      opacity: 0.9, // Slightly transparent to see through when very close\n      side: THREE.DoubleSide,\n      shininess: 150, // Increased shininess for more reflection\n      specular: 0xffffff, // White specular highlights for realistic water\n      fog: false, // Ensure wave surface is not affected by fog\n      wireframe: false, // Solid surface for final implementation\n      emissive: 0x0088dd, // Stronger blue emissive glow for underwater visibility\n      emissiveIntensity: 0.3, // Add emissive intensity for better glow\n    })\n\n    const waveSurface = new THREE.Mesh(waveSurfaceGeometry, waveSurfaceMaterial)\n    waveSurface.name = 'waveSurface' // Add name for debugging\n    waveSurface.rotation.x = -Math.PI / 2\n    waveSurface.position.y = 5.0 // Position at same level as water surface for proper wave effect\n    this.scene.add(waveSurface)\n\n    console.log('ð Wave surface created at position:', waveSurface.position)\n\n    // Store references for wave animation\n    this.waveSurface = waveSurface\n    // this.waterSurface = waterSurface // Temporarily disabled\n\n    // Enhanced wave parameters for better visibility at all depths\n    this.waveParams = {\n      amplitude: 8.0, // Increased amplitude for even more prominent waves\n      frequency: 0.15, // Lower frequency for larger, more visible waves\n      speed: 3.0, // Faster wave movement for more dynamic surface\n    }\n\n    // Store original positions for wave surface animation\n    const wavePositions = waveSurface.geometry.attributes.position.array\n    this.waveOriginalPositions = new Float32Array(wavePositions.length)\n    for (let i = 0; i < wavePositions.length; i++) {\n      this.waveOriginalPositions[i] = wavePositions[i]\n    }\n\n    // Store original vertex positions for wave surface animation (no longer used for water surface)\n    // const positions = waterSurface.geometry.attributes.position.array\n    // this.waterOriginalPositions = new Float32Array(positions.length)\n    // for (let i = 0; i < positions.length; i++) {\n    //   this.waterOriginalPositions[i] = positions[i]\n    // }\n\n    // Add foam/whitecap effect for wave crests\n    const foamGeometry = new THREE.PlaneGeometry(400, 400, 64, 64)\n    const foamMaterial = new THREE.MeshBasicMaterial({\n      color: 0xffffff, // White foam\n      transparent: true,\n      opacity: 0.3,\n      side: THREE.DoubleSide,\n      alphaTest: 0.1,\n      depthWrite: false, // Don't write to depth buffer for proper blending\n    })\n\n    const foamSurface = new THREE.Mesh(foamGeometry, foamMaterial)\n    foamSurface.rotation.x = -Math.PI / 2\n    foamSurface.position.y = 5.2 // Slightly above water surface\n    this.scene.add(foamSurface)\n\n    // Store references for animation\n    this.foamSurface = foamSurface\n    this.foamOriginalPositions = new Float32Array(\n      foamGeometry.attributes.position.array\n    )\n\n    // Initialize underwater atmosphere system\n    this.initializeUnderwaterAtmosphere()\n\n    // Create sun or moon based on level number (even = sun, odd = moon)\n    this.createCelestialBody()\n\n    // Create ocean floor with sandy/rocky appearance - positioned deeper for level layout\n    const floorGeometry = new THREE.PlaneGeometry(100, 100, 32, 32) // Higher resolution for detail\n\n    // Create a more realistic ocean floor material\n    const floorMaterial = new THREE.MeshPhongMaterial({\n      color: 0x8b7355, // Sandy brown color\n      shininess: 10, // Low shininess for sand\n      specular: 0x444444, // Subtle specular highlights\n      transparent: false,\n    })\n\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial)\n    floor.rotation.x = -Math.PI / 2\n    floor.position.y = -15 // Moved 10 units deeper from -5 to -15\n    floor.receiveShadow = true\n\n    // Add subtle height variation to make the floor more natural\n    const floorPositions = floor.geometry.attributes.position.array\n    for (let i = 2; i < floorPositions.length; i += 3) {\n      // Add random height variation to Y coordinates (every 3rd element)\n      floorPositions[i] += (Math.random() - 0.5) * 0.3 // Small height variations\n    }\n    floor.geometry.attributes.position.needsUpdate = true\n    floor.geometry.computeVertexNormals() // Recalculate normals for proper lighting\n\n    this.scene.add(floor)\n\n    // Add some sand patches/texture variation\n    for (let i = 0; i < 8; i++) {\n      const patchGeometry = new THREE.CircleGeometry(2 + Math.random() * 3, 16)\n      const patchMaterial = new THREE.MeshPhongMaterial({\n        color: new THREE.Color().setHSL(0.1, 0.3, 0.3 + Math.random() * 0.2), // Varied sandy colors\n        shininess: 5,\n        transparent: true,\n        opacity: 0.7,\n      })\n\n      const patch = new THREE.Mesh(patchGeometry, patchMaterial)\n      patch.rotation.x = -Math.PI / 2\n      patch.position.set(\n        (Math.random() - 0.5) * 80,\n        -14.9, // Slightly above floor to avoid z-fighting\n        (Math.random() - 0.5) * 80\n      )\n      patch.receiveShadow = true\n      this.scene.add(patch)\n    }\n\n    // Create physics body for floor\n    const floorPhysicsBody = this.physicsEngine.createBoxBody(\n      new THREE.Vector3(0, -15, 0), // Updated to match new floor position\n      new THREE.Vector3(100, 0.1, 100),\n      true // Static\n    )\n    floorPhysicsBody.type = 'environment'\n    this.physicsEngine.addRigidBody(floorPhysicsBody)\n\n    // Add invisible boundary walls to prevent falling off the platform\n    this.createLevelBoundaries()\n\n    // Add varied ocean plants and coral with more realistic shapes and colors\n    const oceanObjectTypes = ['coral', 'seaweed', 'rock', 'anemone', 'kelp']\n\n    for (let i = 0; i < 15; i++) {\n      // Increased from 10 to 15 for more variety\n      const objectType =\n        oceanObjectTypes[Math.floor(Math.random() * oceanObjectTypes.length)]\n      let geometry, material, mesh\n\n      switch (objectType) {\n        case 'coral': {\n          // Branch-like coral structure\n          geometry = new THREE.CylinderGeometry(\n            0.1,\n            0.4,\n            1 + Math.random() * 2,\n            6\n          )\n          material = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.05 + Math.random() * 0.15,\n              0.8,\n              0.4\n            ), // Orange/red coral colors\n            shininess: 40,\n            transparent: true,\n            opacity: 0.9,\n          })\n          mesh = new THREE.Mesh(geometry, material)\n\n          // Add small coral branches\n          for (let j = 0; j < 3; j++) {\n            const branchGeometry = new THREE.SphereGeometry(\n              0.2 + Math.random() * 0.3,\n              8,\n              6\n            )\n            const branchMaterial = new THREE.MeshPhongMaterial({\n              color: material.color\n                .clone()\n                .multiplyScalar(0.8 + Math.random() * 0.4),\n              shininess: 60,\n            })\n            const branch = new THREE.Mesh(branchGeometry, branchMaterial)\n            branch.position.set(\n              (Math.random() - 0.5) * 0.8,\n              Math.random() * 1.5,\n              (Math.random() - 0.5) * 0.8\n            )\n            mesh.add(branch)\n          }\n          break\n        }\n\n        case 'seaweed': {\n          // Tall, swaying seaweed\n          geometry = new THREE.CylinderGeometry(\n            0.05,\n            0.08,\n            2 + Math.random() * 3,\n            8\n          )\n          material = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.3,\n              0.7,\n              0.2 + Math.random() * 0.3\n            ), // Green seaweed\n            shininess: 20,\n          })\n          mesh = new THREE.Mesh(geometry, material)\n          mesh.scale.x = 0.3 // Make it flatter like seaweed\n          break\n        }\n\n        case 'kelp': {\n          // Large kelp fronds\n          geometry = new THREE.ConeGeometry(0.5, 3 + Math.random() * 2, 8)\n          material = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(0.25, 0.6, 0.3), // Dark green kelp\n            shininess: 15,\n          })\n          mesh = new THREE.Mesh(geometry, material)\n          break\n        }\n\n        case 'anemone': {\n          // Sea anemone with tentacles\n          geometry = new THREE.SphereGeometry(0.4 + Math.random() * 0.6, 12, 8)\n          material = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.8 + Math.random() * 0.2,\n              0.7,\n              0.6\n            ), // Purple/pink anemone\n            shininess: 80,\n            transparent: true,\n            opacity: 0.85,\n          })\n          mesh = new THREE.Mesh(geometry, material)\n\n          // Add tentacle-like protrusions\n          for (let j = 0; j < 8; j++) {\n            const tentacleGeometry = new THREE.CylinderGeometry(\n              0.02,\n              0.05,\n              0.5,\n              4\n            )\n            const tentacle = new THREE.Mesh(tentacleGeometry, material.clone())\n            const angle = (j / 8) * Math.PI * 2\n            tentacle.position.set(\n              Math.cos(angle) * 0.4,\n              0.3,\n              Math.sin(angle) * 0.4\n            )\n            tentacle.rotation.x = (Math.random() - 0.5) * 0.5\n            tentacle.rotation.z = (Math.random() - 0.5) * 0.5\n            mesh.add(tentacle)\n          }\n          break\n        }\n\n        default: {\n          // rock\n          const rockRadius = 0.3 + Math.random() * 1.2\n          geometry = new THREE.DodecahedronGeometry(rockRadius, 1) // More irregular rock shape\n          material = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.1,\n              0.2,\n              0.3 + Math.random() * 0.3\n            ), // Gray/brown rocks\n            shininess: 10,\n          })\n          mesh = new THREE.Mesh(geometry, material)\n\n          // Make rocks slightly irregular\n          const rockPositions = geometry.attributes.position.array\n          for (let j = 0; j < rockPositions.length; j += 3) {\n            rockPositions[j] += (Math.random() - 0.5) * 0.1\n            rockPositions[j + 1] += (Math.random() - 0.5) * 0.1\n            rockPositions[j + 2] += (Math.random() - 0.5) * 0.1\n          }\n          geometry.attributes.position.needsUpdate = true\n          geometry.computeVertexNormals()\n          break\n        }\n      }\n\n      const position = new THREE.Vector3(\n        (Math.random() - 0.5) * 80,\n        -14 + Math.random() * 2, // Moved 10 units deeper: was -4 to -2, now -14 to -12\n        (Math.random() - 0.5) * 80\n      )\n      mesh.position.copy(position)\n      mesh.castShadow = true\n      mesh.receiveShadow = true\n\n      // Add gentle swaying animation for seaweed and kelp\n      if (objectType === 'seaweed' || objectType === 'kelp') {\n        mesh.userData.swaySpeed = 0.5 + Math.random() * 1.5\n        mesh.userData.swayAmount = 0.1 + Math.random() * 0.2\n      }\n\n      this.scene.add(mesh)\n\n      // Add physics body for collision (use sphere for simplicity)\n      const radius =\n        objectType === 'kelp' ? 1.0 : objectType === 'seaweed' ? 0.3 : 0.8\n      const objectPhysicsBody = this.physicsEngine.createSphereBody(\n        position,\n        radius, // Collision radius based on object type\n        true // Static\n      )\n      objectPhysicsBody.type = 'environment'\n      objectPhysicsBody.mesh = mesh // Reference to visual representation\n      this.physicsEngine.addRigidBody(objectPhysicsBody)\n      this.environmentObjects.push({\n        mesh: mesh,\n        physicsBody: objectPhysicsBody,\n      })\n    }\n  }\n\n  /**\n   * Create invisible boundary walls around the level\n   */\n  createLevelBoundaries() {\n    console.log('ð§± Creating level boundaries...')\n\n    // Level size should match the floor size (100x100)\n    const levelSize = 50 // Half the floor size (radius from center)\n    const wallHeight = 15 // Height of boundary walls\n    const wallThickness = 2 // Thickness of walls\n\n    // Create four walls around the level perimeter - positioned for deeper level\n    const wallConfigs = [\n      // North wall (positive Z)\n      {\n        position: new THREE.Vector3(0, wallHeight / 2 - 10, levelSize), // Moved 10 units deeper\n        size: new THREE.Vector3(levelSize * 2, wallHeight, wallThickness),\n        name: 'North Wall',\n      },\n      // South wall (negative Z)\n      {\n        position: new THREE.Vector3(0, wallHeight / 2 - 10, -levelSize), // Moved 10 units deeper\n        size: new THREE.Vector3(levelSize * 2, wallHeight, wallThickness),\n        name: 'South Wall',\n      },\n      // East wall (positive X)\n      {\n        position: new THREE.Vector3(levelSize, wallHeight / 2 - 10, 0), // Moved 10 units deeper\n        size: new THREE.Vector3(wallThickness, wallHeight, levelSize * 2),\n        name: 'East Wall',\n      },\n      // West wall (negative X)\n      {\n        position: new THREE.Vector3(-levelSize, wallHeight / 2 - 10, 0), // Moved 10 units deeper\n        size: new THREE.Vector3(wallThickness, wallHeight, levelSize * 2),\n        name: 'West Wall',\n      },\n    ]\n\n    wallConfigs.forEach(config => {\n      // Create invisible physics wall (no visual mesh needed)\n      const wallPhysicsBody = this.physicsEngine.createBoxBody(\n        config.position,\n        config.size,\n        true // Static\n      )\n      wallPhysicsBody.type = 'environment'\n      wallPhysicsBody.name = config.name\n      this.physicsEngine.addRigidBody(wallPhysicsBody)\n\n      console.log(\n        `ð§± Created ${config.name} at position (${config.position.x.toFixed(1)}, ${config.position.y.toFixed(1)}, ${config.position.z.toFixed(1)})`\n      )\n    })\n\n    console.log('â Level boundaries created successfully')\n  }\n\n  createPlayer() {\n    // Create enhanced player with physics\n    this.player = new Player(this.scene, this.physicsEngine)\n    console.log('ð Player created with physics')\n  }\n\n  /**\n   * Create the level completion gate\n   */\n  createGate() {\n    // Position gate deep underwater for blue atmosphere experience\n    const gatePosition = new THREE.Vector3(0, -8, -15) // 13m underwater to match player depth\n    this.gate = new Gate(this.scene, this.physicsEngine, gatePosition)\n    console.log(\n      `ðª Gate created at position: (${gatePosition.x}, ${gatePosition.y}, ${gatePosition.z})`\n    )\n  }\n\n  /**\n   * Create swimming sea creatures for ambiance\n   */\n  createSeaCreatures() {\n    console.log('ð  Creating sea creatures...')\n\n    const creatureTypes = ['fish', 'jellyfish', 'seahorse']\n\n    for (let i = 0; i < 12; i++) {\n      // Create 12 creatures\n      const creatureType =\n        creatureTypes[Math.floor(Math.random() * creatureTypes.length)]\n      let mesh, swimRadius, swimSpeed\n\n      switch (creatureType) {\n        case 'fish': {\n          // Simple fish shape using ellipsoid and fins\n          const fishGroup = new THREE.Group()\n\n          // Fish body\n          const bodyGeometry = new THREE.SphereGeometry(0.3, 8, 6)\n          const bodyMaterial = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.1 + Math.random() * 0.8,\n              0.8,\n              0.6\n            ),\n            shininess: 60,\n          })\n          const body = new THREE.Mesh(bodyGeometry, bodyMaterial)\n          body.scale.set(1.5, 1, 0.8) // Make it fish-shaped\n          fishGroup.add(body)\n\n          // Tail fin\n          const tailGeometry = new THREE.ConeGeometry(0.15, 0.4, 3)\n          const tailMaterial = new THREE.MeshPhongMaterial({\n            color: bodyMaterial.color.clone().multiplyScalar(0.8),\n            shininess: 40,\n          })\n          const tail = new THREE.Mesh(tailGeometry, tailMaterial)\n          tail.position.set(-0.4, 0, 0)\n          tail.rotation.z = Math.PI / 2\n          fishGroup.add(tail)\n\n          // Side fins\n          const finGeometry = new THREE.ConeGeometry(0.08, 0.2, 3)\n          const leftFin = new THREE.Mesh(finGeometry, tailMaterial.clone())\n          leftFin.position.set(0.1, -0.1, 0.2)\n          leftFin.rotation.x = Math.PI / 4\n          fishGroup.add(leftFin)\n\n          const rightFin = new THREE.Mesh(finGeometry, tailMaterial.clone())\n          rightFin.position.set(0.1, -0.1, -0.2)\n          rightFin.rotation.x = -Math.PI / 4\n          fishGroup.add(rightFin)\n\n          mesh = fishGroup\n          swimRadius = 8 + Math.random() * 12\n          swimSpeed = 0.3 + Math.random() * 0.5\n          break\n        }\n\n        case 'jellyfish': {\n          // Jellyfish with dome and tentacles\n          const jellyfishGroup = new THREE.Group()\n\n          // Dome\n          const domeGeometry = new THREE.SphereGeometry(\n            0.4,\n            8,\n            6,\n            0,\n            Math.PI * 2,\n            0,\n            Math.PI / 2\n          )\n          const domeMaterial = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.7 + Math.random() * 0.3,\n              0.5,\n              0.8\n            ),\n            transparent: true,\n            opacity: 0.7,\n            shininess: 100,\n          })\n          const dome = new THREE.Mesh(domeGeometry, domeMaterial)\n          jellyfishGroup.add(dome)\n\n          // Tentacles\n          for (let j = 0; j < 6; j++) {\n            const tentacleGeometry = new THREE.CylinderGeometry(\n              0.02,\n              0.01,\n              1.5,\n              4\n            )\n            const tentacle = new THREE.Mesh(\n              tentacleGeometry,\n              domeMaterial.clone()\n            )\n            const angle = (j / 6) * Math.PI * 2\n            tentacle.position.set(\n              Math.cos(angle) * 0.3,\n              -0.7,\n              Math.sin(angle) * 0.3\n            )\n            tentacle.userData.originalRotation = { x: 0, z: 0 }\n            tentacle.userData.tentacleIndex = j\n            jellyfishGroup.add(tentacle)\n          }\n\n          mesh = jellyfishGroup\n          swimRadius = 6 + Math.random() * 8\n          swimSpeed = 0.1 + Math.random() * 0.2\n          break\n        }\n\n        default: {\n          // seahorse\n          const seahorseGroup = new THREE.Group()\n\n          // Seahorse body (curved)\n          const seahorseBodyGeometry = new THREE.CylinderGeometry(\n            0.1,\n            0.15,\n            1,\n            8\n          )\n          const seahorseBodyMaterial = new THREE.MeshPhongMaterial({\n            color: new THREE.Color().setHSL(\n              0.2 + Math.random() * 0.4,\n              0.7,\n              0.5\n            ),\n            shininess: 40,\n          })\n          const seahorseBody = new THREE.Mesh(\n            seahorseBodyGeometry,\n            seahorseBodyMaterial\n          )\n          seahorseBody.rotation.z = Math.PI / 6 // Curved posture\n          seahorseGroup.add(seahorseBody)\n\n          // Head\n          const headGeometry = new THREE.SphereGeometry(0.12, 6, 4)\n          const head = new THREE.Mesh(\n            headGeometry,\n            seahorseBodyMaterial.clone()\n          )\n          head.position.set(0.1, 0.5, 0)\n          seahorseGroup.add(head)\n\n          // Dorsal fin\n          const dorsalFinGeometry = new THREE.PlaneGeometry(0.15, 0.8)\n          const dorsalFinMaterial = new THREE.MeshPhongMaterial({\n            color: seahorseBodyMaterial.color.clone().multiplyScalar(1.2),\n            transparent: true,\n            opacity: 0.8,\n            side: THREE.DoubleSide,\n          })\n          const dorsalFin = new THREE.Mesh(dorsalFinGeometry, dorsalFinMaterial)\n          dorsalFin.position.set(-0.1, 0, 0)\n          dorsalFin.rotation.y = Math.PI / 2\n          seahorseGroup.add(dorsalFin)\n\n          mesh = seahorseGroup\n          swimRadius = 4 + Math.random() * 6\n          swimSpeed = 0.2 + Math.random() * 0.3\n          break\n        }\n      }\n\n      // Set random starting position within the underwater area\n      const startPosition = new THREE.Vector3(\n        (Math.random() - 0.5) * 60,\n        -5 - Math.random() * 8, // Swimming in mid-water\n        (Math.random() - 0.5) * 60\n      )\n\n      mesh.position.copy(startPosition)\n      mesh.scale.setScalar(0.8 + Math.random() * 0.4) // Vary sizes\n\n      // Add creature data for animation\n      mesh.userData = {\n        creatureType: creatureType,\n        swimCenter: startPosition.clone(),\n        swimRadius: swimRadius,\n        swimSpeed: swimSpeed,\n        swimAngle: Math.random() * Math.PI * 2,\n        bobOffset: Math.random() * Math.PI * 2,\n      }\n\n      this.scene.add(mesh)\n      this.seaCreatures.push(mesh)\n    }\n\n    console.log(`ð  Created ${this.seaCreatures.length} sea creatures`)\n  }\n\n  createSampleStars() {\n    this.stars = []\n\n    // Create star geometry variants for visual variety\n    const starVariants = StarGeometry.createVariants()\n\n    // Create actual star-shaped collectibles with enhanced materials\n    for (let i = 0; i < 5; i++) {\n      // Use a random star variant for variety\n      const variant = starVariants[i % starVariants.length]\n      const starGeometry = variant.geometry.clone()\n      const starMaterial = variant.material.clone()\n\n      const star = new THREE.Mesh(starGeometry, starMaterial)\n      const position = new THREE.Vector3(\n        (Math.random() - 0.5) * 20,\n        Math.random() * 8 - 12, // Moved 10 units deeper: was -2 to +6, now -12 to -4\n        (Math.random() - 0.5) * 20\n      )\n      star.position.copy(position)\n      star.castShadow = true\n\n      // Add physics body for collision detection\n      const starPhysicsBody = this.physicsEngine.createSphereBody(\n        position,\n        1.0, // Increased from 0.5 to 1.0 for easier collection\n        true // Static - stars don't move\n      )\n      starPhysicsBody.type = 'collectible'\n      starPhysicsBody.mesh = star\n      starPhysicsBody.collected = false\n      this.physicsEngine.addRigidBody(starPhysicsBody)\n\n      // Add enhanced rotation animation and floating effect\n      star.userData = {\n        rotationSpeed: 0.02 + Math.random() * 0.02,\n        floatSpeed: 0.01 + Math.random() * 0.01,\n        floatOffset: Math.random() * Math.PI * 2,\n        originalY: position.y,\n        physicsBody: starPhysicsBody,\n        rotationAxis: new THREE.Vector3(\n          Math.random() - 0.5,\n          Math.random() - 0.5,\n          Math.random() - 0.5\n        ).normalize(),\n      }\n\n      this.stars.push({ mesh: star, physicsBody: starPhysicsBody })\n      this.scene.add(star)\n    }\n\n    console.log(`â¨ Created ${this.stars.length} sample stars`)\n  }\n\n  setupEventListeners() {\n    // Handle window resize\n    window.addEventListener('resize', () => this.onWindowResize(), {\n      passive: true,\n    })\n\n    // Enhanced input handling\n    window.addEventListener('keydown', event => this.onKeyDown(event))\n    window.addEventListener('keyup', event => this.onKeyUp(event))\n\n    // Touch controls for mobile\n    if (this.isMobile) {\n      this.setupTouchControls()\n    }\n\n    // Settings modal functionality\n    this.setupSettingsModal()\n  }\n\n  onKeyDown(event) {\n    // Initialize audio on first user interaction\n    this.tryInitializeAudio()\n\n    switch (event.code) {\n      case 'ArrowUp':\n      case 'KeyW':\n        this.inputState.keys.forward = true\n        break\n      case 'ArrowDown':\n      case 'KeyS':\n        this.inputState.keys.backward = true\n        break\n      case 'ArrowLeft':\n      case 'KeyA':\n        this.inputState.keys.left = true\n        break\n      case 'ArrowRight':\n      case 'KeyD':\n        this.inputState.keys.right = true\n        break\n      case 'Space':\n        this.inputState.keys.up = true\n        event.preventDefault()\n        break\n      case 'ShiftLeft':\n        this.inputState.keys.down = true\n        break\n    }\n  }\n\n  onKeyUp(event) {\n    switch (event.code) {\n      case 'ArrowUp':\n      case 'KeyW':\n        this.inputState.keys.forward = false\n        break\n      case 'ArrowDown':\n      case 'KeyS':\n        this.inputState.keys.backward = false\n        break\n      case 'ArrowLeft':\n      case 'KeyA':\n        this.inputState.keys.left = false\n        break\n      case 'ArrowRight':\n      case 'KeyD':\n        this.inputState.keys.right = false\n        break\n      case 'Space':\n        this.inputState.keys.up = false\n        break\n      case 'ShiftLeft':\n        this.inputState.keys.down = false\n        break\n    }\n  }\n\n  setupTouchControls() {\n    // Setup virtual joystick\n    this.setupVirtualJoystick()\n\n    // Setup camera joystick\n    this.setupCameraJoystick()\n\n    // Setup mobile action buttons\n    this.setupMobileButtons()\n\n    // Touch control state for general canvas interactions\n    this.touchState = {\n      startX: 0,\n      startY: 0,\n      currentX: 0,\n      currentY: 0,\n      isActive: false,\n    }\n\n    // General canvas touch events (for swipe gestures)\n    this.canvas.addEventListener('touchstart', event => {\n      event.preventDefault()\n\n      // Initialize audio on first touch\n      this.tryInitializeAudio()\n\n      if (event.touches.length > 0) {\n        const touch = event.touches[0]\n        this.touchState.startX = touch.clientX\n        this.touchState.startY = touch.clientY\n        this.touchState.currentX = touch.clientX\n        this.touchState.currentY = touch.clientY\n        this.touchState.isActive = true\n      }\n    })\n\n    this.canvas.addEventListener('touchmove', event => {\n      event.preventDefault()\n      if (event.touches.length > 0 && this.touchState.isActive) {\n        const touch = event.touches[0]\n        this.touchState.currentX = touch.clientX\n        this.touchState.currentY = touch.clientY\n\n        // Calculate movement delta for swipe gestures\n        const deltaX = this.touchState.currentX - this.touchState.startX\n        const deltaY = this.touchState.currentY - this.touchState.startY\n\n        // Apply gentle swipe-based movement (subtle effect)\n        const moveSpeed = 0.05\n        const sensitivity = 3\n\n        if (Math.abs(deltaX) > 20) {\n          this.player.position.x += (deltaX / sensitivity) * moveSpeed * 0.01\n        }\n\n        if (Math.abs(deltaY) > 20) {\n          this.player.position.z += (deltaY / sensitivity) * moveSpeed * 0.01\n        }\n\n        this.updateCamera()\n      }\n    })\n\n    this.canvas.addEventListener('touchend', event => {\n      event.preventDefault()\n      this.touchState.isActive = false\n    })\n\n    this.canvas.addEventListener('touchcancel', event => {\n      event.preventDefault()\n      this.touchState.isActive = false\n    })\n  }\n\n  setupVirtualJoystick() {\n    const joystick = document.getElementById('virtualJoystick')\n    const knob = document.getElementById('joystickKnob')\n\n    if (!joystick || !knob) {\n      return\n    }\n\n    const joystickState = {\n      isActive: false,\n      centerX: 0,\n      centerY: 0,\n      currentX: 0,\n      currentY: 0,\n    }\n\n    joystick.addEventListener('touchstart', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.touches.length > 0) {\n        const touch = event.touches[0]\n        const rect = joystick.getBoundingClientRect()\n\n        joystickState.isActive = true\n        joystickState.centerX = rect.left + rect.width / 2\n        joystickState.centerY = rect.top + rect.height / 2\n        joystickState.currentX = touch.clientX\n        joystickState.currentY = touch.clientY\n\n        // Visual feedback - highlight joystick when active\n        joystick.style.borderColor = 'rgba(255, 255, 255, 0.6)'\n        joystick.style.background = 'rgba(0, 17, 34, 0.7)'\n\n        this.updateJoystickKnob(knob, joystickState, rect)\n      }\n    })\n\n    joystick.addEventListener('touchmove', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.touches.length > 0 && joystickState.isActive) {\n        const touch = event.touches[0]\n        const rect = joystick.getBoundingClientRect()\n\n        joystickState.currentX = touch.clientX\n        joystickState.currentY = touch.clientY\n\n        // Calculate movement vector\n        const deltaX = joystickState.currentX - joystickState.centerX\n        const deltaY = joystickState.currentY - joystickState.centerY\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n        const maxDistance = rect.width / 2 - 20\n\n        // Normalize and apply movement\n        if (distance > 5) {\n          const normalizedX = deltaX / maxDistance\n          const normalizedY = deltaY / maxDistance\n\n          // Update input state with improved sensitivity for mobile\n          this.inputState.joystick.x = Math.max(\n            -1,\n            Math.min(1, normalizedX * 1.2)\n          )\n          this.inputState.joystick.y = Math.max(\n            -1,\n            Math.min(1, normalizedY * 1.2)\n          )\n        } else {\n          this.inputState.joystick.x = 0\n          this.inputState.joystick.y = 0\n        }\n\n        this.updateJoystickKnob(knob, joystickState, rect)\n      }\n    })\n\n    joystick.addEventListener('touchend', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      joystickState.isActive = false\n      this.inputState.joystick.x = 0\n      this.inputState.joystick.y = 0\n\n      // Reset visual feedback\n      joystick.style.borderColor = 'rgba(255, 255, 255, 0.3)'\n      joystick.style.background = 'rgba(0, 17, 34, 0.5)'\n      knob.style.transform = 'translate(-50%, -50%)'\n    })\n\n    joystick.addEventListener('touchcancel', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      joystickState.isActive = false\n      this.inputState.joystick.x = 0\n      this.inputState.joystick.y = 0\n\n      // Reset visual feedback\n      joystick.style.borderColor = 'rgba(255, 255, 255, 0.3)'\n      joystick.style.background = 'rgba(0, 17, 34, 0.5)'\n      knob.style.transform = 'translate(-50%, -50%)'\n    })\n  }\n\n  setupCameraJoystick() {\n    const cameraJoystick = document.getElementById('cameraJoystick')\n    const cameraKnob = document.getElementById('cameraKnob')\n\n    if (!cameraJoystick || !cameraKnob) {\n      return\n    }\n\n    const cameraJoystickState = {\n      isActive: false,\n      centerX: 0,\n      centerY: 0,\n      currentX: 0,\n      currentY: 0,\n    }\n\n    cameraJoystick.addEventListener('touchstart', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.touches.length > 0) {\n        const touch = event.touches[0]\n        const rect = cameraJoystick.getBoundingClientRect()\n\n        cameraJoystickState.isActive = true\n        cameraJoystickState.centerX = rect.left + rect.width / 2\n        cameraJoystickState.centerY = rect.top + rect.height / 2\n        cameraJoystickState.currentX = touch.clientX\n        cameraJoystickState.currentY = touch.clientY\n\n        // Visual feedback - highlight camera joystick when active\n        cameraJoystick.style.borderColor = 'rgba(255, 200, 100, 0.6)'\n        cameraJoystick.style.background = 'rgba(0, 17, 34, 0.7)'\n\n        this.updateCameraJoystickKnob(cameraKnob, cameraJoystickState, rect)\n      }\n    })\n\n    cameraJoystick.addEventListener('touchmove', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      if (event.touches.length > 0 && cameraJoystickState.isActive) {\n        const touch = event.touches[0]\n        const rect = cameraJoystick.getBoundingClientRect()\n\n        cameraJoystickState.currentX = touch.clientX\n        cameraJoystickState.currentY = touch.clientY\n\n        // Calculate camera rotation vector\n        const deltaX =\n          cameraJoystickState.currentX - cameraJoystickState.centerX\n        const deltaY =\n          cameraJoystickState.currentY - cameraJoystickState.centerY\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n        const maxDistance = rect.width / 2 - 20\n\n        // Normalize and apply camera rotation\n        if (distance > 5) {\n          const normalizedX = deltaX / maxDistance\n          const normalizedY = deltaY / maxDistance\n\n          // Update camera input state\n          this.inputState.cameraJoystick.x = Math.max(\n            -1,\n            Math.min(1, normalizedX * 1.5)\n          )\n          this.inputState.cameraJoystick.y = Math.max(\n            -1,\n            Math.min(1, normalizedY * 1.5)\n          )\n        } else {\n          this.inputState.cameraJoystick.x = 0\n          this.inputState.cameraJoystick.y = 0\n        }\n\n        this.updateCameraJoystickKnob(cameraKnob, cameraJoystickState, rect)\n      }\n    })\n\n    cameraJoystick.addEventListener('touchend', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      cameraJoystickState.isActive = false\n      this.inputState.cameraJoystick.x = 0\n      this.inputState.cameraJoystick.y = 0\n\n      // Reset visual feedback\n      cameraJoystick.style.borderColor = 'rgba(255, 255, 255, 0.3)'\n      cameraJoystick.style.background = 'rgba(0, 17, 34, 0.5)'\n      cameraKnob.style.transform = 'translate(-50%, -50%)'\n    })\n\n    cameraJoystick.addEventListener('touchcancel', event => {\n      event.preventDefault()\n      event.stopPropagation()\n\n      cameraJoystickState.isActive = false\n      this.inputState.cameraJoystick.x = 0\n      this.inputState.cameraJoystick.y = 0\n\n      // Reset visual feedback\n      cameraJoystick.style.borderColor = 'rgba(255, 255, 255, 0.3)'\n      cameraJoystick.style.background = 'rgba(0, 17, 34, 0.5)'\n      cameraKnob.style.transform = 'translate(-50%, -50%)'\n    })\n  }\n\n  updateJoystickKnob(knob, joystickState, rect) {\n    const deltaX = joystickState.currentX - joystickState.centerX\n    const deltaY = joystickState.currentY - joystickState.centerY\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n    const maxDistance = rect.width / 2 - 20\n\n    if (distance <= maxDistance) {\n      knob.style.transform = `translate(calc(-50% + ${deltaX}px), calc(-50% + ${deltaY}px))`\n    } else {\n      const angle = Math.atan2(deltaY, deltaX)\n      const x = Math.cos(angle) * maxDistance\n      const y = Math.sin(angle) * maxDistance\n      knob.style.transform = `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`\n    }\n  }\n\n  updateCameraJoystickKnob(knob, cameraJoystickState, rect) {\n    const deltaX = cameraJoystickState.currentX - cameraJoystickState.centerX\n    const deltaY = cameraJoystickState.currentY - cameraJoystickState.centerY\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n    const maxDistance = rect.width / 2 - 20\n\n    if (distance <= maxDistance) {\n      knob.style.transform = `translate(calc(-50% + ${deltaX}px), calc(-50% + ${deltaY}px))`\n    } else {\n      const angle = Math.atan2(deltaY, deltaX)\n      const x = Math.cos(angle) * maxDistance\n      const y = Math.sin(angle) * maxDistance\n      knob.style.transform = `translate(calc(-50% + ${x}px), calc(-50% + ${y}px))`\n    }\n  }\n\n  setupMobileButtons() {\n    const swimUpBtn = document.getElementById('swimUpBtn')\n    const swimDownBtn = document.getElementById('swimDownBtn')\n\n    if (swimUpBtn) {\n      // Add more responsive event handling\n      swimUpBtn.addEventListener('touchstart', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimUp = true\n        swimUpBtn.style.background = 'rgba(255, 255, 255, 0.4)'\n      })\n\n      swimUpBtn.addEventListener('touchend', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimUp = false\n        swimUpBtn.style.background = 'rgba(0, 17, 34, 0.6)'\n      })\n\n      swimUpBtn.addEventListener('touchcancel', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimUp = false\n        swimUpBtn.style.background = 'rgba(0, 17, 34, 0.6)'\n      })\n    }\n\n    if (swimDownBtn) {\n      // Add more responsive event handling\n      swimDownBtn.addEventListener('touchstart', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimDown = true\n        swimDownBtn.style.background = 'rgba(255, 255, 255, 0.4)'\n      })\n\n      swimDownBtn.addEventListener('touchend', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimDown = false\n        swimDownBtn.style.background = 'rgba(0, 17, 34, 0.6)'\n      })\n\n      swimDownBtn.addEventListener('touchcancel', event => {\n        event.preventDefault()\n        event.stopPropagation()\n        this.inputState.mobileButtons.swimDown = false\n        swimDownBtn.style.background = 'rgba(0, 17, 34, 0.6)'\n      })\n    }\n  }\n\n  setupSettingsModal() {\n    const settingsButton = document.getElementById('settingsButton')\n    const settingsModal = document.getElementById('settingsModal')\n    const closeSettings = document.getElementById('closeSettings')\n\n    if (settingsButton && settingsModal && closeSettings) {\n      // Open settings\n      const openSettings = event => {\n        if (event) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n        settingsModal.classList.remove('hidden')\n        // Prevent body scrolling when modal is open\n        document.body.style.overflow = 'hidden'\n\n        // Update sliders with current audio values\n        this.updateAudioSliders()\n      }\n\n      // Close settings\n      const closeModal = event => {\n        if (event) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n        settingsModal.classList.add('hidden')\n        // Restore body scrolling\n        document.body.style.overflow = ''\n      }\n\n      // Simple event handling - click events work on both desktop and mobile\n      settingsButton.addEventListener('click', openSettings)\n      closeSettings.addEventListener('click', closeModal)\n\n      // Close on background click - simplified and more reliable detection\n      settingsModal.addEventListener('click', event => {\n        // Check if the click target is the modal background itself (not a child element)\n        if (event.target === settingsModal) {\n          closeModal(event)\n        }\n      })\n\n      // Close on escape key\n      document.addEventListener('keydown', event => {\n        if (\n          event.key === 'Escape' &&\n          !settingsModal.classList.contains('hidden')\n        ) {\n          closeModal()\n        }\n      })\n    }\n\n    // Setup audio controls\n    this.setupAudioControls()\n    \n    // Setup PWA install functionality\n    this.setupPWAInstall()\n  }\n\n  setupAudioControls() {\n    const masterVolumeSlider = document.getElementById('masterVolumeSlider')\n    const musicVolumeSlider = document.getElementById('musicVolumeSlider')\n    const sfxVolumeSlider = document.getElementById('sfxVolumeSlider')\n\n    const masterVolumeValue = document.getElementById('masterVolumeValue')\n    const musicVolumeValue = document.getElementById('musicVolumeValue')\n    const sfxVolumeValue = document.getElementById('sfxVolumeValue')\n\n    if (masterVolumeSlider && this.audioEngine) {\n      masterVolumeSlider.addEventListener('input', event => {\n        const volume = parseInt(event.target.value) / 100\n        this.audioEngine.setMasterVolume(volume)\n        if (masterVolumeValue) {\n          masterVolumeValue.textContent = `${event.target.value}%`\n        }\n      })\n    }\n\n    if (musicVolumeSlider && this.audioEngine) {\n      musicVolumeSlider.addEventListener('input', event => {\n        const volume = parseInt(event.target.value) / 100\n        this.audioEngine.setMusicVolume(volume)\n        if (musicVolumeValue) {\n          musicVolumeValue.textContent = `${event.target.value}%`\n        }\n      })\n    }\n\n    if (sfxVolumeSlider && this.audioEngine) {\n      sfxVolumeSlider.addEventListener('input', event => {\n        const volume = parseInt(event.target.value) / 100\n        this.audioEngine.setSfxVolume(volume)\n        if (sfxVolumeValue) {\n          sfxVolumeValue.textContent = `${event.target.value}%`\n        }\n      })\n    }\n  }\n\n  updateAudioSliders() {\n    if (!this.audioEngine) {\n      return\n    }\n\n    const state = this.audioEngine.getState()\n\n    const masterVolumeSlider = document.getElementById('masterVolumeSlider')\n    const musicVolumeSlider = document.getElementById('musicVolumeSlider')\n    const sfxVolumeSlider = document.getElementById('sfxVolumeSlider')\n\n    const masterVolumeValue = document.getElementById('masterVolumeValue')\n    const musicVolumeValue = document.getElementById('musicVolumeValue')\n    const sfxVolumeValue = document.getElementById('sfxVolumeValue')\n\n    if (masterVolumeSlider) {\n      const value = Math.round(state.masterVolume * 100)\n      masterVolumeSlider.value = value\n      if (masterVolumeValue) {\n        masterVolumeValue.textContent = `${value}%`\n      }\n    }\n\n    if (musicVolumeSlider) {\n      const value = Math.round(state.musicVolume * 100)\n      musicVolumeSlider.value = value\n      if (musicVolumeValue) {\n        musicVolumeValue.textContent = `${value}%`\n      }\n    }\n\n    if (sfxVolumeSlider) {\n      const value = Math.round(state.sfxVolume * 100)\n      sfxVolumeSlider.value = value\n      if (sfxVolumeValue) {\n        sfxVolumeValue.textContent = `${value}%`\n      }\n    }\n  }\n\n  setupPWAInstall() {\n    const installButton = document.getElementById('installButton')\n    const installStatus = document.getElementById('installStatus')\n    \n    // Store the beforeinstallprompt event for later use\n    let deferredPrompt = null\n    \n    // Listen for the beforeinstallprompt event\n    window.addEventListener('beforeinstallprompt', event => {\n      console.log('ð± PWA install prompt available')\n      // Prevent the mini-infobar from appearing on mobile\n      event.preventDefault()\n      // Store the event so it can be triggered later\n      deferredPrompt = event\n      \n      // Show the install button\n      if (installButton) {\n        installButton.classList.remove('hidden')\n      }\n      if (installStatus) {\n        installStatus.classList.add('hidden')\n      }\n    })\n    \n    // Handle install button click\n    if (installButton) {\n      installButton.addEventListener('click', async () => {\n        if (!deferredPrompt) {\n          console.log('ð± No install prompt available')\n          return\n        }\n        \n        // Show the install prompt\n        deferredPrompt.prompt()\n        \n        // Wait for the user to respond to the prompt\n        const { outcome } = await deferredPrompt.userChoice\n        \n        if (outcome === 'accepted') {\n          console.log('ð± User accepted the install prompt')\n          installButton.textContent = 'â App Installing...'\n          installButton.disabled = true\n        } else {\n          console.log('ð± User dismissed the install prompt')\n        }\n        \n        // Clear the deferred prompt since it can only be used once\n        deferredPrompt = null\n        installButton.classList.add('hidden')\n      })\n    }\n    \n    // Listen for successful app installation\n    window.addEventListener('appinstalled', () => {\n      console.log('ð± PWA was installed successfully')\n      if (installButton) {\n        installButton.classList.add('hidden')\n      }\n      if (installStatus) {\n        installStatus.textContent = 'â App installed successfully!'\n        installStatus.classList.remove('hidden')\n      }\n      // Clear the deferred prompt\n      deferredPrompt = null\n    })\n    \n    // Check if app is already installed or running in standalone mode\n    if (window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone) {\n      console.log('ð± PWA is already running in standalone mode')\n      if (installButton) {\n        installButton.classList.add('hidden')\n      }\n      if (installStatus) {\n        installStatus.textContent = 'â App is already installed!'\n        installStatus.classList.remove('hidden')\n      }\n    } else {\n      // Show fallback message if install prompt is not available after a delay\n      setTimeout(() => {\n        if (!deferredPrompt && installButton && installButton.classList.contains('hidden')) {\n          if (installStatus) {\n            installStatus.textContent = 'App installation not available in this browser. Try Chrome, Edge, or Safari.'\n            installStatus.classList.remove('hidden')\n          }\n        }\n      }, 2000)\n    }\n  }\n\n  onWindowResize() {\n    this.camera.aspect = window.innerWidth / window.innerHeight\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(window.innerWidth, window.innerHeight)\n  }\n\n  updateCamera(deltaTime = 0.016) {\n    const playerPosition = this.player.getPosition()\n\n    // Apply camera joystick rotation if active\n    if (\n      this.inputState.cameraJoystick.x !== 0 ||\n      this.inputState.cameraJoystick.y !== 0\n    ) {\n      // Update camera rotation based on joystick input with delta time\n      this.cameraRotation.horizontal +=\n        this.inputState.cameraJoystick.x *\n        this.cameraRotation.sensitivity *\n        (60 * deltaTime) // Frame rate independent\n      this.cameraRotation.vertical +=\n        this.inputState.cameraJoystick.y *\n        this.cameraRotation.sensitivity *\n        (60 * deltaTime)\n\n      // Clamp vertical rotation to allow upward viewing of waves while preventing flipping\n      this.cameraRotation.vertical = Math.max(\n        -Math.PI / 6, // Allow looking down 30Â°\n        Math.min(Math.PI / 2, this.cameraRotation.vertical) // Allow looking up 90Â° to see waves\n      )\n    }\n\n    // Calculate camera position based on rotation and depth\n    const distance = 15 // Distance from player\n    const baseHeight = 12 // Base height offset\n\n    // Adjust height offset based on player depth for better wave visibility\n    const playerDepth = 5.0 - playerPosition.y // Water surface at Y=5\n    const depthAdjustment = Math.min(3, Math.max(0, playerDepth - 10) * 0.3) // Increase height when deeper than 10m\n    const height = baseHeight + depthAdjustment\n\n    // Apply rotation to calculate offset\n    const offsetX = Math.sin(this.cameraRotation.horizontal) * distance\n    const offsetZ = Math.cos(this.cameraRotation.horizontal) * distance\n    const offsetY =\n      height + Math.sin(this.cameraRotation.vertical) * distance * 0.5\n\n    const offset = new THREE.Vector3(offsetX, offsetY, offsetZ)\n    const targetPosition = playerPosition.clone().add(offset)\n\n    // Adaptive camera smoothing for better large screen experience\n    // Base smoothing factor adjusted for frame rate and screen size\n    const baseSmoothingFactor = 0.12 // Slightly increased for smoother movement\n\n    // Screen size factor: larger screens get smoother camera movement\n    // Mobile devices get more conservative smoothing for better control\n    let screenSizeFactor\n    if (this.isMobile) {\n      // More conservative smoothing on mobile for better control\n      screenSizeFactor = Math.min(0.8, Math.max(0.5, window.innerWidth / 1920))\n    } else {\n      // Enhanced smoothing for large screens to reduce jerkiness during direction changes\n      screenSizeFactor = Math.min(2.0, Math.max(1.0, window.innerWidth / 1920))\n    }\n\n    // Frame rate compensation: maintain consistent smoothing regardless of FPS\n    const frameRateCompensation = deltaTime * 60 // Target 60fps equivalent\n\n    // Player movement responsiveness: more responsive when changing direction\n    let movementResponsiveness = 1.0\n    if (this.player && this.player.isMoving) {\n      // Check if player direction changed recently for extra responsiveness\n      const currentMovementDirection = this.player.movementVector\n        .clone()\n        .normalize()\n      if (this.previousMovementDirection) {\n        const directionChange =\n          1 - currentMovementDirection.dot(this.previousMovementDirection)\n        movementResponsiveness = 1.0 + directionChange * 0.8 // Up to 80% more responsive when changing direction\n      }\n      this.previousMovementDirection = currentMovementDirection.clone()\n    } else {\n      this.previousMovementDirection = null\n    }\n\n    // Calculate final smoothing factor\n    const adaptiveSmoothingFactor = Math.min(\n      1.0,\n      baseSmoothingFactor *\n        screenSizeFactor *\n        frameRateCompensation *\n        movementResponsiveness\n    )\n\n    // Smooth camera movement with adaptive factor\n    this.camera.position.lerp(targetPosition, adaptiveSmoothingFactor)\n\n    // Improved camera look direction to account for player movement direction\n    const lookAtTarget = playerPosition.clone()\n\n    // If player is moving, adjust camera to look in the direction of movement\n    if (this.player && this.player.isMoving) {\n      const movementDirection = this.player.movementVector.clone().normalize()\n      // Add movement direction influence to look target for better head direction awareness\n      lookAtTarget.add(movementDirection.multiplyScalar(2))\n      lookAtTarget.y += 1 // Less vertical offset when moving to see movement direction better\n    } else {\n      lookAtTarget.y += 2 // Look slightly above the player when stationary\n    }\n\n    this.camera.lookAt(lookAtTarget)\n  }\n\n  startGameLoop() {\n    const animate = currentTime => {\n      requestAnimationFrame(animate)\n\n      // Calculate delta time\n      const deltaTime =\n        this.lastTime > 0 ? (currentTime - this.lastTime) / 1000 : 0.016\n      this.lastTime = currentTime\n\n      this.update(deltaTime)\n      this.render()\n    }\n    animate(0)\n  }\n\n  /**\n   * Calculate Gerstner wave displacement for realistic ocean waves\n   * @param {number} x - X coordinate\n   * @param {number} z - Z coordinate\n   * @param {number} time - Current time\n   * @param {Object} wave - Wave parameters {amplitude, frequency, speed, direction, steepness}\n   * @returns {Object} - {x, y, z} displacement\n   */\n  calculateGerstnerWave(x, z, time, wave) {\n    // Normalize direction vector\n    const dirLength = Math.sqrt(wave.direction.x ** 2 + wave.direction.z ** 2)\n    const dirX = wave.direction.x / dirLength\n    const dirZ = wave.direction.z / dirLength\n\n    // Calculate wave phase\n    const phase = (dirX * x + dirZ * z) * wave.frequency + time * wave.speed\n    const sinPhase = Math.sin(phase)\n    const cosPhase = Math.cos(phase)\n\n    // Gerstner wave equations for realistic ocean movement\n    const steepnessFactor = wave.steepness / wave.frequency\n\n    return {\n      x: steepnessFactor * dirX * sinPhase * wave.amplitude,\n      y: cosPhase * wave.amplitude,\n      z: steepnessFactor * dirZ * sinPhase * wave.amplitude,\n    }\n  }\n\n  update(deltaTime) {\n    if (!this.isLoaded) {\n      return\n    }\n\n    // Clamp delta time to prevent large jumps\n    deltaTime = Math.min(deltaTime, 0.033) // Max 30fps equivalent\n\n    // Update physics engine\n    this.physicsEngine.update(deltaTime)\n\n    // Update player with input and check for movement sounds\n    const previousPosition = this.player.getPosition().clone()\n    this.player.handleInput(this.inputState)\n    this.player.update()\n\n    // Play swimming sounds when player is moving\n    if (this.audioEngine && this.audioEngine.isInitialized) {\n      const currentPosition = this.player.getPosition()\n      const movementDistance = previousPosition.distanceTo(currentPosition)\n\n      // Play swimming sound if moving fast enough\n      if (movementDistance > 0.01) {\n        // Only play swimming sound occasionally to avoid spam\n        if (Math.random() < 0.05) {\n          // 5% chance per frame when moving\n          this.audioEngine.playSound('swimming', currentPosition)\n        }\n      }\n    }\n\n    // Update particle system\n    this.particleSystem.update(deltaTime)\n\n    // Update gate animations\n    if (this.gate) {\n      this.gate.update(deltaTime)\n    }\n\n    // Update audio system\n    if (this.audioEngine && this.audioEngine.isInitialized) {\n      const playerPos = this.player.getPosition()\n      const forward = this.camera.getWorldDirection(new THREE.Vector3())\n      const up = this.camera.up\n      this.audioEngine.updateListenerPosition(playerPos, forward, up)\n    }\n\n    // Update camera with delta time for smooth interpolation\n    this.updateCamera(deltaTime)\n\n    // Update underwater atmosphere effects based on camera position\n    this.updateUnderwaterAtmosphere()\n\n    // Update UI (including depth meter)\n    this.updateUI()\n\n    // Animate stars with enhanced floating and rotation effects\n    this.stars.forEach(starData => {\n      const star = starData.mesh\n      const userData = star.userData\n\n      // Enhanced rotation animation using the custom rotation axis\n      if (userData.rotationAxis) {\n        star.rotateOnAxis(userData.rotationAxis, userData.rotationSpeed)\n      } else {\n        // Fallback rotation\n        star.rotation.y += userData.rotationSpeed\n        star.rotation.x += userData.rotationSpeed * 0.5\n      }\n\n      // Floating animation\n      const time = Date.now() * 0.001\n      const floatY =\n        userData.originalY +\n        Math.sin(time * userData.floatSpeed + userData.floatOffset) * 0.3\n      star.position.y = floatY\n\n      // Enhanced pulsing emissive effect with more dramatic variation\n      const pulseFactor = 0.5 + Math.sin(time * 2 + userData.floatOffset) * 0.3\n      star.material.emissiveIntensity = pulseFactor\n    })\n\n    // Animate environment objects (swaying seaweed and kelp)\n    this.environmentObjects.forEach(envObject => {\n      const mesh = envObject.mesh\n      if (mesh.userData.swaySpeed && mesh.userData.swayAmount) {\n        const time = Date.now() * 0.001\n        const swayX =\n          Math.sin(time * mesh.userData.swaySpeed) * mesh.userData.swayAmount\n        const swayZ =\n          Math.cos(time * mesh.userData.swaySpeed * 0.7) *\n          mesh.userData.swayAmount *\n          0.5\n        mesh.rotation.x = swayX\n        mesh.rotation.z = swayZ\n      }\n    })\n\n    // Animate sea creatures\n    this.seaCreatures.forEach(creature => {\n      const userData = creature.userData\n      const time = Date.now() * 0.001\n\n      // Update swimming angle\n      userData.swimAngle += userData.swimSpeed * deltaTime\n\n      // Calculate circular swimming path\n      const swimX =\n        userData.swimCenter.x +\n        Math.cos(userData.swimAngle) * userData.swimRadius\n      const swimZ =\n        userData.swimCenter.z +\n        Math.sin(userData.swimAngle) * userData.swimRadius\n      const swimY =\n        userData.swimCenter.y + Math.sin(time + userData.bobOffset) * 0.5 // Gentle vertical bobbing\n\n      creature.position.set(swimX, swimY, swimZ)\n\n      // Face swimming direction\n      const directionAngle = userData.swimAngle + Math.PI / 2\n      creature.rotation.y = directionAngle\n\n      // Add specific animations based on creature type\n      if (userData.creatureType === 'jellyfish') {\n        // Animate jellyfish tentacles\n        creature.children.forEach(child => {\n          if (child.userData.tentacleIndex !== undefined) {\n            const tentacleWave =\n              Math.sin(time * 3 + child.userData.tentacleIndex) * 0.3\n            child.rotation.x = tentacleWave\n            child.rotation.z =\n              Math.sin(time * 2 + child.userData.tentacleIndex) * 0.2\n          }\n        })\n\n        // Pulse the dome\n        const pulseScale = 1 + Math.sin(time * 2) * 0.1\n        if (creature.children[0]) {\n          creature.children[0].scale.setScalar(pulseScale)\n        }\n      } else if (userData.creatureType === 'fish') {\n        // Animate fish tail wagging\n        if (creature.children[1]) {\n          // Tail is usually second child\n          creature.children[1].rotation.y = Math.sin(time * 8) * 0.3\n        }\n\n        // Animate side fins\n        creature.children.forEach((child, index) => {\n          if (index > 1) {\n            // Side fins\n            child.rotation.z =\n              child.rotation.z + Math.sin(time * 6 + index) * 0.1\n          }\n        })\n      } else if (userData.creatureType === 'seahorse') {\n        // Animate dorsal fin\n        creature.children.forEach(child => {\n          if (child.geometry && child.geometry.type === 'PlaneGeometry') {\n            child.rotation.z = Math.sin(time * 5) * 0.2\n          }\n        })\n      }\n    })\n\n    // Get current time for all animations\n    const time = Date.now() * 0.001\n\n    // Realistic wave animation system for wave surface only (water surface temporarily disabled)\n    // if (this.waterSurface && this.waterOriginalPositions && this.waveParams) {\n    //   const positions = this.waterSurface.geometry.attributes.position.array\n    //   const time = Date.now() * 0.001\n\n    //   // Apply realistic wave motion to underwater water surface\n    //   for (let i = 0; i < positions.length; i += 3) {\n    //     const x = this.waterOriginalPositions[i]\n    //     const z = this.waterOriginalPositions[i + 2]\n\n    //     // Multi-layered wave system for realistic ocean movement\n    //     const wave1 =\n    //       Math.sin(\n    //         x * this.waveParams.frequency + time * this.waveParams.speed\n    //       ) * this.waveParams.amplitude\n    //     const wave2 =\n    //       Math.sin(\n    //         z * this.waveParams.frequency * 0.7 +\n    //           time * this.waveParams.speed * 0.8\n    //       ) *\n    //       this.waveParams.amplitude *\n    //       0.6\n    //     const wave3 =\n    //       Math.sin(\n    //         (x + z) * this.waveParams.frequency * 1.3 +\n    //           time * this.waveParams.speed * 1.2\n    //       ) *\n    //       this.waveParams.amplitude *\n    //       0.4\n\n    //     const waveHeight = wave1 + wave2 + wave3\n\n    //     positions[i] = x\n    //     positions[i + 1] = waveHeight\n    //     positions[i + 2] = z\n    //   }\n    //   this.waterSurface.geometry.attributes.position.needsUpdate = true\n    // }\n\n    // Animate the visible wave surface at Y=5.0\n    if (this.waveSurface && this.waveOriginalPositions) {\n      const time = Date.now() * 0.001 // Declare time here since it's not declared above anymore\n      const wavePositions = this.waveSurface.geometry.attributes.position.array\n      let maxHeight = 0\n      let minHeight = 0\n      for (let i = 0; i < wavePositions.length; i += 3) {\n        const x = this.waveOriginalPositions[i]\n        const z = this.waveOriginalPositions[i + 2]\n\n        // Same wave pattern but with enhanced visibility\n        const wave1 =\n          Math.sin(\n            x * this.waveParams.frequency + time * this.waveParams.speed\n          ) * this.waveParams.amplitude\n        const wave2 =\n          Math.sin(\n            z * this.waveParams.frequency * 0.7 +\n              time * this.waveParams.speed * 0.8\n          ) *\n          this.waveParams.amplitude *\n          0.6\n        const wave3 =\n          Math.sin(\n            (x + z) * this.waveParams.frequency * 1.3 +\n              time * this.waveParams.speed * 1.2\n          ) *\n          this.waveParams.amplitude *\n          0.4\n\n        const waveHeight = wave1 + wave2 + wave3\n        maxHeight = Math.max(maxHeight, waveHeight)\n        minHeight = Math.min(minHeight, waveHeight)\n\n        wavePositions[i] = x\n        wavePositions[i + 1] = waveHeight\n        wavePositions[i + 2] = z\n      }\n      this.waveSurface.geometry.attributes.position.needsUpdate = true\n    }\n    // }\n\n    // Animate foam surface to show wave crests (simplified)\n    if (this.foamSurface && this.foamOriginalPositions) {\n      const foamPositions = this.foamSurface.geometry.attributes.position.array\n\n      // Apply simple foam effects\n      for (let i = 0; i < foamPositions.length; i += 3) {\n        const x = this.foamOriginalPositions[i]\n        const z = this.foamOriginalPositions[i + 2]\n\n        // Calculate simple wave height for foam\n        const waveHeight =\n          Math.sin(x * 0.1 + time * 2) * 3.0 +\n          Math.sin(z * 0.15 + time * 1.5) * 2.0\n\n        // Show foam on wave crests\n        const foamThreshold = 1.5\n        if (waveHeight > foamThreshold) {\n          foamPositions[i + 1] = waveHeight + 0.2 // Slightly above water\n          this.foamSurface.material.opacity = Math.min(\n            0.6,\n            (waveHeight - foamThreshold) * 0.3\n          )\n        } else {\n          foamPositions[i + 1] = -10 // Hide foam below surface\n        }\n      }\n\n      this.foamSurface.geometry.attributes.position.needsUpdate = true\n    }\n\n    // Animate clouds drifting across the sky\n    if (this.clouds) {\n      this.clouds.forEach(cloudGroup => {\n        const userData = cloudGroup.userData\n        const animationTime = time * userData.speed + userData.offset\n\n        // Gentle drift movement for the entire cloud group\n        cloudGroup.position.x =\n          userData.originalPosition.x + Math.sin(animationTime) * 3\n        cloudGroup.position.z =\n          userData.originalPosition.z + Math.cos(animationTime * 0.7) * 2\n\n        // Animate individual spheres within each cloud group\n        cloudGroup.children.forEach((sphere, index) => {\n          // Individual sphere rotation for cloud movement effect\n          sphere.rotation.y += 0.002 + index * 0.001\n\n          // Subtle opacity variation for depth effect\n          const baseOpacity = sphere.material.opacity || 0.8\n          sphere.material.opacity = Math.max(\n            0.6,\n            baseOpacity + Math.sin(animationTime * 2 + index) * 0.1\n          )\n        })\n      })\n    }\n\n    // Animate celestial body (sun/moon) movement across sky\n    if (this.celestialBody && this.celestialBody.userData) {\n      const userData = this.celestialBody.userData\n      const animationTime = time * userData.animationSpeed\n\n      // Create arc movement across the sky\n      const angleOffset = userData.isEvenLevel ? 0 : Math.PI // Moon starts on opposite side\n      const angle = animationTime + angleOffset\n\n      const x =\n        Math.cos(angle) * userData.animationRadius + userData.originalPosition.x\n      const y = Math.abs(Math.sin(angle)) * 15 + 25 // Keep above horizon\n      const z = userData.originalPosition.z\n\n      this.celestialBody.position.set(x, y, z)\n\n      // Update celestial light position\n      if (this.celestialLight) {\n        this.celestialLight.position.copy(this.celestialBody.position)\n      }\n    }\n\n    // Animate volumetric lights for underwater caustics effect\n    if (this.volumetricLights) {\n      this.volumetricLights.forEach(light => {\n        const userData = light.userData\n        const animationTime =\n          time * userData.animationSpeed + userData.animationOffset\n\n        // Create gentle swaying motion\n        const offsetX = Math.sin(animationTime) * userData.animationRadius\n        const offsetZ = Math.cos(animationTime * 1.3) * userData.animationRadius\n        const offsetY = Math.sin(animationTime * 0.7) * 1\n\n        light.position.x = userData.originalPosition.x + offsetX\n        light.position.y = userData.originalPosition.y + offsetY\n        light.position.z = userData.originalPosition.z + offsetZ\n\n        // Subtle intensity variation for flickering water caustics\n        const intensityVariation = 0.8 + Math.sin(animationTime * 3) * 0.2\n        light.intensity = (this.isMobile ? 0.6 : 0.8) * intensityVariation\n      })\n    }\n\n    // Check star collection using collision detection\n    this.checkStarCollection()\n\n    // Check gate collision\n    this.checkGateCollision()\n  }\n\n  checkStarCollection() {\n    // Get player collisions from physics engine\n    const playerCollisions = this.physicsEngine.collisionSystem.checkCollisions(\n      this.player.physicsBody\n    )\n\n    for (const collision of playerCollisions) {\n      if (collision.type === 'collectible' && !collision.collected) {\n        // Collect star\n        collision.collected = true\n\n        // Find and remove the star from scene and physics\n        const starData = this.stars.find(s => s.physicsBody === collision)\n        if (starData) {\n          // Remove from scene\n          this.scene.remove(starData.mesh)\n\n          // Remove from physics\n          this.physicsEngine.removeRigidBody(starData.physicsBody)\n\n          // Remove from stars array\n          const index = this.stars.indexOf(starData)\n          if (index !== -1) {\n            this.stars.splice(index, 1)\n          }\n\n          // Update game state\n          this.starCount++\n          this.updateUI()\n\n          // Play collection sound\n          if (this.audioEngine) {\n            this.audioEngine.playSound('starCollect', starData.mesh.position)\n          }\n\n          // Create collection effect\n          this.particleSystem.createBurst(starData.mesh.position, {\n            count: 15,\n            life: 1.5,\n            velocity: new THREE.Vector3(0, 2, 0),\n            velocityVariation: new THREE.Vector3(3, 3, 3),\n            color: new THREE.Color(0xffd700),\n            size: { min: 3, max: 8 },\n          })\n\n          console.log(`â­ Star collected! Total: ${this.starCount}`)\n\n          // Check if all stars collected - activate gate\n          if (this.stars.length === 0) {\n            this.activateGate()\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Activate the gate when all stars are collected\n   */\n  activateGate() {\n    if (this.gate && !this.gate.getIsActivated()) {\n      this.gate.activate()\n\n      // Play gate activation sound\n      if (this.audioEngine) {\n        this.audioEngine.playSound('gateActivate', this.gate.getPosition())\n      }\n\n      console.log('ðª Gate activated! Swim through to complete level!')\n    }\n  }\n\n  /**\n   * Check for gate collision and level completion\n   */\n  checkGateCollision() {\n    if (!this.gate || !this.gate.getIsActivated()) {\n      return\n    }\n\n    // Get player collisions from physics engine\n    const playerCollisions = this.physicsEngine.collisionSystem.checkCollisions(\n      this.player.physicsBody\n    )\n\n    for (const collision of playerCollisions) {\n      if (collision.type === 'gate' && collision.gate) {\n        console.log('ð¯ Gate collision detected!')\n        const levelCompleted = collision.gate.onPlayerEnter()\n        if (levelCompleted) {\n          console.log('ð Level completed via gate collision!')\n          this.levelComplete()\n          break\n        }\n      }\n    }\n  }\n\n  levelComplete() {\n    console.log('ð Level Complete!')\n\n    // Add portal transition animation\n    this.startPortalTransition()\n\n    // Play level completion sound\n    if (this.audioEngine) {\n      this.audioEngine.playSound('levelComplete')\n    }\n\n    this.levelNumber++\n\n    // Reset gate for next level\n    if (this.gate) {\n      this.gate.reset()\n    }\n\n    // Reset level with new stars\n    this.createSampleStars()\n    this.updateUI()\n  }\n\n  /**\n   * Start portal transition animation when passing through gate\n   */\n  startPortalTransition() {\n    console.log('ð Starting portal transition...')\n\n    // Create transition effect particles\n    if (this.particleSystem && this.gate) {\n      const gatePosition = this.gate.getPosition()\n\n      // Create swirling portal particles\n      this.particleSystem.createBurst(gatePosition, {\n        count: 50,\n        life: 2.25, // Average of lifetime range (1.5-3)\n        velocity: new THREE.Vector3(0, 1, 0), // Base upward velocity\n        velocityVariation: new THREE.Vector3(6, 4, 6), // Variation for swirling effect\n        size: { min: 4, max: 12 },\n        color: new THREE.Color(0x87ceeb), // Light blue\n      })\n\n      // Create golden sparkles for completion\n      this.particleSystem.createBurst(gatePosition, {\n        count: 30,\n        life: 3.0, // Average of lifetime range (2-4)\n        velocity: new THREE.Vector3(0, 0.5, 0), // Slower upward velocity\n        velocityVariation: new THREE.Vector3(4, 3, 4), // Sparkle spread effect\n        size: { min: 2, max: 6 },\n        color: new THREE.Color(0xffd700), // Gold\n      })\n    }\n\n    // Camera shake effect for impact\n    if (this.camera) {\n      this.startCameraShake(0.3, 1.0) // intensity, duration\n    }\n\n    // Temporary screen flash effect\n    this.createScreenFlash()\n  }\n\n  /**\n   * Create a brief screen flash effect for portal transition\n   */\n  createScreenFlash() {\n    const flash = document.createElement('div')\n    flash.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: radial-gradient(circle, rgba(135, 206, 235, 0.3) 0%, transparent 70%);\n      pointer-events: none;\n      z-index: 1000;\n      animation: portalFlash 1.2s ease-out forwards;\n    `\n\n    // Add CSS animation for flash effect\n    if (!document.querySelector('#portalFlashStyle')) {\n      const style = document.createElement('style')\n      style.id = 'portalFlashStyle'\n      style.textContent = `\n        @keyframes portalFlash {\n          0% { opacity: 0; }\n          20% { opacity: 1; }\n          100% { opacity: 0; }\n        }\n      `\n      document.head.appendChild(style)\n    }\n\n    document.body.appendChild(flash)\n\n    // Remove flash element after animation\n    setTimeout(() => {\n      if (flash.parentNode) {\n        flash.parentNode.removeChild(flash)\n      }\n    }, 1200)\n  }\n\n  /**\n   * Start camera shake effect\n   */\n  startCameraShake(intensity = 0.2, duration = 0.5) {\n    if (!this.camera) {\n      return\n    }\n\n    const originalPosition = this.camera.position.clone()\n    const startTime = Date.now()\n\n    const shakeAnimation = () => {\n      const elapsed = (Date.now() - startTime) / 1000\n      const progress = elapsed / duration\n\n      if (progress < 1) {\n        // Decreasing intensity over time\n        const currentIntensity = intensity * (1 - progress)\n\n        // Random shake offset\n        const shakeX = (Math.random() - 0.5) * currentIntensity * 2\n        const shakeY = (Math.random() - 0.5) * currentIntensity * 2\n        const shakeZ = (Math.random() - 0.5) * currentIntensity * 2\n\n        this.camera.position.copy(originalPosition)\n        this.camera.position.add(new THREE.Vector3(shakeX, shakeY, shakeZ))\n\n        requestAnimationFrame(shakeAnimation)\n      } else {\n        // Reset to original position\n        this.camera.position.copy(originalPosition)\n      }\n    }\n\n    shakeAnimation()\n  }\n\n  updateUI() {\n    document.getElementById('starCount').textContent = this.starCount\n    document.getElementById('levelNumber').textContent = this.levelNumber\n\n    // Update depth meter based on player Y position\n    if (this.player) {\n      const playerPosition = this.player.getPosition()\n      // Water surface is at Y=5, so depth = surface level - current Y position\n      const waterSurface = 5.0\n      const depth = waterSurface - playerPosition.y // Remove Math.max(0, ...) to allow negative values\n\n      // Format depth display: positive values for underwater, negative for above surface\n      const depthText = depth >= 0 ? depth.toFixed(1) : depth.toFixed(1)\n      document.getElementById('depthMeter').textContent = depthText\n    }\n  }\n\n  render() {\n    try {\n      if (this.renderer && this.scene && this.camera) {\n        this.renderer.render(this.scene, this.camera)\n      }\n    } catch (error) {\n      // Silently handle WebGL render errors to prevent spam\n      if (this.webglErrorCount < 5) {\n        console.warn('WebGL render error:', error)\n        this.webglErrorCount = (this.webglErrorCount || 0) + 1\n      }\n    }\n  }\n\n  hideLoading() {\n    const loadingElement = document.getElementById(CONFIG.loadingId)\n    if (loadingElement) {\n      loadingElement.classList.add('hidden')\n    }\n  }\n\n  showUI() {\n    const uiElement = document.getElementById(CONFIG.uiId)\n    if (uiElement) {\n      uiElement.classList.remove('hidden')\n    }\n    this.updateUI()\n  }\n\n  showError(message) {\n    const loadingElement = document.getElementById(CONFIG.loadingId)\n    if (loadingElement) {\n      loadingElement.innerHTML = `\n        <div style=\"color: #ff4444; text-align: center;\">\n          <h3>â ï¸ Error Loading Game</h3>\n          <p>${message}</p>\n          <p style=\"margin-top: 20px; font-size: 14px; color: #ccc;\">\n            Please check the browser console for more details and try refreshing the page.\n          </p>\n        </div>\n      `\n      loadingElement.classList.remove('hidden')\n    }\n  }\n\n  detectMobile() {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    )\n  }\n}\n\n// Initialize the game when the page loads\nwindow.addEventListener(\n  'DOMContentLoaded',\n  async () => {\n    try {\n      console.log('ð Ocean Adventure - Starting initialization...')\n      const game = new OceanAdventure()\n      window.oceanAdventure = game // Expose game instance for debugging\n      await game.initialize()\n    } catch (error) {\n      console.error('â Critical error during game initialization:', error)\n      // Show error in loading div if game initialization fails\n      const loadingElement = document.getElementById('loading')\n      if (loadingElement) {\n        loadingElement.innerHTML = `\n          <div style=\"color: #ff4444; text-align: center;\">\n            <h3>â ï¸ Critical Error</h3>\n            <p>Failed to initialize Ocean Adventure: ${error.message}</p>\n            <p style=\"margin-top: 20px; font-size: 14px; color: #ccc;\">\n              Please check the browser console for more details and try refreshing the page.\n            </p>\n          </div>\n        `\n      }\n    }\n  },\n  { passive: true }\n)\n\n// Handle WebGL context loss\nwindow.addEventListener(\n  'webglcontextlost',\n  event => {\n    event.preventDefault()\n    console.warn('WebGL context lost')\n  },\n  { passive: false }\n)\n\nwindow.addEventListener(\n  'webglcontextrestored',\n  () => {\n    console.log('WebGL context restored')\n    // Reinitialize game here if needed\n  },\n  { passive: true }\n)\n\n// Performance optimization: Pause game when page is hidden\ndocument.addEventListener(\n  'visibilitychange',\n  () => {\n    if (document.hidden) {\n      // Page is hidden, reduce performance\n      console.log('Game paused due to page visibility')\n    } else {\n      // Page is visible, resume normal performance\n      console.log('Game resumed')\n    }\n  },\n  { passive: true }\n)\n"],"names":["CollisionSystem","constructor","this","colliders","staticColliders","addCollider","collider","isStatic","push","removeCollider","index","indexOf","splice","checkCollision","objectA","objectB","collisionType","checkSphereCollision","checkAABBCollision","checkSphereAABBCollision","sphereA","sphereB","position","distanceTo","radius","boxA","boxB","minA","clone","sub","size","multiplyScalar","maxA","add","minB","maxB","x","y","z","sphere","box","boxMin","boxMax","closestPoint","THREE.Vector3","Math","max","min","checkCollisions","object","collisions","UnderwaterPhysics","buoyancyForce","dragCoefficient","currentDirection","currentStrength","applyBuoyancy","body","deltaTime","buoyancy","velocity","applyDrag","applyCurrent","currentForce","applyUnderwaterEffects","PhysicsEngine","gravity","waterDensity","collisionSystem","underwaterPhysics","rigidBodies","isUnderwater","addRigidBody","removeRigidBody","update","updateBody","previousPosition","gravityForce","velocityDelta","length","resolveCollisions","filter","collision","type","collected","copy","onCollision","collisionPairs","i","bodyA","bodyB","createSphereBody","createBoxBody","Particle","life","color","maxLife","alpha","active","reset","ParticleSystem","scene","maxParticles","particles","emitters","initializeParticlePool","createParticleRenderSystem","createUnderwaterEmitters","particle","THREE.Color","geometry","THREE.BufferGeometry","positions","Float32Array","colors","sizes","alphas","setAttribute","THREE.BufferAttribute","material","THREE.ShaderMaterial","uniforms","time","value","pointTexture","createParticleTexture","vertexShader","fragmentShader","transparent","blending","THREE.AdditiveBlending","depthWrite","points","THREE.Points","canvas","document","createElement","width","height","context","getContext","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","texture","THREE.Texture","needsUpdate","addEmitter","rate","velocityVariation","colorVariation","area","emitterConfig","emitter","accumulator","emitParticle","find","p","random","offsetHSL","createBurst","config","count","burstVelocity","particleSize","emissionInterval","activeCount","index3","r","g","b","attributes","setDrawRange","setEmitterActive","e","clear","dispose","remove","AudioEngine","audioContext","listener","sounds","Map","isInitialized","isMuted","masterVolume","musicVolume","sfxVolume","underwaterFilterFrequency","reverbAmount","loadSettings","console","log","initialize","window","AudioContext","webkitAudioContext","masterGain","createGain","gain","setValueAtTime","currentTime","connect","destination","musicGain","sfxGain","createUnderwaterEffects","createSoundEffects","error","warn","underwaterFilter","createBiquadFilter","frequency","Q","soundConfigs","starCollect","duration","volume","envelope","attack","decay","sustain","release","harmonics","gateActivate","modulation","depth","levelComplete","melody","swimming","underwater","playSound","soundName","playMelody","oscillator","createOscillator","gainNode","lfo","lfoGain","start","stop","attackTime","decayTime","sustainLevel","releaseTime","linearRampToValueAtTime","harmonicOscillators","forEach","harmonic","harmonicOsc","harmonicGain","panner","createPanner","panningModel","setPosition","noteDuration","startTime","startAmbientSound","ambientOscillator","ambientGain","createBackgroundMusic","musicLayers","note","stopAmbientSound","layer","updateListenerPosition","forward","up","positionX","positionY","positionZ","forwardX","forwardY","forwardZ","upX","upY","upZ","setOrientation","setMasterVolume","saveSettings","setMusicVolume","setSfxVolume","toggleMute","getState","savedSettings","localStorage","getItem","_settings$masterVolum","_settings$musicVolume","_settings$sfxVolume","settings","JSON","parse","setItem","stringify","state","close","Player","physicsEngine","moveSpeed","rotationSpeed","maxVelocity","movementVector","isMoving","createPlayerMesh","createPhysicsBody","physicsBody","handleCollisions","mesh","THREE.Group","bodyGeometry","THREE.CapsuleGeometry","bodyMaterial","THREE.MeshPhongMaterial","opacity","shininess","specular","bodyMesh","THREE.Mesh","castShadow","receiveShadow","headGeometry","THREE.SphereGeometry","headMaterial","headMesh","set","armGeometry","armMaterial","leftArm","rotation","rightArm","legGeometry","legMaterial","leftLeg","rightLeg","gogglesGeometry","gogglesMaterial","goggles","scale","bodyParts","handleInput","inputState","keys","backward","left","right","down","joystick","abs","mobileButtons","swimUp","swimDown","normalize","applyMovement","force","targetRotation","atan2","THREE.MathUtils","lerp","targetPitch","forwardMovement","bankingAmount","Date","now","floatingOffset","sin","swimTime","PI","idleTime","handleCollectibleCollision","handleObstacleCollision","handleEnvironmentCollision","collectible","obstacle","direction","getPosition","getVelocity","getIsMoving","children","child","Array","isArray","Gate","isActivated","isCollected","pulseSpeed","createGateMesh","gateGeometry","THREE.TorusGeometry","gateMaterial","emissive","emissiveIntensity","gateMesh","portalGeometry","THREE.PlaneGeometry","portalMaterial","THREE.MeshBasicMaterial","side","THREE.DoubleSide","portalMesh","gateLight","THREE.PointLight","rimLights","angle","rimLight","lightRadius","cos","userData","originalAngle","animationOffset","setVisibility","ringRadius","segmentPosition","segmentBody","gate","centerBody","activate","intensity","light","deactivate","visible","onPlayerEnter","pulseIntensity","animationTime","pulseFactor","wobble","getIsActivated","getIsCollected","StarGeometry","create","innerRadius","outerRadius","starShape","THREE.Shape","halfAngleStep","moveTo","lineTo","starGeometry","THREE.ExtrudeGeometry","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","center","createMaterial","createVariants","variants","inner","outer","CONFIG","OceanAdventure","camera","renderer","isLoaded","isMobile","detectMobile","particleSystem","audioEngine","player","environmentObjects","seaCreatures","starCount","levelNumber","cameraJoystick","cameraRotation","horizontal","vertical","sensitivity","previousMovementDirection","lastTime","name","fn","setupCanvas","setupRenderer","setupScene","setupCamera","setupLights","initializePhysics","initializeParticleSystem","initializeAudio","createUnderwaterEnvironment","createPlayer","createSampleStars","createGate","createSeaCreatures","setupEventListeners","hideLoading","showUI","startGameLoop","step","stepError","Error","message","showError","getElementById","THREE.WebGLRenderer","antialias","powerPreference","failIfMajorPerformanceCaveat","preserveDrawingBuffer","premultipliedAlpha","stencil","setSize","innerWidth","innerHeight","setPixelRatio","devicePixelRatio","setClearColor","shadowMap","enabled","THREE.BasicShadowMap","THREE.PCFSoftShadowMap","outputColorSpace","THREE.SRGBColorSpace","toneMapping","THREE.ACESFilmicToneMapping","toneMappingExposure","gl","getExtension","THREE.Scene","tryInitializeAudio","THREE.PerspectiveCamera","lookAt","ambientLight","THREE.AmbientLight","directionalLight","THREE.DirectionalLight","shadowMapSize","shadow","mapSize","near","far","top","bottom","bias","addUnderwaterVolumetricLights","createSkybox","skyGeometry","skyMaterial","THREE.BackSide","fog","skyMesh","createClouds","clouds","cloudGroup","sphereCount","floor","j","sphereSize","cloudGeometry","cloudMaterial","cloudSphere","setScalar","originalPosition","speed","offset","lightColors","lightCount","pointLight","animationSpeed","animationRadius","volumetricLights","createCelestialBody","isEvenLevel","sunGeometry","sunMaterial","celestialBody","celestialLight","target","moonGeometry","moonMaterial","initializeUnderwaterAtmosphere","underwaterFog","originalSceneBackground","background","originalClearColor","getClearColor","updateUnderwaterAtmosphere","playerPosition","wasUnderwater","THREE.Fog","setHex","maxDepth","fogIntensity","deepBlue","lerpColors","waveSurfaceGeometry","waveSurfaceMaterial","wireframe","waveSurface","waveParams","amplitude","wavePositions","array","waveOriginalPositions","foamGeometry","foamMaterial","alphaTest","foamSurface","foamOriginalPositions","floorGeometry","floorMaterial","floorPositions","computeVertexNormals","patchGeometry","THREE.CircleGeometry","patchMaterial","setHSL","patch","floorPhysicsBody","createLevelBoundaries","oceanObjectTypes","objectType","THREE.CylinderGeometry","branchGeometry","branchMaterial","branch","THREE.ConeGeometry","tentacleGeometry","tentacle","rockRadius","THREE.DodecahedronGeometry","rockPositions","swaySpeed","swayAmount","objectPhysicsBody","levelSize","wallHeight","wallPhysicsBody","toFixed","gatePosition","creatureTypes","creatureType","swimRadius","swimSpeed","fishGroup","tailGeometry","tailMaterial","tail","finGeometry","leftFin","rightFin","jellyfishGroup","domeGeometry","domeMaterial","dome","originalRotation","tentacleIndex","seahorseGroup","seahorseBodyGeometry","seahorseBodyMaterial","seahorseBody","head","dorsalFinGeometry","dorsalFinMaterial","dorsalFin","startPosition","swimCenter","swimAngle","bobOffset","stars","starVariants","variant","starMaterial","star","starPhysicsBody","floatSpeed","floatOffset","originalY","rotationAxis","addEventListener","onWindowResize","passive","event","onKeyDown","onKeyUp","setupTouchControls","setupSettingsModal","code","preventDefault","setupVirtualJoystick","setupCameraJoystick","setupMobileButtons","touchState","startX","startY","currentX","currentY","isActive","touches","touch","clientX","clientY","deltaX","deltaY","updateCamera","knob","joystickState","centerX","centerY","stopPropagation","rect","getBoundingClientRect","style","borderColor","updateJoystickKnob","distance","sqrt","maxDistance","normalizedX","normalizedY","transform","cameraKnob","cameraJoystickState","updateCameraJoystickKnob","swimUpBtn","swimDownBtn","settingsButton","settingsModal","closeSettings","openSettings","classList","overflow","updateAudioSliders","closeModal","key","contains","setupAudioControls","setupPWAInstall","masterVolumeSlider","musicVolumeSlider","sfxVolumeSlider","masterVolumeValue","musicVolumeValue","sfxVolumeValue","parseInt","textContent","round","installButton","installStatus","deferredPrompt","async","prompt","outcome","userChoice","disabled","matchMedia","matches","navigator","standalone","setTimeout","aspect","updateProjectionMatrix","playerDepth","offsetX","offsetZ","offsetY","targetPosition","screenSizeFactor","frameRateCompensation","movementResponsiveness","currentMovementDirection","dot","adaptiveSmoothingFactor","lookAtTarget","movementDirection","animate","requestAnimationFrame","render","calculateGerstnerWave","wave","dirLength","dirX","dirZ","phase","sinPhase","cosPhase","steepnessFactor","steepness","currentPosition","playerPos","getWorldDirection","updateUI","starData","rotateOnAxis","floatY","envObject","swayX","swayZ","creature","swimX","swimZ","swimY","directionAngle","undefined","tentacleWave","pulseScale","waveHeight","foamPositions","foamThreshold","baseOpacity","intensityVariation","checkStarCollection","checkGateCollision","playerCollisions","s","activateGate","startPortalTransition","startCameraShake","createScreenFlash","flash","cssText","querySelector","id","appendChild","parentNode","removeChild","shakeAnimation","progress","currentIntensity","shakeX","shakeY","shakeZ","depthText","webglErrorCount","loadingElement","uiElement","innerHTML","test","userAgent","game","oceanAdventure","hidden"],"mappings":"uZAYO,MAAMA,EACXC,WAAAA,GACEC,KAAKC,UAAY,GACjBD,KAAKE,gBAAkB,EACzB,CAOAC,WAAAA,CAAYC,EAAUC,GAAW,IAClBA,EAAWL,KAAKE,gBAAkBF,KAAKC,WAC/CK,KAAKF,EACZ,CAMAG,cAAAA,CAAeH,GACb,IAAII,EAAQR,KAAKC,UAAUQ,QAAQL,IACrB,IAAVI,GAKJA,EAAQR,KAAKE,gBAAgBO,QAAQL,IACvB,IAAVI,GACFR,KAAKE,gBAAgBQ,OAAOF,EAAO,IANnCR,KAAKC,UAAUS,OAAOF,EAAO,EAQjC,CAQAG,cAAAA,CAAeC,EAASC,GAEtB,MAC4B,WAA1BD,EAAQE,eACkB,WAA1BD,EAAQC,cAEDd,KAAKe,qBAAqBH,EAASC,GAId,QAA1BD,EAAQE,eAAqD,QAA1BD,EAAQC,cACtCd,KAAKgB,mBAAmBJ,EAASC,IAKb,WAA1BD,EAAQE,eAAwD,QAA1BD,EAAQC,eACpB,QAA1BF,EAAQE,eAAqD,WAA1BD,EAAQC,gBAErCd,KAAKiB,yBAAyBL,EAASC,EAIlD,CAQAE,oBAAAA,CAAqBG,EAASC,GAG5B,OAFiBD,EAAQE,SAASC,WAAWF,EAAQC,WACnCF,EAAQI,OAASH,EAAQG,MAE7C,CAQAN,kBAAAA,CAAmBO,EAAMC,GACvB,MAAMC,EAAOF,EAAKH,SACfM,QACAC,IAAIJ,EAAKK,KAAKF,QAAQG,eAAe,KAClCC,EAAOP,EAAKH,SACfM,QACAK,IAAIR,EAAKK,KAAKF,QAAQG,eAAe,KAClCG,EAAOR,EAAKJ,SACfM,QACAC,IAAIH,EAAKI,KAAKF,QAAQG,eAAe,KAClCI,EAAOT,EAAKJ,SACfM,QACAK,IAAIP,EAAKI,KAAKF,QAAQG,eAAe,KAExC,OACEJ,EAAKS,GAAKD,EAAKC,GACfJ,EAAKI,GAAKF,EAAKE,GACfT,EAAKU,GAAKF,EAAKE,GACfL,EAAKK,GAAKH,EAAKG,GACfV,EAAKW,GAAKH,EAAKG,GACfN,EAAKM,GAAKJ,EAAKI,CAEnB,CAQAnB,wBAAAA,CAAyBL,EAASC,GAChC,MAAMwB,EAAmC,WAA1BzB,EAAQE,cAA6BF,EAAUC,EACxDyB,EAAgC,QAA1B1B,EAAQE,cAA0BF,EAAUC,EAElD0B,EAASD,EAAIlB,SAChBM,QACAC,IAAIW,EAAIV,KAAKF,QAAQG,eAAe,KACjCW,EAASF,EAAIlB,SAChBM,QACAK,IAAIO,EAAIV,KAAKF,QAAQG,eAAe,KAGjCY,EAAe,IAAIC,EACvBC,KAAKC,IAAIL,EAAOL,EAAGS,KAAKE,IAAIR,EAAOjB,SAASc,EAAGM,EAAON,IACtDS,KAAKC,IAAIL,EAAOJ,EAAGQ,KAAKE,IAAIR,EAAOjB,SAASe,EAAGK,EAAOL,IACtDQ,KAAKC,IAAIL,EAAOH,EAAGO,KAAKE,IAAIR,EAAOjB,SAASgB,EAAGI,EAAOJ,KAIxD,OADiBC,EAAOjB,SAASC,WAAWoB,IACzBJ,EAAOf,MAC5B,CAOAwB,eAAAA,CAAgBC,GACd,MAAMC,EAAa,GAGnB,IAAK,MAAM5C,UAAiBH,UACtBG,IAAa2C,GAAU/C,KAAKW,eAAeoC,EAAQ3C,IACrD4C,EAAW1C,KAAKF,GAKpB,IAAK,MAAMA,UAAiBF,gBACtBF,KAAKW,eAAeoC,EAAQ3C,IAC9B4C,EAAW1C,KAAKF,GAIpB,OAAO4C,CACT,EAMK,MAAMC,EACXlD,WAAAA,GACEC,KAAKkD,cAAgB,EACrBlD,KAAKmD,gBAAkB,IACvBnD,KAAKoD,iBAAmB,IAAIV,EAAc,GAAK,EAAG,KAClD1C,KAAKqD,gBAAkB,GACzB,CAOAC,aAAAA,CAAcC,EAAMC,GAClB,MAAMC,EAAW,IAAIf,EAAc,EAAG1C,KAAKkD,cAAgBM,EAAW,GACtED,EAAKG,SAAS3B,IAAI0B,EACpB,CAMAE,SAAAA,CAAUJ,GACRA,EAAKG,SAAS7B,eAAe7B,KAAKmD,gBACpC,CAQAS,YAAAA,CAAaL,EAAMF,EAAkB,EAAKG,GACxC,MAAMK,EAAe7D,KAAKoD,iBACvB1B,QACAG,eAAe7B,KAAKqD,gBAAkBA,EAAkBG,GAC3DD,EAAKG,SAAS3B,IAAI8B,EACpB,CAOAC,sBAAAA,CAAuBP,EAAMC,GAC3BxD,KAAKsD,cAAcC,EAAMC,GACzBxD,KAAK2D,UAAUJ,GACfvD,KAAK4D,aAAaL,EAAM,EAAKC,EAC/B,EAMK,MAAMO,EACXhE,WAAAA,GACEC,KAAKgE,QAAU,IAAItB,EAAc,GAAG,IAAM,GAC1C1C,KAAKiE,aAAe,IACpBjE,KAAKkE,gBAAkB,IAAIpE,EAC3BE,KAAKmE,kBAAoB,IAAIlB,EAC7BjD,KAAKoE,YAAc,GACnBpE,KAAKqE,cAAe,CACtB,CAMAC,YAAAA,CAAaf,GACXvD,KAAKoE,YAAY9D,KAAKiD,GAGlBA,EAAKzC,eACPd,KAAKkE,gBAAgB/D,YAAYoD,EAAMA,EAAKlD,SAEhD,CAMAkE,eAAAA,CAAgBhB,GACd,MAAM/C,EAAQR,KAAKoE,YAAY3D,QAAQ8C,IACzB,IAAV/C,IACFR,KAAKoE,YAAY1D,OAAOF,EAAO,GAC/BR,KAAKkE,gBAAgB3D,eAAegD,GAExC,CAMAiB,MAAAA,CAAOhB,GACL,IAAK,MAAMD,KAAQvD,KAAKoE,YACtBpE,KAAKyE,WAAWlB,EAAMC,EAE1B,CAOAiB,UAAAA,CAAWlB,EAAMC,GACf,GAAID,EAAKlD,SACP,OAIGkD,EAAKG,WACRH,EAAKG,SAAW,IAAIhB,GAItB,MAAMgC,EAAmBnB,EAAKnC,SAASM,QAGvC,GAAI1B,KAAKqE,aACPrE,KAAKmE,kBAAkBL,uBAAuBP,EAAMC,OAC/C,CAEL,MAAMmB,EAAe3E,KAAKgE,QAAQtC,QAAQG,eAAe2B,GACzDD,EAAKG,SAAS3B,IAAI4C,EACpB,CAGA,MAAMC,EAAgBrB,EAAKG,SAAShC,QAAQG,eAAe2B,GAC3DD,EAAKnC,SAASW,IAAI6C,GAGlB,MAAM5B,EAAahD,KAAKkE,gBAAgBpB,gBAAgBS,GACpDP,EAAW6B,OAAS,GACtB7E,KAAK8E,kBAAkBvB,EAAMP,EAAY0B,EAE7C,CAQAI,iBAAAA,CAAkBvB,EAAMP,EAAY0B,GAEP1B,EAAW+B,OACpCC,IACsB,gBAAnBA,EAAUC,MAA0BD,EAAUE,YAC5B,SAAnBF,EAAUC,MAISJ,OAAS,IAE9BtB,EAAKnC,SAAS+D,KAAKT,GAGnBnB,EAAKG,SAAS7B,eAAe,KAI3B0B,EAAK6B,aACP7B,EAAK6B,YAAYpC,EAErB,CAMAF,eAAAA,GACE,MAAMuC,EAAiB,GAEvB,IAAK,IAAIC,EAAI,EAAGA,EAAItF,KAAKoE,YAAYS,OAAQS,IAAK,CAChD,MAAMC,EAAQvF,KAAKoE,YAAYkB,GACzBtC,EAAahD,KAAKkE,gBAAgBpB,gBAAgByC,GAExD,IAAK,MAAMC,KAASxC,EAClBqC,EAAe/E,KAAK,CAACiF,EAAOC,GAEhC,CAEA,OAAOH,CACT,CASAI,gBAAAA,CAAiBrE,EAAUE,EAAQjB,GAAW,GAC5C,MAAO,CACLe,SAAUA,EAASM,QACnBgC,SAAU,IAAIhB,EACd5B,cAAe,SACfQ,OAAQA,EACRjB,SAAUA,EAEd,CASAqF,aAAAA,CAActE,EAAUQ,EAAMvB,GAAW,GACvC,MAAO,CACLe,SAAUA,EAASM,QACnBgC,SAAU,IAAIhB,EACd5B,cAAe,MACfc,KAAMA,EAAKF,QACXrB,SAAUA,EAEd,EC5XF,MAAMsF,EACJ5F,WAAAA,CAAYqB,EAAUsC,EAAUkC,EAAMhE,EAAMiE,GAC1C7F,KAAKoB,SAAWA,EAASM,QACzB1B,KAAK0D,SAAWA,EAAShC,QACzB1B,KAAK4F,KAAOA,EACZ5F,KAAK8F,QAAUF,EACf5F,KAAK4B,KAAOA,EACZ5B,KAAK6F,MAAQA,EAAMnE,QACnB1B,KAAK+F,MAAQ,EACb/F,KAAKgG,QAAS,CAChB,CAMAxB,MAAAA,CAAOhB,GACAxD,KAAKgG,SAKVhG,KAAKoB,SAASW,IAAI/B,KAAK0D,SAAShC,QAAQG,eAAe2B,IAGvDxD,KAAK4F,MAAQpC,EAGbxD,KAAK+F,MAAQ/F,KAAK4F,KAAO5F,KAAK8F,QAG1B9F,KAAK4F,MAAQ,IACf5F,KAAKgG,QAAS,GAElB,CAUAC,KAAAA,CAAM7E,EAAUsC,EAAUkC,EAAMhE,EAAMiE,GACpC7F,KAAKoB,SAAS+D,KAAK/D,GACnBpB,KAAK0D,SAASyB,KAAKzB,GACnB1D,KAAK4F,KAAOA,EACZ5F,KAAK8F,QAAUF,EACf5F,KAAK4B,KAAOA,EACZ5B,KAAK6F,MAAMV,KAAKU,GAChB7F,KAAK+F,MAAQ,EACb/F,KAAKgG,QAAS,CAChB,EAMK,MAAME,EACXnG,WAAAA,CAAYoG,EAAOC,EAAe,KAChCpG,KAAKmG,MAAQA,EACbnG,KAAKoG,aAAeA,EACpBpG,KAAKqG,UAAY,GACjBrG,KAAKsG,SAAW,GAGhBtG,KAAKuG,yBAGLvG,KAAKwG,6BAGLxG,KAAKyG,0BACP,CAKAF,sBAAAA,GACE,IAAK,IAAIjB,EAAI,EAAGA,EAAItF,KAAKoG,aAAcd,IAAK,CAC1C,MAAMoB,EAAW,IAAIf,EACnB,IAAIjD,EACJ,IAAIA,EACJ,EACA,EACA,IAAIiE,EAAY,WAElBD,EAASV,QAAS,EAClBhG,KAAKqG,UAAU/F,KAAKoG,EACtB,CACF,CAKAF,0BAAAA,GAEExG,KAAK4G,SAAW,IAAIC,EAGpB7G,KAAK8G,UAAY,IAAIC,aAAiC,EAApB/G,KAAKoG,cACvCpG,KAAKgH,OAAS,IAAID,aAAiC,EAApB/G,KAAKoG,cACpCpG,KAAKiH,MAAQ,IAAIF,aAAa/G,KAAKoG,cACnCpG,KAAKkH,OAAS,IAAIH,aAAa/G,KAAKoG,cAGpCpG,KAAK4G,SAASO,aACZ,WACA,IAAIC,EAAsBpH,KAAK8G,UAAW,IAE5C9G,KAAK4G,SAASO,aACZ,QACA,IAAIC,EAAsBpH,KAAKgH,OAAQ,IAEzChH,KAAK4G,SAASO,aAAa,OAAQ,IAAIC,EAAsBpH,KAAKiH,MAAO,IACzEjH,KAAK4G,SAASO,aACZ,QACA,IAAIC,EAAsBpH,KAAKkH,OAAQ,IAIzClH,KAAKqH,SAAW,IAAIC,EAAqB,CACvCC,SAAU,CACRC,KAAM,CAAEC,MAAO,GACfC,aAAc,CAAED,MAAOzH,KAAK2H,0BAE9BC,aAAc,odAiBdC,eAAgB,uSAWhBC,aAAa,EACbC,SAAUC,EACVC,YAAY,IAIdjI,KAAKkI,OAAS,IAAIC,EAAanI,KAAK4G,SAAU5G,KAAKqH,UACnDrH,KAAKmG,MAAMpE,IAAI/B,KAAKkI,OACtB,CAMAP,qBAAAA,GACE,MAAMS,EAASC,SAASC,cAAc,UACtCF,EAAOG,MAAQ,GACfH,EAAOI,OAAS,GAEhB,MAAMC,EAAUL,EAAOM,WAAW,MAC5BC,EAAWF,EAAQG,qBAAqB,GAAI,GAAI,EAAG,GAAI,GAAI,IACjED,EAASE,aAAa,EAAG,uBACzBF,EAASE,aAAa,GAAK,yBAC3BF,EAASE,aAAa,GAAK,yBAC3BF,EAASE,aAAa,EAAG,uBAEzBJ,EAAQK,UAAYH,EACpBF,EAAQM,SAAS,EAAG,EAAG,GAAI,IAE3B,MAAMC,EAAU,IAAIC,EAAcb,GAElC,OADAY,EAAQE,aAAc,EACfF,CACT,CAKAvC,wBAAAA,GAEEzG,KAAKmJ,WAAW,CACdlE,KAAM,UACN7D,SAAU,IAAIsB,EAAc,GAAG,GAAK,GACpC0G,KAAM,EACNxD,KAAM,EACNhE,KAAM,CAAEiB,IAAK,EAAGD,IAAK,GACrBc,SAAU,IAAIhB,EAAc,EAAG,EAAG,GAClC2G,kBAAmB,IAAI3G,EAAc,GAAK,GAAK,IAC/CmD,MAAO,IAAIc,EAAY,SACvB2C,eAAgB,GAChBC,KAAM,IAAI7G,EAAc,GAAI,EAAG,MAIjC1C,KAAKmJ,WAAW,CACdlE,KAAM,SACN7D,SAAU,IAAIsB,EAAc,EAAG,EAAG,GAClC0G,KAAM,EACNxD,KAAM,GACNhE,KAAM,CAAEiB,IAAK,EAAGD,IAAK,GACrBc,SAAU,IAAIhB,EAAc,GAAK,IAAM,IACvC2G,kBAAmB,IAAI3G,EAAc,GAAK,GAAK,IAC/CmD,MAAO,IAAIc,EAAY,UACvB2C,eAAgB,GAChBC,KAAM,IAAI7G,EAAc,GAAI,GAAI,MAIlC1C,KAAKmJ,WAAW,CACdlE,KAAM,YACN7D,SAAU,IAAIsB,EAAc,EAAG,GAAI,GACnC0G,KAAM,GACNxD,KAAM,GACNhE,KAAM,CAAEiB,IAAK,EAAGD,IAAK,IACrBc,SAAU,IAAIhB,EAAc,GAAG,GAAM,GACrC2G,kBAAmB,IAAI3G,EAAc,GAAK,GAAK,IAC/CmD,MAAO,IAAIc,EAAY,UACvB2C,eAAgB,GAChBC,KAAM,IAAI7G,EAAc,GAAI,EAAG,KAEnC,CAMAyG,UAAAA,CAAWK,GACT,MAAMC,EAAU,IACXD,EACHE,YAAa,EACb1D,QAAQ,GAEVhG,KAAKsG,SAAShG,KAAKmJ,EACrB,CAMAE,YAAAA,CAAaF,GAEX,MAAM/C,EAAW1G,KAAKqG,UAAUuD,KAAKC,IAAMA,EAAE7D,QAC7C,IAAKU,EACH,OAIF,MAAMtF,EAAWqI,EAAQrI,SACtBM,QACAK,IACC,IAAIW,GACDC,KAAKmH,SAAW,IAAOL,EAAQF,KAAKrH,GACpCS,KAAKmH,SAAW,IAAOL,EAAQF,KAAKpH,GACpCQ,KAAKmH,SAAW,IAAOL,EAAQF,KAAKnH,IAKrCsB,EAAW+F,EAAQ/F,SACtBhC,QACAK,IACC,IAAIW,GACDC,KAAKmH,SAAW,IAAOL,EAAQJ,kBAAkBnH,GACjDS,KAAKmH,SAAW,IAAOL,EAAQJ,kBAAkBlH,GACjDQ,KAAKmH,SAAW,IAAOL,EAAQJ,kBAAkBjH,IAKlDR,EACJ6H,EAAQ7H,KAAKiB,IAAMF,KAAKmH,UAAYL,EAAQ7H,KAAKgB,IAAM6G,EAAQ7H,KAAKiB,KAGhEgD,EAAQ4D,EAAQ5D,MAAMnE,QACxB+H,EAAQH,eAAiB,GAC3BzD,EAAMkE,WACHpH,KAAKmH,SAAW,IAAOL,EAAQH,eAChC,GACC3G,KAAKmH,SAAW,IAAOL,EAAQH,eAAiB,IAKrD5C,EAAST,MAAM7E,EAAUsC,EAAU+F,EAAQ7D,KAAMhE,EAAMiE,EACzD,CAOAmE,WAAAA,CAAY5I,EAAU6I,EAAS,IAC7B,MAAMC,EAAQD,EAAOC,OAAS,GACxBtE,EAAOqE,EAAOrE,MAAQ,EACtBlC,EAAWuG,EAAOvG,UAAY,IAAIhB,EAAc,EAAG,EAAG,GACtD2G,EACJY,EAAOZ,mBAAqB,IAAI3G,EAAc,EAAG,EAAG,GAChDmD,EAAQoE,EAAOpE,OAAS,IAAIc,EAAY,UACxC/E,EAAOqI,EAAOrI,MAAQ,CAAEiB,IAAK,EAAGD,IAAK,GAE3C,IAAK,IAAI0C,EAAI,EAAGA,EAAI4E,EAAO5E,IAAK,CAC9B,MAAMoB,EAAW1G,KAAKqG,UAAUuD,KAAKC,IAAMA,EAAE7D,QAC7C,IAAKU,EACH,MAGF,MAAMyD,EAAgBzG,EACnBhC,QACAK,IACC,IAAIW,GACDC,KAAKmH,SAAW,IAAOT,EAAkBnH,GACzCS,KAAKmH,SAAW,IAAOT,EAAkBlH,GACzCQ,KAAKmH,SAAW,IAAOT,EAAkBjH,IAI1CgI,EAAexI,EAAKiB,IAAMF,KAAKmH,UAAYlI,EAAKgB,IAAMhB,EAAKiB,KAEjE6D,EAAST,MAAM7E,EAASM,QAASyI,EAAevE,EAAMwE,EAAcvE,EACtE,CACF,CAMArB,MAAAA,CAAOhB,GAEL,IAAK,MAAMiG,KAAWzJ,KAAKsG,SAAU,CACnC,IAAKmD,EAAQzD,OACX,SAGFyD,EAAQC,aAAelG,EACvB,MAAM6G,EAAmB,EAAMZ,EAAQL,KAEvC,KAAOK,EAAQC,aAAeW,GAC5BrK,KAAK2J,aAAaF,GAClBA,EAAQC,aAAeW,CAE3B,CAGA,IAAIC,EAAc,EAClB,IAAK,IAAIhF,EAAI,EAAGA,EAAItF,KAAKqG,UAAUxB,OAAQS,IAAK,CAC9C,MAAMoB,EAAW1G,KAAKqG,UAAUf,GAEhC,GAAIoB,EAASV,OAAQ,CACnBU,EAASlC,OAAOhB,GAGhB,MAAM+G,EAAuB,EAAdD,EACftK,KAAK8G,UAAUyD,GAAU7D,EAAStF,SAASc,EAC3ClC,KAAK8G,UAAUyD,EAAS,GAAK7D,EAAStF,SAASe,EAC/CnC,KAAK8G,UAAUyD,EAAS,GAAK7D,EAAStF,SAASgB,EAE/CpC,KAAKgH,OAAOuD,GAAU7D,EAASb,MAAM2E,EACrCxK,KAAKgH,OAAOuD,EAAS,GAAK7D,EAASb,MAAM4E,EACzCzK,KAAKgH,OAAOuD,EAAS,GAAK7D,EAASb,MAAM6E,EAEzC1K,KAAKiH,MAAMqD,GAAe5D,EAAS9E,KACnC5B,KAAKkH,OAAOoD,GAAe5D,EAASX,MAEpCuE,GACF,CACF,CAGAtK,KAAK4G,SAAS+D,WAAWvJ,SAAS8H,aAAc,EAChDlJ,KAAK4G,SAAS+D,WAAW9E,MAAMqD,aAAc,EAC7ClJ,KAAK4G,SAAS+D,WAAW/I,KAAKsH,aAAc,EAC5ClJ,KAAK4G,SAAS+D,WAAW5E,MAAMmD,aAAc,EAG7ClJ,KAAK4G,SAASgE,aAAa,EAAGN,GAG9BtK,KAAKqH,SAASE,SAASC,KAAKC,OAASjE,CACvC,CAOAqH,gBAAAA,CAAiB5F,EAAMe,GACrB,MAAMyD,EAAUzJ,KAAKsG,SAASsD,KAAKkB,GAAKA,EAAE7F,OAASA,GAC/CwE,IACFA,EAAQzD,OAASA,EAErB,CAKA+E,KAAAA,GACE,IAAK,MAAMrE,KAAY1G,KAAKqG,UAC1BK,EAASV,QAAS,CAEtB,CAKAgF,OAAAA,GACEhL,KAAKmG,MAAM8E,OAAOjL,KAAKkI,QACvBlI,KAAK4G,SAASoE,UACdhL,KAAKqH,SAAS2D,UACVhL,KAAKqH,SAASE,SAASG,aAAaD,OACtCzH,KAAKqH,SAASE,SAASG,aAAaD,MAAMuD,SAE9C,EC9aK,MAAME,EACXnL,WAAAA,GACEC,KAAKmL,aAAe,KACpBnL,KAAKoL,SAAW,KAChBpL,KAAKqL,OAAS,IAAIC,IAClBtL,KAAKuL,eAAgB,EACrBvL,KAAKwL,SAAU,EACfxL,KAAKyL,aAAe,GAGpBzL,KAAK0L,YAAc,GACnB1L,KAAK2L,UAAY,GAGjB3L,KAAK4L,0BAA4B,IACjC5L,KAAK6L,aAAe,GAGpB7L,KAAK8L,eAELC,QAAQC,IAAI,yBACd,CAMA,gBAAMC,GACJ,IAEEjM,KAAKmL,aAAe,IAAKe,OAAOC,cAC9BD,OAAOE,oBAGTpM,KAAKoL,SAAWpL,KAAKmL,aAAaC,SAGlCpL,KAAKqM,WAAarM,KAAKmL,aAAamB,aACpCtM,KAAKqM,WAAWE,KAAKC,eACnBxM,KAAKyL,aACLzL,KAAKmL,aAAasB,aAEpBzM,KAAKqM,WAAWK,QAAQ1M,KAAKmL,aAAawB,aAG1C3M,KAAK4M,UAAY5M,KAAKmL,aAAamB,aACnCtM,KAAK6M,QAAU7M,KAAKmL,aAAamB,aAEjCtM,KAAK4M,UAAUL,KAAKC,eAClBxM,KAAK0L,YACL1L,KAAKmL,aAAasB,aAEpBzM,KAAK6M,QAAQN,KAAKC,eAChBxM,KAAK2L,UACL3L,KAAKmL,aAAasB,aAGpBzM,KAAK4M,UAAUF,QAAQ1M,KAAKqM,YAC5BrM,KAAK6M,QAAQH,QAAQ1M,KAAKqM,YAG1BrM,KAAK8M,0BAGL9M,KAAK+M,qBAEL/M,KAAKuL,eAAgB,EACrBQ,QAAQC,IAAI,yCACd,CAAE,MAAOgB,GACPjB,QAAQkB,KAAK,wCAAyCD,EAExD,CACF,CAKAF,uBAAAA,GACO9M,KAAKmL,eAKVnL,KAAKkN,iBAAmBlN,KAAKmL,aAAagC,qBAC1CnN,KAAKkN,iBAAiBjI,KAAO,UAC7BjF,KAAKkN,iBAAiBE,UAAUZ,eAC9BxM,KAAK4L,0BACL5L,KAAKmL,aAAasB,aAEpBzM,KAAKkN,iBAAiBG,EAAEb,eAAe,EAAGxM,KAAKmL,aAAasB,aAG5DzM,KAAKkN,iBAAiBR,QAAQ1M,KAAKqM,YAEnCN,QAAQC,IAAI,uCACd,CAMAe,kBAAAA,GACO/M,KAAKmL,eAKVnL,KAAKsN,aAAe,CAClBC,YAAa,CACXtI,KAAM,OACNmI,UAAW,IACXI,SAAU,GACVC,OAAQ,GACRC,SAAU,CAAEC,OAAQ,IAAMC,MAAO,GAAKC,QAAS,GAAKC,QAAS,IAC7DC,UAAW,CACT,CAAEX,UAAW,KAAMK,OAAQ,IAC3B,CAAEL,UAAW,KAAMK,OAAQ,MAG/BO,aAAc,CACZ/I,KAAM,WACNmI,UAAW,IACXI,SAAU,IACVC,OAAQ,GACRC,SAAU,CAAEC,OAAQ,GAAKC,MAAO,GAAKC,QAAS,GAAKC,QAAS,IAC5DG,WAAY,CAAEb,UAAW,EAAGc,MAAO,KAErCC,cAAe,CACblJ,KAAM,SACNmI,UAAW,IACXI,SAAU,IACVC,OAAQ,GACRC,SAAU,CAAEC,OAAQ,GAAKC,MAAO,GAAKC,QAAS,GAAKC,QAAS,IAC5DM,OAAQ,CAAC,IAAK,OAAQ,OAAQ,MAEhCC,SAAU,CACRpJ,KAAM,OACNmI,UAAW,IACXI,SAAU,GACVC,OAAQ,IACRC,SAAU,CAAEC,OAAQ,IAAMC,MAAO,GAAKC,QAAS,GAAKC,QAAS,MAE/DQ,WAAY,CACVrJ,KAAM,OACNmI,UAAW,GACXI,UAAU,EACVC,OAAQ,IACRC,SAAU,CAAEC,OAAQ,EAAKC,MAAO,EAAGC,QAAS,EAAKC,QAAS,GAC1DG,WAAY,CAAEb,UAAW,GAAKc,MAAO,KAIzCnC,QAAQC,IAAI,wCACd,CAKAuC,SAAAA,CAAUC,EAAWpN,EAAW,MAC9B,IAAKpB,KAAKuL,eAAiBvL,KAAKwL,UAAYxL,KAAKmL,aAC/C,OAGF,MAAMlB,EAASjK,KAAKsN,aAAakB,GACjC,GAAKvE,EAKL,IACE,MAAMwC,EAAczM,KAAKmL,aAAasB,YAGtC,GAAIxC,EAAOmE,OAET,YADApO,KAAKyO,WAAWxE,EAAQ7I,GAK1B,MAAMsN,EAAa1O,KAAKmL,aAAawD,mBAC/BC,EAAW5O,KAAKmL,aAAamB,aAOnC,GAJAoC,EAAWzJ,KAAOgF,EAAOhF,KACzByJ,EAAWtB,UAAUZ,eAAevC,EAAOmD,UAAWX,GAGlDxC,EAAOgE,WAAY,CACrB,MAAMY,EAAM7O,KAAKmL,aAAawD,mBACxBG,EAAU9O,KAAKmL,aAAamB,aAClCuC,EAAIzB,UAAUZ,eAAevC,EAAOgE,WAAWb,UAAWX,GAC1DqC,EAAQvC,KAAKC,eAAevC,EAAOgE,WAAWC,MAAOzB,GACrDoC,EAAInC,QAAQoC,GACZA,EAAQpC,QAAQgC,EAAWtB,WAC3ByB,EAAIE,MAAMtC,GACNxC,EAAOuD,SAAW,GACpBqB,EAAIG,KAAKvC,EAAcxC,EAAOuD,SAElC,CAGA,MAAME,EAAWzD,EAAOyD,UAAY,CAClCC,OAAQ,IACRC,MAAO,GACPC,QAAS,GACTC,QAAS,IAELmB,EAAaxC,EAAciB,EAASC,OACpCuB,EAAYD,EAAavB,EAASE,MAClCuB,EAAelF,EAAOwD,OAASC,EAASG,QACxCuB,EACJnF,EAAOuD,SAAW,EAAIf,EAAcxC,EAAOuD,SAAWf,EAAc,EAEtEmC,EAASrC,KAAKC,eAAe,EAAGC,GAChCmC,EAASrC,KAAK8C,wBAAwBpF,EAAOwD,OAAQwB,GACrDL,EAASrC,KAAK8C,wBAAwBF,EAAcD,GACpDN,EAASrC,KAAKC,eAAe2C,EAAcC,EAAc1B,EAASI,SAClEc,EAASrC,KAAK8C,wBAAwB,EAAGD,GAGzCV,EAAWhC,QAAQkC,GAGnB,MAAMU,EAAsB,GA0B5B,GAzBIrF,EAAO8D,WACT9D,EAAO8D,UAAUwB,QAAQC,IACvB,MAAMC,EAAczP,KAAKmL,aAAawD,mBAChCe,EAAe1P,KAAKmL,aAAamB,aAEvCmD,EAAYxK,KAAOgF,EAAOhF,KAC1BwK,EAAYrC,UAAUZ,eAAegD,EAASpC,UAAWX,GACzDiD,EAAanD,KAAKC,eAChBgD,EAAS/B,OAASxD,EAAOwD,OACzBhB,GAEFiD,EAAanD,KAAK8C,wBAAwB,EAAGD,GAE7CK,EAAY/C,QAAQgD,GACpBA,EAAahD,QAAQkC,GACrBa,EAAYV,MAAMtC,GAEdxC,EAAOuD,SAAW,GACpBiC,EAAYT,KAAKI,GAEnBE,EAAoBhP,KAAKmP,KAKzBrO,EAAU,CACZ,MAAMuO,EAAS3P,KAAKmL,aAAayE,eACjCD,EAAOE,aAAe,OACtBF,EAAOG,YAAY1O,EAASc,EAAGd,EAASe,EAAGf,EAASgB,GACpDwM,EAASlC,QAAQiD,GACjBA,EAAOjD,QAAQ1M,KAAKkN,kBACpBlN,KAAKkN,iBAAiBR,QAAQ1M,KAAK6M,QACrC,MACE+B,EAASlC,QAAQ1M,KAAKkN,kBACtBlN,KAAKkN,iBAAiBR,QAAQ1M,KAAK6M,SAIrC6B,EAAWK,MAAMtC,GACbxC,EAAOuD,SAAW,GACpBkB,EAAWM,KAAKI,GAGlBrD,QAAQC,IAAI,8BAA8BwC,IAC5C,CAAE,MAAOxB,GACPjB,QAAQkB,KAAK,yBAAyBuB,MAAexB,EACvD,MAzGEjB,QAAQkB,KAAK,UAAUuB,eA0G3B,CAKAC,UAAAA,CAAWxE,EAAQ7I,EAAW,MAC5B,MAAM2O,EAAe9F,EAAOuD,SAAWvD,EAAOmE,OAAOvJ,OAErDoF,EAAOmE,OAAOmB,QAAQ,CAACnC,EAAW5M,KAChC,MAAMwP,EAAYhQ,KAAKmL,aAAasB,YAAcjM,EAAQuP,EAEpDrB,EAAa1O,KAAKmL,aAAawD,mBAC/BC,EAAW5O,KAAKmL,aAAamB,aAWnC,GATAoC,EAAWzJ,KAAOgF,EAAOhF,KACzByJ,EAAWtB,UAAUZ,eAAeY,EAAW4C,GAE/CpB,EAASrC,KAAKC,eAAe,EAAGwD,GAChCpB,EAASrC,KAAK8C,wBAAwBpF,EAAOwD,OAAQuC,EAAY,KACjEpB,EAASrC,KAAK8C,wBAAwB,EAAGW,EAAYD,EAAe,KAEpErB,EAAWhC,QAAQkC,GAEfxN,EAAU,CACZ,MAAMuO,EAAS3P,KAAKmL,aAAayE,eACjCD,EAAOE,aAAe,OACtBF,EAAOG,YAAY1O,EAASc,EAAGd,EAASe,EAAGf,EAASgB,GACpDwM,EAASlC,QAAQiD,GACjBA,EAAOjD,QAAQ1M,KAAKkN,kBACpBlN,KAAKkN,iBAAiBR,QAAQ1M,KAAK6M,QACrC,MACE+B,EAASlC,QAAQ1M,KAAKkN,kBACtBlN,KAAKkN,iBAAiBR,QAAQ1M,KAAK6M,SAGrC6B,EAAWK,MAAMiB,GACjBtB,EAAWM,KAAKgB,EAAYD,IAEhC,CAKAE,iBAAAA,GACE,GAAKjQ,KAAKuL,gBAAiBvL,KAAKwL,UAK5BxL,KAAKkQ,kBAIT,IAEElQ,KAAKkQ,kBAAoBlQ,KAAKmL,aAAawD,mBAC3C3O,KAAKmQ,YAAcnQ,KAAKmL,aAAamB,aAErCtM,KAAKkQ,kBAAkBjL,KAAO,OAC9BjF,KAAKkQ,kBAAkB9C,UAAUZ,eAC/B,GACAxM,KAAKmL,aAAasB,aAIpBzM,KAAKmQ,YAAY5D,KAAKC,eAAe,EAAGxM,KAAKmL,aAAasB,aAC1DzM,KAAKmQ,YAAY5D,KAAK8C,wBACpB,IACArP,KAAKmL,aAAasB,YAAc,GAGlCzM,KAAKkQ,kBAAkBxD,QAAQ1M,KAAKmQ,aACpCnQ,KAAKmQ,YAAYzD,QAAQ1M,KAAKkN,kBAC9BlN,KAAKkN,iBAAiBR,QAAQ1M,KAAK4M,WAEnC5M,KAAKkQ,kBAAkBnB,QAGvB/O,KAAKoQ,wBAELrE,QAAQC,IAAI,gDACd,CAAE,MAAOgB,GACPjB,QAAQkB,KAAK,iCAAkCD,EACjD,CACF,CAKAoD,qBAAAA,GACEpQ,KAAKqQ,YAAc,GAGA,CACjB,CAAEjD,UAAW,IAAKK,OAAQ,IAAMxI,KAAM,QACtC,CAAEmI,UAAW,OAAQK,OAAQ,KAAOxI,KAAM,QAC1C,CAAEmI,UAAW,OAAQK,OAAQ,IAAMxI,KAAM,YACzC,CAAEmI,UAAW,IAAKK,OAAQ,KAAOxI,KAAM,SAG9BsK,QAAQ,CAACe,EAAM9P,KACxB,MAAMkO,EAAa1O,KAAKmL,aAAawD,mBAC/BC,EAAW5O,KAAKmL,aAAamB,aAC7BuC,EAAM7O,KAAKmL,aAAawD,mBACxBG,EAAU9O,KAAKmL,aAAamB,aAGlCoC,EAAWzJ,KAAOqL,EAAKrL,KACvByJ,EAAWtB,UAAUZ,eACnB8D,EAAKlD,UACLpN,KAAKmL,aAAasB,aAIpBoC,EAAI5J,KAAO,OACX4J,EAAIzB,UAAUZ,eACZ,GAAc,IAARhM,EACNR,KAAKmL,aAAasB,aAEpBqC,EAAQvC,KAAKC,eAAe,EAAGxM,KAAKmL,aAAasB,aAGjDoC,EAAInC,QAAQoC,GACZA,EAAQpC,QAAQgC,EAAWtB,WAG3BwB,EAASrC,KAAKC,eAAe,EAAGxM,KAAKmL,aAAasB,aAClDmC,EAASrC,KAAK8C,wBACZiB,EAAK7C,OACLzN,KAAKmL,aAAasB,YAAc,EAAMjM,GAIxCkO,EAAWhC,QAAQkC,GACnBA,EAASlC,QAAQ1M,KAAKkN,kBACtBlN,KAAKkN,iBAAiBR,QAAQ1M,KAAK4M,WAGnC8B,EAAWK,QACXF,EAAIE,QAEJ/O,KAAKqQ,YAAY/P,KAAK,CAAEoO,aAAYE,WAAUC,MAAKC,aAEvD,CAKAyB,gBAAAA,GACE,GAAIvQ,KAAKkQ,kBACP,IACElQ,KAAKmQ,YAAY5D,KAAK8C,wBACpB,EACArP,KAAKmL,aAAasB,YAAc,GAElCzM,KAAKkQ,kBAAkBlB,KAAKhP,KAAKmL,aAAasB,YAAc,GAC5DzM,KAAKkQ,kBAAoB,KACzBlQ,KAAKmQ,YAAc,IACrB,CAAE,MAAOnD,GACPjB,QAAQkB,KAAK,gCAAiCD,EAChD,CAIEhN,KAAKqQ,cACPrQ,KAAKqQ,YAAYd,QAAQiB,IACvB,IACEA,EAAM5B,SAASrC,KAAK8C,wBAClB,EACArP,KAAKmL,aAAasB,YAAc,GAElC+D,EAAM9B,WAAWM,KAAKhP,KAAKmL,aAAasB,YAAc,GACtD+D,EAAM3B,IAAIG,KAAKhP,KAAKmL,aAAasB,YAAc,EACjD,CAAE,MAAOO,GACPjB,QAAQkB,KAAK,8BAA+BD,EAC9C,IAEFhN,KAAKqQ,YAAc,MAGrBtE,QAAQC,IAAI,qCACd,CAKAyE,sBAAAA,CAAuBrP,EAAUsP,EAASC,GACxC,GAAK3Q,KAAKoL,UAAapL,KAAKuL,cAI5B,IACMvL,KAAKoL,SAASwF,WAEhB5Q,KAAKoL,SAASwF,UAAUpE,eACtBpL,EAASc,EACTlC,KAAKmL,aAAasB,aAEpBzM,KAAKoL,SAASyF,UAAUrE,eACtBpL,EAASe,EACTnC,KAAKmL,aAAasB,aAEpBzM,KAAKoL,SAAS0F,UAAUtE,eACtBpL,EAASgB,EACTpC,KAAKmL,aAAasB,aAGpBzM,KAAKoL,SAAS2F,SAASvE,eACrBkE,EAAQxO,EACRlC,KAAKmL,aAAasB,aAEpBzM,KAAKoL,SAAS4F,SAASxE,eACrBkE,EAAQvO,EACRnC,KAAKmL,aAAasB,aAEpBzM,KAAKoL,SAAS6F,SAASzE,eACrBkE,EAAQtO,EACRpC,KAAKmL,aAAasB,aAGpBzM,KAAKoL,SAAS8F,IAAI1E,eAAemE,EAAGzO,EAAGlC,KAAKmL,aAAasB,aACzDzM,KAAKoL,SAAS+F,IAAI3E,eAAemE,EAAGxO,EAAGnC,KAAKmL,aAAasB,aACzDzM,KAAKoL,SAASgG,IAAI5E,eAAemE,EAAGvO,EAAGpC,KAAKmL,aAAasB,eAGzDzM,KAAKoL,SAAS0E,YAAY1O,EAASc,EAAGd,EAASe,EAAGf,EAASgB,GAC3DpC,KAAKoL,SAASiG,eACZX,EAAQxO,EACRwO,EAAQvO,EACRuO,EAAQtO,EACRuO,EAAGzO,EACHyO,EAAGxO,EACHwO,EAAGvO,GAGT,CAAE,MACN,CAEE,CAKAkP,eAAAA,CAAgB7D,GACdzN,KAAKyL,aAAe9I,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAG4K,IAExCzN,KAAKqM,YAAcrM,KAAKmL,cAC1BnL,KAAKqM,WAAWE,KAAKC,eACnBxM,KAAKyL,aACLzL,KAAKmL,aAAasB,aAItBzM,KAAKuR,cACP,CAKAC,cAAAA,CAAe/D,GACbzN,KAAK0L,YAAc/I,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAG4K,IAEvCzN,KAAK4M,WAAa5M,KAAKmL,cACzBnL,KAAK4M,UAAUL,KAAKC,eAClBxM,KAAK0L,YACL1L,KAAKmL,aAAasB,aAItBzM,KAAKuR,cACP,CAKAE,YAAAA,CAAahE,GACXzN,KAAK2L,UAAYhJ,KAAKC,IAAI,EAAGD,KAAKE,IAAI,EAAG4K,IAErCzN,KAAK6M,SAAW7M,KAAKmL,cACvBnL,KAAK6M,QAAQN,KAAKC,eAChBxM,KAAK2L,UACL3L,KAAKmL,aAAasB,aAItBzM,KAAKuR,cACP,CAKAG,UAAAA,GAUE,OATA1R,KAAKwL,SAAWxL,KAAKwL,QAEjBxL,KAAKwL,QACPxL,KAAKuQ,mBACIvQ,KAAKuL,eACdvL,KAAKiQ,oBAGPlE,QAAQC,IAAI,aAAYhM,KAAKwL,QAAU,QAAU,YAC1CxL,KAAKwL,OACd,CAKAmG,QAAAA,GACE,MAAO,CACLpG,cAAevL,KAAKuL,cACpBC,QAASxL,KAAKwL,QACdC,aAAczL,KAAKyL,aACnBC,YAAa1L,KAAK0L,YAClBC,UAAW3L,KAAK2L,UAEpB,CAKAG,YAAAA,GACE,IACE,MAAM8F,EAAgBC,aAAaC,QAAQ,gCAC3C,GAAIF,EAAe,CAAA,IAAAG,EAAAC,EAAAC,EACjB,MAAMC,EAAWC,KAAKC,MAAMR,GAC5B5R,KAAKyL,aAAoC,QAAxBsG,EAAGG,EAASzG,oBAAY,IAAAsG,EAAAA,EAAI,GAC7C/R,KAAK0L,YAAkC,QAAvBsG,EAAGE,EAASxG,mBAAW,IAAAsG,EAAAA,EAAI,GAC3ChS,KAAK2L,UAA8B,QAArBsG,EAAGC,EAASvG,iBAAS,IAAAsG,EAAAA,EAAI,EACzC,CACF,CAAE,MAAOjF,GACPjB,QAAQkB,KAAK,iCAAkCD,EACjD,CACF,CAKAuE,YAAAA,GACE,IACE,MAAMW,EAAW,CACfzG,aAAczL,KAAKyL,aACnBC,YAAa1L,KAAK0L,YAClBC,UAAW3L,KAAK2L,WAElBkG,aAAaQ,QACX,+BACAF,KAAKG,UAAUJ,GAEnB,CAAE,MAAOlF,GACPjB,QAAQkB,KAAK,iCAAkCD,EACjD,CACF,CAKAhC,OAAAA,GACEhL,KAAKuQ,mBAEDvQ,KAAKmL,cAA4C,WAA5BnL,KAAKmL,aAAaoH,OACzCvS,KAAKmL,aAAaqH,QAGpBxS,KAAKqL,OAAON,QACZ/K,KAAKuL,eAAgB,EAErBQ,QAAQC,IAAI,2BACd,EC5nBK,MAAMyG,EACX1S,WAAAA,CAAYoG,EAAOuM,GACjB1S,KAAKmG,MAAQA,EACbnG,KAAK0S,cAAgBA,EAGrB1S,KAAK2S,UAAY,EACjB3S,KAAK4S,cAAgB,EACrB5S,KAAK6S,YAAc,EAGnB7S,KAAK8S,eAAiB,IAAIpQ,EAC1B1C,KAAK+S,UAAW,EAGhB/S,KAAKgT,mBACLhT,KAAKiT,oBAGLjT,KAAKkT,YAAY9N,YAAcpC,GAC7BhD,KAAKmT,iBAAiBnQ,EAC1B,CAKAgQ,gBAAAA,GAEEhT,KAAKoT,KAAO,IAAIC,EAGhB,MAAMC,EAAe,IAAIC,EAAsB,GAAK,IAAK,EAAG,GACtDC,EAAe,IAAIC,EAAwB,CAC/C5N,MAAO,SACPiC,aAAa,EACb4L,QAAS,IACTC,UAAW,GACXC,SAAU,UAENC,EAAW,IAAIC,EAAWR,EAAcE,GAC9CK,EAASE,YAAa,EACtBF,EAASG,eAAgB,EACzBhU,KAAKoT,KAAKrR,IAAI8R,GAGd,MAAMI,EAAe,IAAIC,EAAqB,IAAM,EAAG,GACjDC,EAAe,IAAIV,EAAwB,CAC/C5N,MAAO,SACP8N,UAAW,KAEPS,EAAW,IAAIN,EAAWG,EAAcE,GAC9CC,EAAShT,SAASiT,IAAI,EAAG,GAAK,GAC9BD,EAASL,YAAa,EACtBK,EAASJ,eAAgB,EACzBhU,KAAKoT,KAAKrR,IAAIqS,GAGd,MAAME,EAAc,IAAIf,EAAsB,IAAM,GAAK,EAAG,GACtDgB,EAAc,IAAId,EAAwB,CAC9C5N,MAAO,SACP8N,UAAW,KAIPa,EAAU,IAAIV,EAAWQ,EAAaC,GAC5CC,EAAQpT,SAASiT,KAAI,GAAM,GAAK,GAChCG,EAAQC,SAASrS,EAAI,GACrBoS,EAAQT,YAAa,EACrBS,EAAQR,eAAgB,EACxBhU,KAAKoT,KAAKrR,IAAIyS,GAGd,MAAME,EAAW,IAAIZ,EAAWQ,EAAaC,GAC7CG,EAAStT,SAASiT,IAAI,GAAK,GAAK,GAChCK,EAASD,SAASrS,GAAI,GACtBsS,EAASX,YAAa,EACtBW,EAASV,eAAgB,EACzBhU,KAAKoT,KAAKrR,IAAI2S,GAGd,MAAMC,EAAc,IAAIpB,EAAsB,GAAK,GAAK,EAAG,GACrDqB,EAAc,IAAInB,EAAwB,CAC9C5N,MAAO,SACP8N,UAAW,KAIPkB,EAAU,IAAIf,EAAWa,EAAaC,GAC5CC,EAAQzT,SAASiT,KAAI,KAAO,GAAM,GAClCQ,EAAQd,YAAa,EACrBc,EAAQb,eAAgB,EACxBhU,KAAKoT,KAAKrR,IAAI8S,GAGd,MAAMC,EAAW,IAAIhB,EAAWa,EAAaC,GAC7CE,EAAS1T,SAASiT,IAAI,KAAM,GAAM,GAClCS,EAASf,YAAa,EACtBe,EAASd,eAAgB,EACzBhU,KAAKoT,KAAKrR,IAAI+S,GAGd,MAAMC,EAAkB,IAAIb,EAAqB,IAAM,EAAG,GACpDc,EAAkB,IAAIvB,EAAwB,CAClD5N,MAAO,QACPiC,aAAa,EACb4L,QAAS,GACTC,UAAW,MAEPsB,EAAU,IAAInB,EAAWiB,EAAiBC,GAChDC,EAAQ7T,SAASiT,IAAI,EAAG,GAAK,IAC7BY,EAAQC,MAAMb,IAAI,EAAG,GAAK,IAC1BrU,KAAKoT,KAAKrR,IAAIkT,GAGdjV,KAAKmV,UAAY,CACfX,UACAE,WACAG,UACAC,YAIF9U,KAAKoT,KAAKhS,SAASiT,IAAI,GAAG,EAAI,GAG9BrU,KAAKmG,MAAMpE,IAAI/B,KAAKoT,KACtB,CAKAH,iBAAAA,GACEjT,KAAKkT,YAAclT,KAAK0S,cAAcjN,iBACpCzF,KAAKoT,KAAKhS,SAASM,QACnB,GACA,GAIF1B,KAAK0S,cAAcpO,aAAatE,KAAKkT,YACvC,CAMAkC,WAAAA,CAAYC,GAEVrV,KAAK8S,eAAeuB,IAAI,EAAG,EAAG,GAC9BrU,KAAK+S,UAAW,EAGZsC,EAAWC,OACTD,EAAWC,KAAK5E,UAClB1Q,KAAK8S,eAAe1Q,GAAK,EACzBpC,KAAK+S,UAAW,GAEdsC,EAAWC,KAAKC,WAClBvV,KAAK8S,eAAe1Q,GAAK,EACzBpC,KAAK+S,UAAW,GAEdsC,EAAWC,KAAKE,OAClBxV,KAAK8S,eAAe5Q,GAAK,EACzBlC,KAAK+S,UAAW,GAEdsC,EAAWC,KAAKG,QAClBzV,KAAK8S,eAAe5Q,GAAK,EACzBlC,KAAK+S,UAAW,GAEdsC,EAAWC,KAAK3E,KAClB3Q,KAAK8S,eAAe3Q,GAAK,EACzBnC,KAAK+S,UAAW,GAEdsC,EAAWC,KAAKI,OAClB1V,KAAK8S,eAAe3Q,GAAK,EACzBnC,KAAK+S,UAAW,IAKhBsC,EAAWM,WACb3V,KAAK8S,eAAe5Q,GAAKmT,EAAWM,SAASzT,EAC7ClC,KAAK8S,eAAe1Q,GAAKiT,EAAWM,SAASxT,GAE3CQ,KAAKiT,IAAIP,EAAWM,SAASzT,GAAK,IAClCS,KAAKiT,IAAIP,EAAWM,SAASxT,GAAK,MAElCnC,KAAK+S,UAAW,IAKhBsC,EAAWQ,gBACTR,EAAWQ,cAAcC,SAC3B9V,KAAK8S,eAAe3Q,GAAK,EACzBnC,KAAK+S,UAAW,GAEdsC,EAAWQ,cAAcE,WAC3B/V,KAAK8S,eAAe3Q,GAAK,EACzBnC,KAAK+S,UAAW,IAKhB/S,KAAK8S,eAAejO,SAAW,GACjC7E,KAAK8S,eAAekD,YAItBhW,KAAKiW,eACP,CAKAA,aAAAA,GACE,IAAKjW,KAAK+S,SAGR,YADA/S,KAAKkT,YAAYxP,SAAS7B,eAAe,IAK3C,MAAMqU,EAAQlW,KAAK8S,eAChBpR,QACAG,eAAgC,IAAjB7B,KAAK2S,WAWvB,GARA3S,KAAKkT,YAAYxP,SAAS3B,IAAImU,GAG1BlW,KAAKkT,YAAYxP,SAASmB,SAAW7E,KAAK6S,aAC5C7S,KAAKkT,YAAYxP,SAASsS,YAAYnU,eAAe7B,KAAK6S,aAIxD7S,KAAK8S,eAAejO,SAAW,GAAK,CACtC,MAAMsR,EAAiBxT,KAAKyT,MAC1BpW,KAAK8S,eAAe5Q,EACpBlC,KAAK8S,eAAe1Q,GAEtBpC,KAAKoT,KAAKqB,SAAStS,EAAIkU,EAAgBC,KACrCtW,KAAKoT,KAAKqB,SAAStS,EACnBgU,EACqB,KAArBnW,KAAK4S,eAKP,MAAM2D,EAAsC,GAAxBvW,KAAK8S,eAAe1Q,EACxCpC,KAAKoT,KAAKqB,SAASvS,EAAImU,EAAgBC,KACrCtW,KAAKoT,KAAKqB,SAASvS,EACnBqU,EACqB,KAArBvW,KAAK4S,eAIP,MAAM4D,EAAkB7T,KAAKiT,IAAI5V,KAAK8S,eAAe1Q,GAC/CqU,EAAgBzW,KAAK8S,eAAe5Q,EAAIsU,EAAkB,GAChExW,KAAKoT,KAAKqB,SAASrS,EAAIiU,EAAgBC,KACrCtW,KAAKoT,KAAKqB,SAASrS,EACnBqU,EACqB,KAArBzW,KAAK4S,cAET,MAEE5S,KAAKoT,KAAKqB,SAASvS,EAAImU,EAAgBC,KACrCtW,KAAKoT,KAAKqB,SAASvS,EACnB,EACqB,KAArBlC,KAAK4S,eAEP5S,KAAKoT,KAAKqB,SAASrS,EAAIiU,EAAgBC,KACrCtW,KAAKoT,KAAKqB,SAASrS,EACnB,EACqB,KAArBpC,KAAK4S,cAGX,CAKApO,MAAAA,GAEExE,KAAKoT,KAAKhS,SAAS+D,KAAKnF,KAAKkT,YAAY9R,UAGzC,MAAMoG,EAAoB,KAAbkP,KAAKC,MACZC,EAAsC,IAArBjU,KAAKkU,IAAW,EAAPrP,GAIhC,GAHAxH,KAAKoT,KAAKhS,SAASe,GAAKyU,EAGpB5W,KAAKmV,WAAanV,KAAK+S,SAAU,CACnC,MAAM+D,EAAkB,EAAPtP,EAGjBxH,KAAKmV,UAAUX,QAAQC,SAASvS,EAAyB,GAArBS,KAAKkU,IAAIC,GAC7C9W,KAAKmV,UAAUT,SAASD,SAASvS,EAAmC,GAA/BS,KAAKkU,IAAIC,EAAWnU,KAAKoU,IAG9D/W,KAAKmV,UAAUN,QAAQJ,SAASvS,EAA+B,GAA3BS,KAAKkU,IAAe,IAAXC,GAC7C9W,KAAKmV,UAAUL,SAASL,SAASvS,EACM,GAArCS,KAAKkU,IAAe,IAAXC,EAAiBnU,KAAKoU,GACnC,SAAW/W,KAAKmV,UAAW,CAEzB,MAAM6B,EAAkB,GAAPxP,EACjBxH,KAAKmV,UAAUX,QAAQC,SAASvS,EAAyB,GAArBS,KAAKkU,IAAIG,GAC7ChX,KAAKmV,UAAUT,SAASD,SAASvS,EAAmC,GAA/BS,KAAKkU,IAAIG,EAAWrU,KAAKoU,IAC9D/W,KAAKmV,UAAUN,QAAQJ,SAASvS,EAA+B,IAA3BS,KAAKkU,IAAe,GAAXG,GAC7ChX,KAAKmV,UAAUL,SAASL,SAASvS,EACM,IAArCS,KAAKkU,IAAe,GAAXG,EAAiBrU,KAAKoU,GACnC,CAIF,CAMA5D,gBAAAA,CAAiBnQ,GACf,IAAK,MAAMgC,KAAahC,EAEC,gBAAnBgC,EAAUC,KACZjF,KAAKiX,2BAA2BjS,GACJ,aAAnBA,EAAUC,KACnBjF,KAAKkX,wBAAwBlS,GACD,gBAAnBA,EAAUC,MACnBjF,KAAKmX,2BAA2BnS,EAGtC,CAMAiS,0BAAAA,CAA2BG,GAGzBrL,QAAQC,IAAI,yBAA0BoL,EACxC,CAMAF,uBAAAA,CAAwBG,GAEtB,MAAMC,EAAYtX,KAAKkT,YAAY9R,SAChCM,QACAC,IAAI0V,EAASjW,UACb4U,YAEHhW,KAAKkT,YAAYxP,SAAS3B,IAAIuV,EAAUzV,eAAe,GACzD,CAMAsV,0BAAAA,GAEF,CAOEI,WAAAA,GAEE,OAAOvX,KAAKkT,YAAY9R,SAASM,OACnC,CAMAoO,WAAAA,CAAY1O,GACVpB,KAAKoT,KAAKhS,SAAS+D,KAAK/D,GACxBpB,KAAKkT,YAAY9R,SAAS+D,KAAK/D,EACjC,CAMAoW,WAAAA,GACE,OAAOxX,KAAKkT,YAAYxP,SAAShC,OACnC,CAMA+V,WAAAA,GACE,OAAOzX,KAAK+S,UAAY/S,KAAKkT,YAAYxP,SAASmB,SAAW,EAC/D,CAKAmG,OAAAA,GAEEhL,KAAK0S,cAAcnO,gBAAgBvE,KAAKkT,aAGxClT,KAAKmG,MAAM8E,OAAOjL,KAAKoT,MAGnBpT,KAAKoT,KAAKsE,SACZ1X,KAAKoT,KAAKsE,SAASnI,QAAQoI,IACrBA,EAAM/Q,UACR+Q,EAAM/Q,SAASoE,UAEb2M,EAAMtQ,WACJuQ,MAAMC,QAAQF,EAAMtQ,UACtBsQ,EAAMtQ,SAASkI,QAAQlI,GAAYA,EAAS2D,WAE5C2M,EAAMtQ,SAAS2D,cAMjBhL,KAAKoT,KAAKxM,UACZ5G,KAAKoT,KAAKxM,SAASoE,UAEjBhL,KAAKoT,KAAK/L,UACZrH,KAAKoT,KAAK/L,SAAS2D,UAGzB,EClbK,MAAM8M,EACX/X,WAAAA,CAAYoG,EAAOuM,EAAetR,EAAW,IAAIsB,EAAc,EAAG,GAAG,KACnE1C,KAAKmG,MAAQA,EACbnG,KAAK0S,cAAgBA,EACrB1S,KAAKoB,SAAWA,EAASM,QAGzB1B,KAAKuI,MAAQ,EACbvI,KAAKwI,OAAS,EACdxI,KAAKkO,MAAQ,GACblO,KAAK+X,aAAc,EACnB/X,KAAKgY,aAAc,EAGnBhY,KAAKiY,WAAa,IAClBjY,KAAK4S,cAAgB,IACrB5S,KAAKwH,KAAO,EAGZxH,KAAKkY,iBACLlY,KAAKiT,oBAELlH,QAAQC,IAAI,+BAAgC5K,EAC9C,CAKA8W,cAAAA,GAEE,MAAMC,EAAe,IAAIC,EAAoBpY,KAAKuI,MAAO,GAAK,EAAG,IAG3D8P,EAAe,IAAI5E,EAAwB,CAC/C5N,MAAO,MACPyS,SAAU,MACVC,kBAAmB,GACnBzQ,aAAa,EACb4L,QAAS,GACTC,UAAW,MAGb3T,KAAKwY,SAAW,IAAI1E,EAAWqE,EAAcE,GAC7CrY,KAAKwY,SAASpX,SAAS+D,KAAKnF,KAAKoB,UACjCpB,KAAKwY,SAASzE,YAAa,EAC3B/T,KAAKwY,SAASxE,eAAgB,EAG9B,MAAMyE,EAAiB,IAAIC,EACZ,IAAb1Y,KAAKuI,MACLvI,KAAKwI,QAEDmQ,EAAiB,IAAIC,EAAwB,CACjD/S,MAAO,MACPiC,aAAa,EACb4L,QAAS,GACTmF,KAAMC,IAGR9Y,KAAK+Y,WAAa,IAAIjF,EAAW2E,EAAgBE,GACjD3Y,KAAK+Y,WAAW3X,SAAS+D,KAAKnF,KAAKoB,UAGnCpB,KAAKgZ,UAAY,IAAIC,EAAiB,MAAU,EAAK,IACrDjZ,KAAKgZ,UAAU5X,SAAS+D,KAAKnF,KAAKoB,UAClCpB,KAAKgZ,UAAU5X,SAASgB,GAAK,EAG7BpC,KAAKkZ,UAAY,GAEjB,IAAK,IAAI5T,EAAI,EAAGA,EADK,EACaA,IAAK,CACrC,MAAM6T,EAAS7T,EAFI,EAEgB3C,KAAKoU,GAAK,EACvCqC,EAAW,IAAIH,EAAiB,MAAU,GAAK,IAC/CI,EAA2B,IAAbrZ,KAAKuI,MACzB6Q,EAAShY,SAASiT,IAChBrU,KAAKoB,SAASc,EAAIS,KAAK2W,IAAIH,GAASE,EACpCrZ,KAAKoB,SAASe,EAAIQ,KAAKkU,IAAIsC,GAASE,EAAc,GAClDrZ,KAAKoB,SAASgB,EAA4B,GAAvBO,KAAKmH,SAAW,KAErCsP,EAASG,SAAW,CAClBC,cAAeL,EACfM,gBAAiB9W,KAAKmH,SAAWnH,KAAKoU,GAAK,GAE7C/W,KAAKkZ,UAAU5Y,KAAK8Y,EACtB,CAGApZ,KAAK0Z,eAAc,EACrB,CAMAzG,iBAAAA,GAGEjT,KAAKkT,YAAc,GAMnB,MAAMyG,EAAa3Z,KAAKuI,MAAQ,GAGhC,IAAK,IAAIjD,EAAI,EAAGA,EAFC,EAEaA,IAAK,CACjC,MAAM6T,EAAS7T,EAHA,EAGgB3C,KAAKoU,GAAK,EACnC7U,EAAIS,KAAK2W,IAAIH,GAASQ,EACtBxX,EAAIQ,KAAKkU,IAAIsC,GAASQ,EAAa,GAEnCC,EAAkB5Z,KAAKoB,SAASM,QACtCkY,EAAgB1X,GAAKA,EACrB0X,EAAgBzX,GAAKA,EAErB,MAAM0X,EAAc7Z,KAAK0S,cAAcjN,iBACrCmU,EACA,GACA,GAEFC,EAAY5U,KAAO,OACnB4U,EAAYC,KAAO9Z,KACnBA,KAAK0S,cAAcpO,aAAauV,GAChC7Z,KAAKkT,YAAY5S,KAAKuZ,EACxB,CAGA,MAAME,EAAa/Z,KAAK0S,cAAcjN,iBACpCzF,KAAKoB,SAASM,QACd,GACA,GAEFqY,EAAW9U,KAAO,OAClB8U,EAAWD,KAAO9Z,KAClBA,KAAK0S,cAAcpO,aAAayV,GAChC/Z,KAAKkT,YAAY5S,KAAKyZ,EACxB,CAKAC,QAAAA,GACMha,KAAK+X,cAIT/X,KAAK+X,aAAc,EACnB/X,KAAK0Z,eAAc,GAGnB1Z,KAAKwY,SAASnR,SAASkR,kBAAoB,GAC3CvY,KAAKgZ,UAAUiB,UAAY,IAG3Bja,KAAKkZ,UAAU3J,QAAQ2K,IACrBA,EAAMD,UAAY,KAGpBlO,QAAQC,IAAI,qBACd,CAKAmO,UAAAA,GACEna,KAAK+X,aAAc,EACnB/X,KAAK0Z,eAAc,GACnB1Z,KAAKwY,SAASnR,SAASkR,kBAAoB,GAC3CvY,KAAKgZ,UAAUiB,UAAY,EAG3Bja,KAAKkZ,UAAU3J,QAAQ2K,IACrBA,EAAMD,UAAY,IAEtB,CAKAP,aAAAA,CAAcU,GACRA,GACFpa,KAAKmG,MAAMpE,IAAI/B,KAAKwY,UACpBxY,KAAKmG,MAAMpE,IAAI/B,KAAK+Y,YACpB/Y,KAAKmG,MAAMpE,IAAI/B,KAAKgZ,WAEpBhZ,KAAKkZ,UAAU3J,QAAQ2K,GAASla,KAAKmG,MAAMpE,IAAImY,MAE/Cla,KAAKmG,MAAM8E,OAAOjL,KAAKwY,UACvBxY,KAAKmG,MAAM8E,OAAOjL,KAAK+Y,YACvB/Y,KAAKmG,MAAM8E,OAAOjL,KAAKgZ,WAEvBhZ,KAAKkZ,UAAU3J,QAAQ2K,GAASla,KAAKmG,MAAM8E,OAAOiP,IAEtD,CAKAG,aAAAA,GACE,SAAKra,KAAK+X,aAAe/X,KAAKgY,cAI9BhY,KAAKgY,aAAc,EACnBjM,QAAQC,IAAI,4CAGZhM,KAAKwY,SAASnR,SAASkR,kBAAoB,EAC3CvY,KAAKgZ,UAAUiB,UAAY,EAEpB,GACT,CAKAzV,MAAAA,CAAOhB,GACL,IAAKxD,KAAK+X,YACR,OAGF/X,KAAKwH,MAAQhE,EAGb,MAAM8W,EACJ,GAAmD,GAA7C3X,KAAKkU,IAAI7W,KAAKwH,KAAOxH,KAAKiY,WAAa,IAC/CjY,KAAKwY,SAASnR,SAASkR,kBAAoB+B,EAC3Cta,KAAKgZ,UAAUiB,UAAY,GAAMK,EAGjCta,KAAKwY,SAAS/D,SAASrS,GAAKpC,KAAK4S,cAGjC5S,KAAK+Y,WAAW1R,SAASqM,QACvB,GAAmD,GAA7C/Q,KAAKkU,IAAI7W,KAAKwH,KAAOxH,KAAKiY,WAAa,IAG/CjY,KAAKkZ,UAAU3J,QAAQ,CAAC2K,EAAO1Z,KAC7B,MAAM+Y,EAAWW,EAAMX,SACjBgB,EAA4B,GAAZva,KAAKwH,KAAa+R,EAASE,gBAG3Ce,EAAc,GAA8C,GAAxC7X,KAAKkU,IAAI0D,EAAwB,GAAR/Z,GACnD0Z,EAAMD,UAAYO,EAGlB,MAAMnB,EAA2B,IAAbrZ,KAAKuI,MACnBkS,EAAuC,GAA9B9X,KAAKkU,IAAoB,EAAhB0D,GACxBL,EAAM9Y,SAASiT,IACbrU,KAAKoB,SAASc,EACZS,KAAK2W,IAAIC,EAASC,gBAAkBH,EAAcoB,GACpDza,KAAKoB,SAASe,EACZQ,KAAKkU,IAAI0C,EAASC,gBAAkBH,EAAcoB,GAAU,GAC9Dza,KAAKoB,SAASgB,EAAkC,GAA9BO,KAAKkU,IAAoB,EAAhB0D,KAGjC,CAKAhD,WAAAA,GACE,OAAOvX,KAAKoB,SAASM,OACvB,CAKAgZ,cAAAA,GACE,OAAO1a,KAAK+X,WACd,CAKA4C,cAAAA,GACE,OAAO3a,KAAKgY,WACd,CAKA/R,KAAAA,GACEjG,KAAKgY,aAAc,EACnBhY,KAAKma,aACLna,KAAKwH,KAAO,CACd,CAKAwD,OAAAA,GAEM4M,MAAMC,QAAQ7X,KAAKkT,aACrBlT,KAAKkT,YAAY3D,QAAQhM,IACvBvD,KAAK0S,cAAcnO,gBAAgBhB,KAE5BvD,KAAKkT,aACdlT,KAAK0S,cAAcnO,gBAAgBvE,KAAKkT,aAI1ClT,KAAK0Z,eAAc,GAGf1Z,KAAKwY,WACPxY,KAAKwY,SAAS5R,SAASoE,UACvBhL,KAAKwY,SAASnR,SAAS2D,WAGrBhL,KAAK+Y,aACP/Y,KAAK+Y,WAAWnS,SAASoE,UACzBhL,KAAK+Y,WAAW1R,SAAS2D,WAG3Be,QAAQC,IAAI,oBACd,EC5TK,MAAM4O,EAQX,aAAOC,CAAOC,EAAc,GAAKC,EAAc,GAAK7S,EAAS,EAAGgG,EAAQ,IAEtE,MAAM8M,EAAY,IAAIC,EAIhBC,EADuB,EAAVvY,KAAKoU,GAAU7O,EACA,EAGlC,IAAIiR,GAASxW,KAAKoU,GAAK,EACvBiE,EAAUG,OACRxY,KAAK2W,IAAIH,GAAS4B,EAClBpY,KAAKkU,IAAIsC,GAAS4B,GAIpB,IAAK,IAAIzV,EAAI,EAAGA,EAAI4C,EAAQ5C,IAE1B6T,GAAS+B,EACTF,EAAUI,OACRzY,KAAK2W,IAAIH,GAAS2B,EAClBnY,KAAKkU,IAAIsC,GAAS2B,GAIpB3B,GAAS+B,EACTF,EAAUI,OACRzY,KAAK2W,IAAIH,GAAS4B,EAClBpY,KAAKkU,IAAIsC,GAAS4B,GAKtB,MASMM,EAAe,IAAIC,EAAsBN,EATvB,CACtB9M,MAAOA,EACPqN,cAAc,EACdC,cAAe,EACfC,MAAO,EACPC,UAAW,IACXC,eAAgB,MAQlB,OAFAN,EAAaO,SAENP,CACT,CAOA,qBAAOQ,CAAehW,EAAQ,SAAU0S,EAAoB,IAC1D,WAAW9E,EAAwB,CACjC5N,MAAOA,EACPyS,SAAUzS,EACV0S,kBAAmBA,EACnB5E,UAAW,IACXC,SAAU,SACV9L,aAAa,EACb4L,QAAS,KAEb,CAKA,qBAAOoI,GACL,MAAMC,EAAW,GAiBjB,MAdgB,CACd,CAAEC,MAAO,IAAMC,MAAO,IAAMpW,MAAO,UACnC,CAAEmW,MAAO,IAAMC,MAAO,IAAMpW,MAAO,UACnC,CAAEmW,MAAO,IAAMC,MAAO,IAAMpW,MAAO,UACnC,CAAEmW,MAAO,GAAKC,MAAO,GAAKpW,MAAO,UACjC,CAAEmW,MAAO,IAAMC,MAAO,IAAMpW,MAAO,WAG7B0J,QAAQtF,IACd,MAAMrD,EAAWgU,EAAaC,OAAO5Q,EAAO+R,MAAO/R,EAAOgS,OACpD5U,EAAWuT,EAAaiB,eAAe5R,EAAOpE,OACpDkW,EAASzb,KAAK,CAAEsG,WAAUS,WAAU4C,aAG/B8R,CACT,ECzFF,MAAMG,EAGM,aAHNA,EAIO,UAJPA,EAKE,KAGR,MAAMC,EACJpc,WAAAA,GACEC,KAAKmG,MAAQ,KACbnG,KAAKoc,OAAS,KACdpc,KAAKqc,SAAW,KAChBrc,KAAKoI,OAAS,KACdpI,KAAKsc,UAAW,EAChBtc,KAAKuc,SAAWvc,KAAKwc,eAGrBxc,KAAK0S,cAAgB,KACrB1S,KAAKyc,eAAiB,KACtBzc,KAAK0c,YAAc,KACnB1c,KAAK2c,OAAS,KACd3c,KAAK8Z,KAAO,KACZ9Z,KAAK4c,mBAAqB,GAC1B5c,KAAK6c,aAAe,GAGpB7c,KAAK8c,UAAY,EACjB9c,KAAK+c,YAAc,EAGnB/c,KAAKqV,WAAa,CAChBC,KAAM,CACJ5E,SAAS,EACT6E,UAAU,EACVC,MAAM,EACNC,OAAO,EACP9E,IAAI,EACJ+E,MAAM,GAERC,SAAU,CAAEzT,EAAG,EAAGC,EAAG,GACrB6a,eAAgB,CAAE9a,EAAG,EAAGC,EAAG,GAC3B0T,cAAe,CAAEC,QAAQ,EAAOC,UAAU,IAI5C/V,KAAKid,eAAiB,CACpBC,WAAY,EACZC,SAAU,EACVC,YAAapd,KAAKuc,SAAW,MAAS,MAIxCvc,KAAKqd,0BAA4B,KAGjCrd,KAAKsd,SAAW,EAEhBvR,QAAQC,IAAI,uCACd,CAEA,gBAAMC,GACJ,MAAMwP,EAAQ,CACZ,CAAE8B,KAAM,eAAgBC,GAAIA,IAAMxd,KAAKyd,eACvC,CAAEF,KAAM,iBAAkBC,GAAIA,IAAMxd,KAAK0d,iBACzC,CAAEH,KAAM,WAAYC,GAAIA,IAAMxd,KAAK2d,cACnC,CAAEJ,KAAM,SAAUC,GAAIA,IAAMxd,KAAK4d,eACjC,CAAEL,KAAM,WAAYC,GAAIA,IAAMxd,KAAK6d,eACnC,CAAEN,KAAM,iBAAkBC,GAAIA,IAAMxd,KAAK8d,qBACzC,CAAEP,KAAM,kBAAmBC,GAAIA,IAAMxd,KAAK+d,4BAC1C,CAAER,KAAM,eAAgBC,GAAIA,IAAMxd,KAAKge,mBACvC,CAAET,KAAM,cAAeC,GAAIA,IAAMxd,KAAKie,+BACtC,CAAEV,KAAM,SAAUC,GAAIA,IAAMxd,KAAKke,gBACjC,CAAEX,KAAM,eAAgBC,GAAIA,IAAMxd,KAAKme,qBACvC,CAAEZ,KAAM,OAAQC,GAAIA,IAAMxd,KAAKoe,cAC/B,CAAEb,KAAM,gBAAiBC,GAAIA,IAAMxd,KAAKqe,sBACxC,CAAEd,KAAM,kBAAmBC,GAAIA,IAAMxd,KAAKse,uBAC1C,CACEf,KAAM,oBACNC,GAAIA,KACFxd,KAAKue,cACLve,KAAKwe,WAGT,CAAEjB,KAAM,YAAaC,GAAIA,IAAMxd,KAAKye,kBAGtC,IACE1S,QAAQC,IAAI,mDAEZ,IAAK,IAAI1G,EAAI,EAAGA,EAAImW,EAAM5W,OAAQS,IAAK,CACrC,MAAMoZ,EAAOjD,EAAMnW,GACnByG,QAAQC,IAAI,IAAI1G,EAAI,KAAKmW,EAAM5W,wBAAwB6Z,EAAKnB,WAE5D,UACQmB,EAAKlB,KACXzR,QAAQC,IAAI,KAAK0S,EAAKnB,gCACxB,CAAE,MAAOoB,GAEP,MADA5S,QAAQiB,MAAM,0BAA0B0R,EAAKnB,QAASoB,GAChD,IAAIC,MACR,kCAAkCF,EAAKnB,UAAUoB,EAAUE,UAE/D,CACF,CAEA7e,KAAKsc,UAAW,EAChBvQ,QAAQC,IAAI,sCACd,CAAE,MAAOgB,GACPjB,QAAQiB,MAAM,+BAAgCA,GAC9ChN,KAAK8e,UAAU,8BAAgC9R,EAAM6R,QACvD,CACF,CAEApB,WAAAA,GAGE,GAFA1R,QAAQC,IAAI,2BACZhM,KAAKoI,OAASC,SAAS0W,eAAe7C,IACjClc,KAAKoI,OACR,MAAM,IAAIwW,MAAM,yBAElB7S,QAAQC,IAAI,gCACd,CAEA0R,aAAAA,GACE3R,QAAQC,IAAI,mCACZ,IACEhM,KAAKqc,SAAW,IAAI2C,EAAoB,CACtC5W,OAAQpI,KAAKoI,OACb6W,WAAYjf,KAAKuc,SACjBxW,OAAO,EACPmZ,gBAAiBlf,KAAKuc,SAAW,YAAc,mBAC/C4C,8BAA8B,EAC9BC,uBAAuB,EACvBC,oBAAoB,EACpBC,SAAS,IAGXtf,KAAKqc,SAASkD,QAAQrT,OAAOsT,WAAYtT,OAAOuT,aAChDzf,KAAKqc,SAASqD,cAAc/c,KAAKE,IAAIqJ,OAAOyT,iBAAkB,IAC9D3f,KAAKqc,SAASuD,cAAc,KAAU,GAGtC5f,KAAKqc,SAASwD,UAAUC,SAAU,EAClC9f,KAAKqc,SAASwD,UAAU5a,KAAOjF,KAAKuc,SAChCwD,EACAC,EAGJhgB,KAAKqc,SAAS4D,iBAAmBC,EACjClgB,KAAKqc,SAAS8D,YAAcC,EAC5BpgB,KAAKqc,SAASgE,oBAAsB,EAGpC,MAAMC,EAAKtgB,KAAKqc,SAAS3T,aACzB,IAAK4X,EACH,MAAM,IAAI1B,MAAM,+BAIlB0B,EAAGC,aAAa,sBAEhBxU,QAAQC,IAAI,2CACd,CAAE,MAAOgB,GAEP,MADAjB,QAAQiB,MAAM,oCAAqCA,GAC7C,IAAI4R,MAAM,gCAAgC5R,EAAM6R,UACxD,CACF,CAEAlB,UAAAA,GACE5R,QAAQC,IAAI,6BACZhM,KAAKmG,MAAQ,IAAIqa,EACjBzU,QAAQC,IAAI,kCACd,CAKA8R,iBAAAA,GACE9d,KAAK0S,cAAgB,IAAI3O,EACzBgI,QAAQC,IAAI,+BACd,CAKA+R,wBAAAA,GACE/d,KAAKyc,eAAiB,IAAIvW,EAAelG,KAAKmG,MAAO,KACrD4F,QAAQC,IAAI,gCACd,CAKAgS,eAAAA,GACEhe,KAAK0c,YAAc,IAAIxR,EAEvBa,QAAQC,IAAI,gEACd,CAKA,wBAAMyU,GACJ,GAAIzgB,KAAK0c,cAAgB1c,KAAK0c,YAAYnR,cACxC,UACQvL,KAAK0c,YAAYzQ,aACvBjM,KAAK0c,YAAYzM,oBACjBlE,QAAQC,IAAI,iDACd,CAAE,MAAOgB,GACPjB,QAAQkB,KAAK,+BAAgCD,EAC/C,CAEJ,CAEA4Q,WAAAA,GACE5d,KAAKoc,OAAS,IAAIsE,EAChB,GACAxU,OAAOsT,WAAatT,OAAOuT,YAC3B,GACA,KAIFzf,KAAKoc,OAAOhb,SAASiT,IAAI,EAAG,EAAG,IAC/BrU,KAAKoc,OAAOuE,OAAO,GAAG,EAAI,EAC5B,CAEA9C,WAAAA,GAEE,MAAM+C,EAAe,IAAIC,EAAmB,QAAU,IACtD7gB,KAAKmG,MAAMpE,IAAI6e,GAGf,MAAME,EAAmB,IAAIC,EAAuB,QAAU,KAI9D,GAHAD,EAAiB1f,SAASiT,IAAI,EAAG,GAAI,IAGjCrU,KAAKqc,SAASwD,UAAUC,QAAS,CACnCgB,EAAiB/M,YAAa,EAE9B,MAAMiN,EAAgBhhB,KAAKuc,SAAW,IAAM,KAC5CuE,EAAiBG,OAAOC,QAAQ3Y,MAAQyY,EACxCF,EAAiBG,OAAOC,QAAQ1Y,OAASwY,EACzCF,EAAiBG,OAAO7E,OAAO+E,KAAO,GACtCL,EAAiBG,OAAO7E,OAAOgF,IAAM,IACrCN,EAAiBG,OAAO7E,OAAO5G,MAAO,GACtCsL,EAAiBG,OAAO7E,OAAO3G,MAAQ,GACvCqL,EAAiBG,OAAO7E,OAAOiF,IAAM,GACrCP,EAAiBG,OAAO7E,OAAOkF,QAAS,GAEpCthB,KAAKuc,WACPuE,EAAiBG,OAAOM,MAAO,KAEnC,CAEAvhB,KAAKmG,MAAMpE,IAAI+e,GAGf9gB,KAAKwhB,gCAGL,MAAMpI,EAAW,IAAI2H,EAAuB,QAAU,IACtD3H,EAAShY,SAASiT,KAAI,GAAK,IAAI,IAC/BrU,KAAKmG,MAAMpE,IAAIqX,GAGfpZ,KAAKyhB,cACP,CAKAA,YAAAA,GACE,MAAMC,EAAc,IAAIxN,EAAqB,KAAM,GAAI,IAGjDyN,EAAc,IAAI/I,EAAwB,CAC9C/S,MAAO,QACPgT,KAAM+I,EACN9Z,aAAa,EACb+Z,KAAK,IAGDC,EAAU,IAAIhO,EAAW4N,EAAaC,GAC5CG,EAAQ1gB,SAASiT,IAAI,EAAG,EAAG,GAC3BrU,KAAKmG,MAAMpE,IAAI+f,GAGf9hB,KAAK+hB,eAELhW,QAAQC,IAAI,oBACd,CAKA+V,YAAAA,GACE/hB,KAAKgiB,OAAS,GAGd,IAAK,IAAI1c,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAM2c,EAAa,IAAI5O,EAGjB6O,EAAc,EAAIvf,KAAKwf,MAAsB,EAAhBxf,KAAKmH,UACxC,IAAK,IAAIsY,EAAI,EAAGA,EAAIF,EAAaE,IAAK,CACpC,MAAMC,EAAa,EAAoB,GAAhB1f,KAAKmH,SACtBwY,EAAgB,IAAIpO,EAAqBmO,EAAY,GAAI,IACzDE,EAAgB,IAAI3J,EAAwB,CAChD/S,MAAO,SACPiC,aAAa,EACb4L,QAAS,GAAsB,GAAhB/Q,KAAKmH,SACpB+X,KAAK,IAGDW,EAAc,IAAI1O,EAAWwO,EAAeC,GAGlDC,EAAYphB,SAASiT,IACK,IAAvB1R,KAAKmH,SAAW,IACO,GAAvBnH,KAAKmH,SAAW,IACO,IAAvBnH,KAAKmH,SAAW,KAGnBmY,EAAWlgB,IAAIygB,EACjB,CAGA,MAAMrJ,EAAS7T,EAAI,GAAM3C,KAAKoU,GAAK,EAC7BzV,EAAS,IAAsB,IAAhBqB,KAAKmH,SAC1BmY,EAAW7gB,SAASiT,IAClB1R,KAAK2W,IAAIH,GAAS7X,EAClB,GAAqB,GAAhBqB,KAAKmH,SACVnH,KAAKkU,IAAIsC,GAAS7X,GAIpB,MAAM4T,EAAQ,EAAsB,EAAhBvS,KAAKmH,SACzBmY,EAAW/M,MAAMuN,UAAUvN,GAG3B+M,EAAW1I,SAAW,CACpBmJ,iBAAkBT,EAAW7gB,SAASM,QACtCihB,MAAO,IAAuB,IAAhBhgB,KAAKmH,SACnB8Y,OAAQjgB,KAAKmH,SAAWnH,KAAKoU,GAAK,GAGpC/W,KAAKgiB,OAAO1hB,KAAK2hB,GACjBjiB,KAAKmG,MAAMpE,IAAIkgB,EACjB,CAEAlW,QAAQC,IAAI,cAAchM,KAAKgiB,OAAOnd,oCACxC,CAEA2c,6BAAAA,GAEE,MAAMqB,EAAc,CAAC,QAAU,QAAU,QAAU,OAC7CC,EAAa9iB,KAAKuc,SAAW,EAAI,EAEvC,IAAK,IAAIjX,EAAI,EAAGA,EAAIwd,EAAYxd,IAAK,CACnC,MAAMyd,EAAa,IAAI9J,EACrB4J,EAAYvd,EAAIud,EAAYhe,QAC5B7E,KAAKuc,SAAW,EAAM,EACtB,GACA,GAIIpD,EAAS7T,EAAIwd,EAAcngB,KAAKoU,GAAK,EACrCzV,EAAS,GAAqB,GAAhBqB,KAAKmH,SACzBiZ,EAAW3hB,SAASiT,IAClB1R,KAAK2W,IAAIH,GAAS7X,EAClB,EAAoB,EAAhBqB,KAAKmH,SACTnH,KAAKkU,IAAIsC,GAAS7X,GAIpByhB,EAAWxJ,SAAW,CACpBmJ,iBAAkBK,EAAW3hB,SAASM,QACtC+X,gBAAiB9W,KAAKmH,SAAWnH,KAAKoU,GAAK,EAC3CiM,eAAgB,GAAsB,GAAhBrgB,KAAKmH,SAC3BmZ,gBAAiB,EAAoB,EAAhBtgB,KAAKmH,UAG5B9J,KAAKmG,MAAMpE,IAAIghB,GAGV/iB,KAAKkjB,mBACRljB,KAAKkjB,iBAAmB,IAE1BljB,KAAKkjB,iBAAiB5iB,KAAKyiB,EAC7B,CACF,CAKAI,mBAAAA,GACE,MAAMC,EAAcpjB,KAAK+c,YAAc,GAAM,EAE7C,GAAIqG,EAAa,CAEf,MAAMC,EAAc,IAAInP,EAAqB,EAAG,GAAI,IAC9CoP,EAAc,IAAI1K,EAAwB,CAC9C/S,MAAO,SACPiC,aAAa,IAEf9H,KAAKujB,cAAgB,IAAIzP,EAAWuP,EAAaC,GAGjDtjB,KAAKujB,cAAcniB,SAASiT,IAAI,GAAI,IAAI,IAGxCrU,KAAKwjB,eAAiB,IAAIzC,EAAuB,SAAU,KAC3D/gB,KAAKwjB,eAAepiB,SAAS+D,KAAKnF,KAAKujB,cAAcniB,UACrDpB,KAAKwjB,eAAeC,OAAOriB,SAASiT,IAAI,EAAG,EAAG,GAE9CtI,QAAQC,IAAI,gCAAiChM,KAAK+c,YACpD,KAAO,CAEL,MAAM2G,EAAe,IAAIxP,EAAqB,EAAG,GAAI,IAC/CyP,EAAe,IAAI/K,EAAwB,CAC/C/S,MAAO,SACPiC,aAAa,IAEf9H,KAAKujB,cAAgB,IAAIzP,EAAW4P,EAAcC,GAGlD3jB,KAAKujB,cAAcniB,SAASiT,KAAI,GAAK,IAAI,IAGzCrU,KAAKwjB,eAAiB,IAAIzC,EAAuB,SAAU,IAC3D/gB,KAAKwjB,eAAepiB,SAAS+D,KAAKnF,KAAKujB,cAAcniB,UACrDpB,KAAKwjB,eAAeC,OAAOriB,SAASiT,IAAI,EAAG,EAAG,GAE9CtI,QAAQC,IAAI,gCAAiChM,KAAK+c,YACpD,CAGA/c,KAAKujB,cAAchK,SAAW,CAC5BmJ,iBAAkB1iB,KAAKujB,cAAcniB,SAASM,QAC9C0hB,YAAaA,EACbH,gBAAiB,GACjBD,eAAgB,IAGlBhjB,KAAKmG,MAAMpE,IAAI/B,KAAKujB,eACpBvjB,KAAKmG,MAAMpE,IAAI/B,KAAKwjB,gBACpBxjB,KAAKmG,MAAMpE,IAAI/B,KAAKwjB,eAAeC,OACrC,CAKAG,8BAAAA,GAEE5jB,KAAK6jB,cAAgB,CACnB/D,SAAS,EACTja,MAAO,IAAIc,EAAY,OACvBwa,KAAM,GACNC,IAAK,IAIPphB,KAAK8jB,wBAA0B9jB,KAAKmG,MAAM4d,WAC1C/jB,KAAKgkB,mBAAqBhkB,KAAKqc,SAAS4H,cAAc,IAAItd,GAG1D3G,KAAKqE,cAAe,EAEpB0H,QAAQC,IAAI,8CACd,CAKAkY,0BAAAA,GAGE,MAAMC,EAAiBnkB,KAAK2c,OAAS3c,KAAK2c,OAAOpF,cAAgB,CAAEpV,GAAG,IAEhEiiB,EAAgBpkB,KAAKqE,aA0E3B,GAzEArE,KAAKqE,aAAe8f,EAAehiB,EAFT,EAKtBnC,KAAKqE,eAAiB+f,IACpBpkB,KAAKqE,cAEPrE,KAAKmG,MAAM0b,IAAM,IAAIwC,EACnBrkB,KAAK6jB,cAAche,MACnB7F,KAAK6jB,cAAc1C,KACnBnhB,KAAK6jB,cAAczC,KAIrBphB,KAAKqc,SAASuD,cAAc,MAAU,GAGlC5f,KAAKmG,MAAMuR,UACb1X,KAAKmG,MAAMuR,SAASnI,QAAQoI,IAExBA,EAAMtQ,UACNsQ,EAAMtQ,SAASxB,OACf8R,EAAM/Q,UACkB,mBAAxB+Q,EAAM/Q,SAAS3B,MAGf0S,EAAMtQ,SAASxB,MAAMye,OAAO,SAKlCvY,QAAQC,IAAI,0DAGZhM,KAAKmG,MAAM0b,IAAM,KAGjB7hB,KAAKqc,SAASuD,cAAc,QAAU,GAGlC5f,KAAKmG,MAAMuR,UACb1X,KAAKmG,MAAMuR,SAASnI,QAAQoI,IAExBA,EAAMtQ,UACNsQ,EAAMtQ,SAASxB,OACf8R,EAAM/Q,UACkB,mBAAxB+Q,EAAM/Q,SAAS3B,MAGf0S,EAAMtQ,SAASxB,MAAMye,OAAO,WAM9BtkB,KAAKgiB,QACPhiB,KAAKgiB,OAAOzS,QAAQ0S,IAClBA,EAAW7H,SAAU,EAErB6H,EAAWvK,SAASnI,QAAQlN,IACtBA,EAAOgF,WACThF,EAAOgF,SAASqM,QAAU/Q,KAAKC,IAAI,GAAKP,EAAOgF,SAASqM,SACxDrR,EAAOgF,SAAS+S,SAAU,GAE5B/X,EAAO+X,SAAU,MAKvBrO,QAAQC,IAAI,+DAKZhM,KAAKqE,cAAgBrE,KAAKmG,MAAM0b,IAAK,CACvC,MAAM3T,EAAQvL,KAAKC,IAAI,EA5EC,EA4EsBuhB,EAAehiB,GACvDoiB,EAAW,GACXC,EAAe7hB,KAAKE,IAAI,EAAGqL,EAAQqW,GAGzCvkB,KAAKmG,MAAM0b,IAAIT,IAAMphB,KAAK6jB,cAAczC,KAAO,EAAmB,GAAfoD,GAGnD,MAAMC,EAAW,IAAI9d,EAAY,OACjC3G,KAAKmG,MAAM0b,IAAIhc,MAAM6e,WACnB1kB,KAAK6jB,cAAche,MACnB4e,EACe,IAAfD,EAEJ,CACF,CAEAvG,2BAAAA,GAgBE,MAAM0G,EAAsB,IAAIjM,EAAoB,IAAK,IAAK,GAAI,IAC5DkM,EAAsB,IAAInR,EAAwB,CACtD5N,MAAO,MACPiC,aAAa,EACb4L,QAAS,GACTmF,KAAMC,EACNnF,UAAW,IACXC,SAAU,SACViO,KAAK,EACLgD,WAAW,EACXvM,SAAU,MACVC,kBAAmB,KAGfuM,EAAc,IAAIhR,EAAW6Q,EAAqBC,GACxDE,EAAYvH,KAAO,cACnBuH,EAAYrQ,SAASvS,GAAKS,KAAKoU,GAAK,EACpC+N,EAAY1jB,SAASe,EAAI,EACzBnC,KAAKmG,MAAMpE,IAAI+iB,GAEf/Y,QAAQC,IAAI,uCAAwC8Y,EAAY1jB,UAGhEpB,KAAK8kB,YAAcA,EAInB9kB,KAAK+kB,WAAa,CAChBC,UAAW,EACX5X,UAAW,IACXuV,MAAO,GAIT,MAAMsC,EAAgBH,EAAYle,SAAS+D,WAAWvJ,SAAS8jB,MAC/DllB,KAAKmlB,sBAAwB,IAAIpe,aAAake,EAAcpgB,QAC5D,IAAK,IAAIS,EAAI,EAAGA,EAAI2f,EAAcpgB,OAAQS,IACxCtF,KAAKmlB,sBAAsB7f,GAAK2f,EAAc3f,GAWhD,MAAM8f,EAAe,IAAI1M,EAAoB,IAAK,IAAK,GAAI,IACrD2M,EAAe,IAAIzM,EAAwB,CAC/C/S,MAAO,SACPiC,aAAa,EACb4L,QAAS,GACTmF,KAAMC,EACNwM,UAAW,GACXrd,YAAY,IAGRsd,EAAc,IAAIzR,EAAWsR,EAAcC,GACjDE,EAAY9Q,SAASvS,GAAKS,KAAKoU,GAAK,EACpCwO,EAAYnkB,SAASe,EAAI,IACzBnC,KAAKmG,MAAMpE,IAAIwjB,GAGfvlB,KAAKulB,YAAcA,EACnBvlB,KAAKwlB,sBAAwB,IAAIze,aAC/Bqe,EAAaza,WAAWvJ,SAAS8jB,OAInCllB,KAAK4jB,iCAGL5jB,KAAKmjB,sBAGL,MAAMsC,EAAgB,IAAI/M,EAAoB,IAAK,IAAK,GAAI,IAGtDgN,EAAgB,IAAIjS,EAAwB,CAChD5N,MAAO,QACP8N,UAAW,GACXC,SAAU,QACV9L,aAAa,IAGTqa,EAAQ,IAAIrO,EAAW2R,EAAeC,GAC5CvD,EAAM1N,SAASvS,GAAKS,KAAKoU,GAAK,EAC9BoL,EAAM/gB,SAASe,GAAI,GACnBggB,EAAMnO,eAAgB,EAGtB,MAAM2R,EAAiBxD,EAAMvb,SAAS+D,WAAWvJ,SAAS8jB,MAC1D,IAAK,IAAI5f,EAAI,EAAGA,EAAIqgB,EAAe9gB,OAAQS,GAAK,EAE9CqgB,EAAergB,IAA8B,IAAvB3C,KAAKmH,SAAW,IAExCqY,EAAMvb,SAAS+D,WAAWvJ,SAAS8H,aAAc,EACjDiZ,EAAMvb,SAASgf,uBAEf5lB,KAAKmG,MAAMpE,IAAIogB,GAGf,IAAK,IAAI7c,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMugB,EAAgB,IAAIC,EAAqB,EAAoB,EAAhBnjB,KAAKmH,SAAc,IAChEic,EAAgB,IAAItS,EAAwB,CAChD5N,OAAO,IAAIc,GAAcqf,OAAO,GAAK,GAAK,GAAsB,GAAhBrjB,KAAKmH,UACrD6J,UAAW,EACX7L,aAAa,EACb4L,QAAS,KAGLuS,EAAQ,IAAInS,EAAW+R,EAAeE,GAC5CE,EAAMxR,SAASvS,GAAKS,KAAKoU,GAAK,EAC9BkP,EAAM7kB,SAASiT,IACW,IAAvB1R,KAAKmH,SAAW,KACjB,KACwB,IAAvBnH,KAAKmH,SAAW,KAEnBmc,EAAMjS,eAAgB,EACtBhU,KAAKmG,MAAMpE,IAAIkkB,EACjB,CAGA,MAAMC,EAAmBlmB,KAAK0S,cAAchN,cAC1C,IAAIhD,EAAc,GAAG,GAAK,GAC1B,IAAIA,EAAc,IAAK,GAAK,MAC5B,GAEFwjB,EAAiBjhB,KAAO,cACxBjF,KAAK0S,cAAcpO,aAAa4hB,GAGhClmB,KAAKmmB,wBAGL,MAAMC,EAAmB,CAAC,QAAS,UAAW,OAAQ,UAAW,QAEjE,IAAK,IAAI9gB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAM+gB,EACJD,EAAiBzjB,KAAKwf,MAAMxf,KAAKmH,SAAWsc,EAAiBvhB,SAC/D,IAAI+B,EAAUS,EAAU+L,EAExB,OAAQiT,GACN,IAAK,QAEHzf,EAAW,IAAI0f,EACb,GACA,GACA,EAAoB,EAAhB3jB,KAAKmH,SACT,GAEFzC,EAAW,IAAIoM,EAAwB,CACrC5N,OAAO,IAAIc,GAAcqf,OACvB,IAAuB,IAAhBrjB,KAAKmH,SACZ,GACA,IAEF6J,UAAW,GACX7L,aAAa,EACb4L,QAAS,KAEXN,EAAO,IAAIU,EAAWlN,EAAUS,GAGhC,IAAK,IAAI+a,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMmE,EAAiB,IAAIrS,EACzB,GAAsB,GAAhBvR,KAAKmH,SACX,EACA,GAEI0c,EAAiB,IAAI/S,EAAwB,CACjD5N,MAAOwB,EAASxB,MACbnE,QACAG,eAAe,GAAsB,GAAhBc,KAAKmH,UAC7B6J,UAAW,KAEP8S,EAAS,IAAI3S,EAAWyS,EAAgBC,GAC9CC,EAAOrlB,SAASiT,IACU,IAAvB1R,KAAKmH,SAAW,IACD,IAAhBnH,KAAKmH,SACmB,IAAvBnH,KAAKmH,SAAW,KAEnBsJ,EAAKrR,IAAI0kB,EACX,CACA,MAGF,IAAK,UAEH7f,EAAW,IAAI0f,EACb,IACA,IACA,EAAoB,EAAhB3jB,KAAKmH,SACT,GAEFzC,EAAW,IAAIoM,EAAwB,CACrC5N,OAAO,IAAIc,GAAcqf,OACvB,GACA,GACA,GAAsB,GAAhBrjB,KAAKmH,UAEb6J,UAAW,KAEbP,EAAO,IAAIU,EAAWlN,EAAUS,GAChC+L,EAAK8B,MAAMhT,EAAI,GACf,MAGF,IAAK,OAEH0E,EAAW,IAAI8f,EAAmB,GAAK,EAAoB,EAAhB/jB,KAAKmH,SAAc,GAC9DzC,EAAW,IAAIoM,EAAwB,CACrC5N,OAAO,IAAIc,GAAcqf,OAAO,IAAM,GAAK,IAC3CrS,UAAW,KAEbP,EAAO,IAAIU,EAAWlN,EAAUS,GAChC,MAGF,IAAK,UAEHT,EAAW,IAAIsN,EAAqB,GAAsB,GAAhBvR,KAAKmH,SAAgB,GAAI,GACnEzC,EAAW,IAAIoM,EAAwB,CACrC5N,OAAO,IAAIc,GAAcqf,OACvB,GAAsB,GAAhBrjB,KAAKmH,SACX,GACA,IAEF6J,UAAW,GACX7L,aAAa,EACb4L,QAAS,MAEXN,EAAO,IAAIU,EAAWlN,EAAUS,GAGhC,IAAK,IAAI+a,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMuE,EAAmB,IAAIL,EAC3B,IACA,IACA,GACA,GAEIM,EAAW,IAAI9S,EAAW6S,EAAkBtf,EAAS3F,SACrDyX,EAASiJ,EAAI,EAAKzf,KAAKoU,GAAK,EAClC6P,EAASxlB,SAASiT,IACE,GAAlB1R,KAAK2W,IAAIH,GACT,GACkB,GAAlBxW,KAAKkU,IAAIsC,IAEXyN,EAASnS,SAASvS,EAA4B,IAAvBS,KAAKmH,SAAW,IACvC8c,EAASnS,SAASrS,EAA4B,IAAvBO,KAAKmH,SAAW,IACvCsJ,EAAKrR,IAAI6kB,EACX,CACA,MAGF,QAAS,CAEP,MAAMC,EAAa,GAAsB,IAAhBlkB,KAAKmH,SAC9BlD,EAAW,IAAIkgB,EAA2BD,EAAY,GACtDxf,EAAW,IAAIoM,EAAwB,CACrC5N,OAAO,IAAIc,GAAcqf,OACvB,GACA,GACA,GAAsB,GAAhBrjB,KAAKmH,UAEb6J,UAAW,KAEbP,EAAO,IAAIU,EAAWlN,EAAUS,GAGhC,MAAM0f,EAAgBngB,EAAS+D,WAAWvJ,SAAS8jB,MACnD,IAAK,IAAI9C,EAAI,EAAGA,EAAI2E,EAAcliB,OAAQud,GAAK,EAC7C2E,EAAc3E,IAA8B,IAAvBzf,KAAKmH,SAAW,IACrCid,EAAc3E,EAAI,IAA8B,IAAvBzf,KAAKmH,SAAW,IACzCid,EAAc3E,EAAI,IAA8B,IAAvBzf,KAAKmH,SAAW,IAE3ClD,EAAS+D,WAAWvJ,SAAS8H,aAAc,EAC3CtC,EAASgf,uBACT,KACF,EAGF,MAAMxkB,EAAW,IAAIsB,EACK,IAAvBC,KAAKmH,SAAW,IACK,EAAhBnH,KAAKmH,YACa,IAAvBnH,KAAKmH,SAAW,KAEnBsJ,EAAKhS,SAAS+D,KAAK/D,GACnBgS,EAAKW,YAAa,EAClBX,EAAKY,eAAgB,EAGF,YAAfqS,GAA2C,SAAfA,IAC9BjT,EAAKmG,SAASyN,UAAY,GAAsB,IAAhBrkB,KAAKmH,SACrCsJ,EAAKmG,SAAS0N,WAAa,GAAsB,GAAhBtkB,KAAKmH,UAGxC9J,KAAKmG,MAAMpE,IAAIqR,GAGf,MAAM9R,EACW,SAAf+kB,EAAwB,EAAqB,YAAfA,EAA2B,GAAM,GAC3Da,EAAoBlnB,KAAK0S,cAAcjN,iBAC3CrE,EACAE,GACA,GAEF4lB,EAAkBjiB,KAAO,cACzBiiB,EAAkB9T,KAAOA,EACzBpT,KAAK0S,cAAcpO,aAAa4iB,GAChClnB,KAAK4c,mBAAmBtc,KAAK,CAC3B8S,KAAMA,EACNF,YAAagU,GAEjB,CACF,CAKAf,qBAAAA,GACEpa,QAAQC,IAAI,mCAGZ,MAAMmb,EAAY,GACZC,EAAa,GAIC,CAElB,CACEhmB,SAAU,IAAIsB,EAAc,GAAG0kB,IAAqBD,GACpDvlB,KAAM,IAAIc,EAAcykB,IAAeC,EAPrB,GAQlB7J,KAAM,cAGR,CACEnc,SAAU,IAAIsB,EAAc,GAAG0kB,KAAqB,IACpDxlB,KAAM,IAAIc,EAAcykB,IAAeC,EAbrB,GAclB7J,KAAM,cAGR,CACEnc,SAAU,IAAIsB,EAAcykB,GAAWC,IAAqB,GAC5DxlB,KAAM,IAAIc,EAnBQ,EAmBqB0kB,EAAYD,KACnD5J,KAAM,aAGR,CACEnc,SAAU,IAAIsB,GAAc,IAAY0kB,IAAqB,GAC7DxlB,KAAM,IAAIc,EAzBQ,EAyBqB0kB,EAAYD,KACnD5J,KAAM,cAIEhO,QAAQtF,IAElB,MAAMod,EAAkBrnB,KAAK0S,cAAchN,cACzCuE,EAAO7I,SACP6I,EAAOrI,MACP,GAEFylB,EAAgBpiB,KAAO,cACvBoiB,EAAgB9J,KAAOtT,EAAOsT,KAC9Bvd,KAAK0S,cAAcpO,aAAa+iB,GAEhCtb,QAAQC,IACN,cAAc/B,EAAOsT,qBAAqBtT,EAAO7I,SAASc,EAAEolB,QAAQ,OAAOrd,EAAO7I,SAASe,EAAEmlB,QAAQ,OAAOrd,EAAO7I,SAASgB,EAAEklB,QAAQ,SAI1Ivb,QAAQC,IAAI,0CACd,CAEAkS,YAAAA,GAEEle,KAAK2c,OAAS,IAAIlK,EAAOzS,KAAKmG,MAAOnG,KAAK0S,eAC1C3G,QAAQC,IAAI,iCACd,CAKAoS,UAAAA,GAEE,MAAMmJ,EAAe,IAAI7kB,EAAc,GAAG,GAAI,IAC9C1C,KAAK8Z,KAAO,IAAIhC,EAAK9X,KAAKmG,MAAOnG,KAAK0S,cAAe6U,GACrDxb,QAAQC,IACN,iCAAiCub,EAAarlB,MAAMqlB,EAAaplB,MAAMolB,EAAanlB,KAExF,CAKAic,kBAAAA,GACEtS,QAAQC,IAAI,gCAEZ,MAAMwb,EAAgB,CAAC,OAAQ,YAAa,YAE5C,IAAK,IAAIliB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAE3B,MAAMmiB,EACJD,EAAc7kB,KAAKwf,MAAMxf,KAAKmH,SAAW0d,EAAc3iB,SACzD,IAAIuO,EAAMsU,EAAYC,EAEtB,OAAQF,GACN,IAAK,OAAQ,CAEX,MAAMG,EAAY,IAAIvU,EAGhBC,EAAe,IAAIY,EAAqB,GAAK,EAAG,GAChDV,EAAe,IAAIC,EAAwB,CAC/C5N,OAAO,IAAIc,GAAcqf,OACvB,GAAsB,GAAhBrjB,KAAKmH,SACX,GACA,IAEF6J,UAAW,KAEPpQ,EAAO,IAAIuQ,EAAWR,EAAcE,GAC1CjQ,EAAK2R,MAAMb,IAAI,IAAK,EAAG,IACvBuT,EAAU7lB,IAAIwB,GAGd,MAAMskB,EAAe,IAAInB,EAAmB,IAAM,GAAK,GACjDoB,EAAe,IAAIrU,EAAwB,CAC/C5N,MAAO2N,EAAa3N,MAAMnE,QAAQG,eAAe,IACjD8R,UAAW,KAEPoU,EAAO,IAAIjU,EAAW+T,EAAcC,GAC1CC,EAAK3mB,SAASiT,KAAI,GAAM,EAAG,GAC3B0T,EAAKtT,SAASrS,EAAIO,KAAKoU,GAAK,EAC5B6Q,EAAU7lB,IAAIgmB,GAGd,MAAMC,EAAc,IAAItB,EAAmB,IAAM,GAAK,GAChDuB,EAAU,IAAInU,EAAWkU,EAAaF,EAAapmB,SACzDumB,EAAQ7mB,SAASiT,IAAI,IAAK,GAAM,IAChC4T,EAAQxT,SAASvS,EAAIS,KAAKoU,GAAK,EAC/B6Q,EAAU7lB,IAAIkmB,GAEd,MAAMC,EAAW,IAAIpU,EAAWkU,EAAaF,EAAapmB,SAC1DwmB,EAAS9mB,SAASiT,IAAI,IAAK,IAAM,IACjC6T,EAASzT,SAASvS,GAAKS,KAAKoU,GAAK,EACjC6Q,EAAU7lB,IAAImmB,GAEd9U,EAAOwU,EACPF,EAAa,EAAoB,GAAhB/kB,KAAKmH,SACtB6d,EAAY,GAAsB,GAAhBhlB,KAAKmH,SACvB,KACF,CAEA,IAAK,YAAa,CAEhB,MAAMqe,EAAiB,IAAI9U,EAGrB+U,EAAe,IAAIlU,EACvB,GACA,EACA,EACA,EACU,EAAVvR,KAAKoU,GACL,EACApU,KAAKoU,GAAK,GAENsR,EAAe,IAAI5U,EAAwB,CAC/C5N,OAAO,IAAIc,GAAcqf,OACvB,GAAsB,GAAhBrjB,KAAKmH,SACX,GACA,IAEFhC,aAAa,EACb4L,QAAS,GACTC,UAAW,MAEP2U,EAAO,IAAIxU,EAAWsU,EAAcC,GAC1CF,EAAepmB,IAAIumB,GAGnB,IAAK,IAAIlG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMuE,EAAmB,IAAIL,EAC3B,IACA,IACA,IACA,GAEIM,EAAW,IAAI9S,EACnB6S,EACA0B,EAAa3mB,SAETyX,EAASiJ,EAAI,EAAKzf,KAAKoU,GAAK,EAClC6P,EAASxlB,SAASiT,IACE,GAAlB1R,KAAK2W,IAAIH,IACT,GACkB,GAAlBxW,KAAKkU,IAAIsC,IAEXyN,EAASrN,SAASgP,iBAAmB,CAAErmB,EAAG,EAAGE,EAAG,GAChDwkB,EAASrN,SAASiP,cAAgBpG,EAClC+F,EAAepmB,IAAI6kB,EACrB,CAEAxT,EAAO+U,EACPT,EAAa,EAAoB,EAAhB/kB,KAAKmH,SACtB6d,EAAY,GAAsB,GAAhBhlB,KAAKmH,SACvB,KACF,CAEA,QAAS,CAEP,MAAM2e,EAAgB,IAAIpV,EAGpBqV,EAAuB,IAAIpC,EAC/B,GACA,IACA,EACA,GAEIqC,EAAuB,IAAIlV,EAAwB,CACvD5N,OAAO,IAAIc,GAAcqf,OACvB,GAAsB,GAAhBrjB,KAAKmH,SACX,GACA,IAEF6J,UAAW,KAEPiV,EAAe,IAAI9U,EACvB4U,EACAC,GAEFC,EAAanU,SAASrS,EAAIO,KAAKoU,GAAK,EACpC0R,EAAc1mB,IAAI6mB,GAGlB,MAAM3U,EAAe,IAAIC,EAAqB,IAAM,EAAG,GACjD2U,EAAO,IAAI/U,EACfG,EACA0U,EAAqBjnB,SAEvBmnB,EAAKznB,SAASiT,IAAI,GAAK,GAAK,GAC5BoU,EAAc1mB,IAAI8mB,GAGlB,MAAMC,EAAoB,IAAIpQ,EAAoB,IAAM,IAClDqQ,EAAoB,IAAItV,EAAwB,CACpD5N,MAAO8iB,EAAqB9iB,MAAMnE,QAAQG,eAAe,KACzDiG,aAAa,EACb4L,QAAS,GACTmF,KAAMC,IAEFkQ,EAAY,IAAIlV,EAAWgV,EAAmBC,GACpDC,EAAU5nB,SAASiT,KAAI,GAAM,EAAG,GAChC2U,EAAUvU,SAAStS,EAAIQ,KAAKoU,GAAK,EACjC0R,EAAc1mB,IAAIinB,GAElB5V,EAAOqV,EACPf,EAAa,EAAoB,EAAhB/kB,KAAKmH,SACtB6d,EAAY,GAAsB,GAAhBhlB,KAAKmH,SACvB,KACF,EAIF,MAAMmf,EAAgB,IAAIvmB,EACA,IAAvBC,KAAKmH,SAAW,OACI,EAAhBnH,KAAKmH,SACc,IAAvBnH,KAAKmH,SAAW,KAGnBsJ,EAAKhS,SAAS+D,KAAK8jB,GACnB7V,EAAK8B,MAAMuN,UAAU,GAAsB,GAAhB9f,KAAKmH,UAGhCsJ,EAAKmG,SAAW,CACdkO,aAAcA,EACdyB,WAAYD,EAAcvnB,QAC1BgmB,WAAYA,EACZC,UAAWA,EACXwB,UAAWxmB,KAAKmH,SAAWnH,KAAKoU,GAAK,EACrCqS,UAAWzmB,KAAKmH,SAAWnH,KAAKoU,GAAK,GAGvC/W,KAAKmG,MAAMpE,IAAIqR,GACfpT,KAAK6c,aAAavc,KAAK8S,EACzB,CAEArH,QAAQC,IAAI,cAAchM,KAAK6c,aAAahY,uBAC9C,CAEAsZ,iBAAAA,GACEne,KAAKqpB,MAAQ,GAGb,MAAMC,EAAe1O,EAAakB,iBAGlC,IAAK,IAAIxW,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,MAAMikB,EAAUD,EAAahkB,EAAIgkB,EAAazkB,QACxCwW,EAAekO,EAAQ3iB,SAASlF,QAChC8nB,EAAeD,EAAQliB,SAAS3F,QAEhC+nB,EAAO,IAAI3V,EAAWuH,EAAcmO,GACpCpoB,EAAW,IAAIsB,EACK,IAAvBC,KAAKmH,SAAW,IACD,EAAhBnH,KAAKmH,SAAe,GACI,IAAvBnH,KAAKmH,SAAW,KAEnB2f,EAAKroB,SAAS+D,KAAK/D,GACnBqoB,EAAK1V,YAAa,EAGlB,MAAM2V,EAAkB1pB,KAAK0S,cAAcjN,iBACzCrE,EACA,GACA,GAEFsoB,EAAgBzkB,KAAO,cACvBykB,EAAgBtW,KAAOqW,EACvBC,EAAgBxkB,WAAY,EAC5BlF,KAAK0S,cAAcpO,aAAaolB,GAGhCD,EAAKlQ,SAAW,CACd3G,cAAe,IAAuB,IAAhBjQ,KAAKmH,SAC3B6f,WAAY,IAAuB,IAAhBhnB,KAAKmH,SACxB8f,YAAajnB,KAAKmH,SAAWnH,KAAKoU,GAAK,EACvC8S,UAAWzoB,EAASe,EACpB+Q,YAAawW,EACbI,aAAc,IAAIpnB,EAChBC,KAAKmH,SAAW,GAChBnH,KAAKmH,SAAW,GAChBnH,KAAKmH,SAAW,IAChBkM,aAGJhW,KAAKqpB,MAAM/oB,KAAK,CAAE8S,KAAMqW,EAAMvW,YAAawW,IAC3C1pB,KAAKmG,MAAMpE,IAAI0nB,EACjB,CAEA1d,QAAQC,IAAI,aAAahM,KAAKqpB,MAAMxkB,sBACtC,CAEAyZ,mBAAAA,GAEEpS,OAAO6d,iBAAiB,SAAU,IAAM/pB,KAAKgqB,iBAAkB,CAC7DC,SAAS,IAIX/d,OAAO6d,iBAAiB,UAAWG,GAASlqB,KAAKmqB,UAAUD,IAC3Dhe,OAAO6d,iBAAiB,QAASG,GAASlqB,KAAKoqB,QAAQF,IAGnDlqB,KAAKuc,UACPvc,KAAKqqB,qBAIPrqB,KAAKsqB,oBACP,CAEAH,SAAAA,CAAUD,GAIR,OAFAlqB,KAAKygB,qBAEGyJ,EAAMK,MACZ,IAAK,UACL,IAAK,OACHvqB,KAAKqV,WAAWC,KAAK5E,SAAU,EAC/B,MACF,IAAK,YACL,IAAK,OACH1Q,KAAKqV,WAAWC,KAAKC,UAAW,EAChC,MACF,IAAK,YACL,IAAK,OACHvV,KAAKqV,WAAWC,KAAKE,MAAO,EAC5B,MACF,IAAK,aACL,IAAK,OACHxV,KAAKqV,WAAWC,KAAKG,OAAQ,EAC7B,MACF,IAAK,QACHzV,KAAKqV,WAAWC,KAAK3E,IAAK,EAC1BuZ,EAAMM,iBACN,MACF,IAAK,YACHxqB,KAAKqV,WAAWC,KAAKI,MAAO,EAGlC,CAEA0U,OAAAA,CAAQF,GACN,OAAQA,EAAMK,MACZ,IAAK,UACL,IAAK,OACHvqB,KAAKqV,WAAWC,KAAK5E,SAAU,EAC/B,MACF,IAAK,YACL,IAAK,OACH1Q,KAAKqV,WAAWC,KAAKC,UAAW,EAChC,MACF,IAAK,YACL,IAAK,OACHvV,KAAKqV,WAAWC,KAAKE,MAAO,EAC5B,MACF,IAAK,aACL,IAAK,OACHxV,KAAKqV,WAAWC,KAAKG,OAAQ,EAC7B,MACF,IAAK,QACHzV,KAAKqV,WAAWC,KAAK3E,IAAK,EAC1B,MACF,IAAK,YACH3Q,KAAKqV,WAAWC,KAAKI,MAAO,EAGlC,CAEA2U,kBAAAA,GAEErqB,KAAKyqB,uBAGLzqB,KAAK0qB,sBAGL1qB,KAAK2qB,qBAGL3qB,KAAK4qB,WAAa,CAChBC,OAAQ,EACRC,OAAQ,EACRC,SAAU,EACVC,SAAU,EACVC,UAAU,GAIZjrB,KAAKoI,OAAO2hB,iBAAiB,aAAcG,IAMzC,GALAA,EAAMM,iBAGNxqB,KAAKygB,qBAEDyJ,EAAMgB,QAAQrmB,OAAS,EAAG,CAC5B,MAAMsmB,EAAQjB,EAAMgB,QAAQ,GAC5BlrB,KAAK4qB,WAAWC,OAASM,EAAMC,QAC/BprB,KAAK4qB,WAAWE,OAASK,EAAME,QAC/BrrB,KAAK4qB,WAAWG,SAAWI,EAAMC,QACjCprB,KAAK4qB,WAAWI,SAAWG,EAAME,QACjCrrB,KAAK4qB,WAAWK,UAAW,CAC7B,IAGFjrB,KAAKoI,OAAO2hB,iBAAiB,YAAaG,IAExC,GADAA,EAAMM,iBACFN,EAAMgB,QAAQrmB,OAAS,GAAK7E,KAAK4qB,WAAWK,SAAU,CACxD,MAAME,EAAQjB,EAAMgB,QAAQ,GAC5BlrB,KAAK4qB,WAAWG,SAAWI,EAAMC,QACjCprB,KAAK4qB,WAAWI,SAAWG,EAAME,QAGjC,MAAMC,EAAStrB,KAAK4qB,WAAWG,SAAW/qB,KAAK4qB,WAAWC,OACpDU,EAASvrB,KAAK4qB,WAAWI,SAAWhrB,KAAK4qB,WAAWE,OAGpDnY,EAAY,IACZyK,EAAc,EAEhBza,KAAKiT,IAAI0V,GAAU,KACrBtrB,KAAK2c,OAAOvb,SAASc,GAAMopB,EAASlO,EAAezK,EAAY,KAG7DhQ,KAAKiT,IAAI2V,GAAU,KACrBvrB,KAAK2c,OAAOvb,SAASgB,GAAMmpB,EAASnO,EAAezK,EAAY,KAGjE3S,KAAKwrB,cACP,IAGFxrB,KAAKoI,OAAO2hB,iBAAiB,WAAYG,IACvCA,EAAMM,iBACNxqB,KAAK4qB,WAAWK,UAAW,IAG7BjrB,KAAKoI,OAAO2hB,iBAAiB,cAAeG,IAC1CA,EAAMM,iBACNxqB,KAAK4qB,WAAWK,UAAW,GAE/B,CAEAR,oBAAAA,GACE,MAAM9U,EAAWtN,SAAS0W,eAAe,mBACnC0M,EAAOpjB,SAAS0W,eAAe,gBAErC,IAAKpJ,IAAa8V,EAChB,OAGF,MAAMC,EAAgB,CACpBT,UAAU,EACVU,QAAS,EACTC,QAAS,EACTb,SAAU,EACVC,SAAU,GAGZrV,EAASoU,iBAAiB,aAAcG,IAItC,GAHAA,EAAMM,iBACNN,EAAM2B,kBAEF3B,EAAMgB,QAAQrmB,OAAS,EAAG,CAC5B,MAAMsmB,EAAQjB,EAAMgB,QAAQ,GACtBY,EAAOnW,EAASoW,wBAEtBL,EAAcT,UAAW,EACzBS,EAAcC,QAAUG,EAAKtW,KAAOsW,EAAKvjB,MAAQ,EACjDmjB,EAAcE,QAAUE,EAAKzK,IAAMyK,EAAKtjB,OAAS,EACjDkjB,EAAcX,SAAWI,EAAMC,QAC/BM,EAAcV,SAAWG,EAAME,QAG/B1V,EAASqW,MAAMC,YAAc,2BAC7BtW,EAASqW,MAAMjI,WAAa,uBAE5B/jB,KAAKksB,mBAAmBT,EAAMC,EAAeI,EAC/C,IAGFnW,EAASoU,iBAAiB,YAAaG,IAIrC,GAHAA,EAAMM,iBACNN,EAAM2B,kBAEF3B,EAAMgB,QAAQrmB,OAAS,GAAK6mB,EAAcT,SAAU,CACtD,MAAME,EAAQjB,EAAMgB,QAAQ,GACtBY,EAAOnW,EAASoW,wBAEtBL,EAAcX,SAAWI,EAAMC,QAC/BM,EAAcV,SAAWG,EAAME,QAG/B,MAAMC,EAASI,EAAcX,SAAWW,EAAcC,QAChDJ,EAASG,EAAcV,SAAWU,EAAcE,QAChDO,EAAWxpB,KAAKypB,KAAKd,EAASA,EAASC,EAASA,GAChDc,EAAcP,EAAKvjB,MAAQ,EAAI,GAGrC,GAAI4jB,EAAW,EAAG,CAChB,MAAMG,EAAchB,EAASe,EACvBE,EAAchB,EAASc,EAG7BrsB,KAAKqV,WAAWM,SAASzT,EAAIS,KAAKC,KAChC,EACAD,KAAKE,IAAI,EAAiB,IAAdypB,IAEdtsB,KAAKqV,WAAWM,SAASxT,EAAIQ,KAAKC,KAChC,EACAD,KAAKE,IAAI,EAAiB,IAAd0pB,GAEhB,MACEvsB,KAAKqV,WAAWM,SAASzT,EAAI,EAC7BlC,KAAKqV,WAAWM,SAASxT,EAAI,EAG/BnC,KAAKksB,mBAAmBT,EAAMC,EAAeI,EAC/C,IAGFnW,EAASoU,iBAAiB,WAAYG,IACpCA,EAAMM,iBACNN,EAAM2B,kBAENH,EAAcT,UAAW,EACzBjrB,KAAKqV,WAAWM,SAASzT,EAAI,EAC7BlC,KAAKqV,WAAWM,SAASxT,EAAI,EAG7BwT,EAASqW,MAAMC,YAAc,2BAC7BtW,EAASqW,MAAMjI,WAAa,uBAC5B0H,EAAKO,MAAMQ,UAAY,0BAGzB7W,EAASoU,iBAAiB,cAAeG,IACvCA,EAAMM,iBACNN,EAAM2B,kBAENH,EAAcT,UAAW,EACzBjrB,KAAKqV,WAAWM,SAASzT,EAAI,EAC7BlC,KAAKqV,WAAWM,SAASxT,EAAI,EAG7BwT,EAASqW,MAAMC,YAAc,2BAC7BtW,EAASqW,MAAMjI,WAAa,uBAC5B0H,EAAKO,MAAMQ,UAAY,yBAE3B,CAEA9B,mBAAAA,GACE,MAAM1N,EAAiB3U,SAAS0W,eAAe,kBACzC0N,EAAapkB,SAAS0W,eAAe,cAE3C,IAAK/B,IAAmByP,EACtB,OAGF,MAAMC,EAAsB,CAC1BzB,UAAU,EACVU,QAAS,EACTC,QAAS,EACTb,SAAU,EACVC,SAAU,GAGZhO,EAAe+M,iBAAiB,aAAcG,IAI5C,GAHAA,EAAMM,iBACNN,EAAM2B,kBAEF3B,EAAMgB,QAAQrmB,OAAS,EAAG,CAC5B,MAAMsmB,EAAQjB,EAAMgB,QAAQ,GACtBY,EAAO9O,EAAe+O,wBAE5BW,EAAoBzB,UAAW,EAC/ByB,EAAoBf,QAAUG,EAAKtW,KAAOsW,EAAKvjB,MAAQ,EACvDmkB,EAAoBd,QAAUE,EAAKzK,IAAMyK,EAAKtjB,OAAS,EACvDkkB,EAAoB3B,SAAWI,EAAMC,QACrCsB,EAAoB1B,SAAWG,EAAME,QAGrCrO,EAAegP,MAAMC,YAAc,2BACnCjP,EAAegP,MAAMjI,WAAa,uBAElC/jB,KAAK2sB,yBAAyBF,EAAYC,EAAqBZ,EACjE,IAGF9O,EAAe+M,iBAAiB,YAAaG,IAI3C,GAHAA,EAAMM,iBACNN,EAAM2B,kBAEF3B,EAAMgB,QAAQrmB,OAAS,GAAK6nB,EAAoBzB,SAAU,CAC5D,MAAME,EAAQjB,EAAMgB,QAAQ,GACtBY,EAAO9O,EAAe+O,wBAE5BW,EAAoB3B,SAAWI,EAAMC,QACrCsB,EAAoB1B,SAAWG,EAAME,QAGrC,MAAMC,EACJoB,EAAoB3B,SAAW2B,EAAoBf,QAC/CJ,EACJmB,EAAoB1B,SAAW0B,EAAoBd,QAC/CO,EAAWxpB,KAAKypB,KAAKd,EAASA,EAASC,EAASA,GAChDc,EAAcP,EAAKvjB,MAAQ,EAAI,GAGrC,GAAI4jB,EAAW,EAAG,CAChB,MAAMG,EAAchB,EAASe,EACvBE,EAAchB,EAASc,EAG7BrsB,KAAKqV,WAAW2H,eAAe9a,EAAIS,KAAKC,KACtC,EACAD,KAAKE,IAAI,EAAiB,IAAdypB,IAEdtsB,KAAKqV,WAAW2H,eAAe7a,EAAIQ,KAAKC,KACtC,EACAD,KAAKE,IAAI,EAAiB,IAAd0pB,GAEhB,MACEvsB,KAAKqV,WAAW2H,eAAe9a,EAAI,EACnClC,KAAKqV,WAAW2H,eAAe7a,EAAI,EAGrCnC,KAAK2sB,yBAAyBF,EAAYC,EAAqBZ,EACjE,IAGF9O,EAAe+M,iBAAiB,WAAYG,IAC1CA,EAAMM,iBACNN,EAAM2B,kBAENa,EAAoBzB,UAAW,EAC/BjrB,KAAKqV,WAAW2H,eAAe9a,EAAI,EACnClC,KAAKqV,WAAW2H,eAAe7a,EAAI,EAGnC6a,EAAegP,MAAMC,YAAc,2BACnCjP,EAAegP,MAAMjI,WAAa,uBAClC0I,EAAWT,MAAMQ,UAAY,0BAG/BxP,EAAe+M,iBAAiB,cAAeG,IAC7CA,EAAMM,iBACNN,EAAM2B,kBAENa,EAAoBzB,UAAW,EAC/BjrB,KAAKqV,WAAW2H,eAAe9a,EAAI,EACnClC,KAAKqV,WAAW2H,eAAe7a,EAAI,EAGnC6a,EAAegP,MAAMC,YAAc,2BACnCjP,EAAegP,MAAMjI,WAAa,uBAClC0I,EAAWT,MAAMQ,UAAY,yBAEjC,CAEAN,kBAAAA,CAAmBT,EAAMC,EAAeI,GACtC,MAAMR,EAASI,EAAcX,SAAWW,EAAcC,QAChDJ,EAASG,EAAcV,SAAWU,EAAcE,QAChDO,EAAWxpB,KAAKypB,KAAKd,EAASA,EAASC,EAASA,GAChDc,EAAcP,EAAKvjB,MAAQ,EAAI,GAErC,GAAI4jB,GAAYE,EACdZ,EAAKO,MAAMQ,UAAY,yBAAyBlB,qBAA0BC,YACrE,CACL,MAAMpS,EAAQxW,KAAKyT,MAAMmV,EAAQD,GAC3BppB,EAAIS,KAAK2W,IAAIH,GAASkT,EACtBlqB,EAAIQ,KAAKkU,IAAIsC,GAASkT,EAC5BZ,EAAKO,MAAMQ,UAAY,yBAAyBtqB,qBAAqBC,OACvE,CACF,CAEAwqB,wBAAAA,CAAyBlB,EAAMiB,EAAqBZ,GAClD,MAAMR,EAASoB,EAAoB3B,SAAW2B,EAAoBf,QAC5DJ,EAASmB,EAAoB1B,SAAW0B,EAAoBd,QAC5DO,EAAWxpB,KAAKypB,KAAKd,EAASA,EAASC,EAASA,GAChDc,EAAcP,EAAKvjB,MAAQ,EAAI,GAErC,GAAI4jB,GAAYE,EACdZ,EAAKO,MAAMQ,UAAY,yBAAyBlB,qBAA0BC,YACrE,CACL,MAAMpS,EAAQxW,KAAKyT,MAAMmV,EAAQD,GAC3BppB,EAAIS,KAAK2W,IAAIH,GAASkT,EACtBlqB,EAAIQ,KAAKkU,IAAIsC,GAASkT,EAC5BZ,EAAKO,MAAMQ,UAAY,yBAAyBtqB,qBAAqBC,OACvE,CACF,CAEAwoB,kBAAAA,GACE,MAAMiC,EAAYvkB,SAAS0W,eAAe,aACpC8N,EAAcxkB,SAAS0W,eAAe,eAExC6N,IAEFA,EAAU7C,iBAAiB,aAAcG,IACvCA,EAAMM,iBACNN,EAAM2B,kBACN7rB,KAAKqV,WAAWQ,cAAcC,QAAS,EACvC8W,EAAUZ,MAAMjI,WAAa,6BAG/B6I,EAAU7C,iBAAiB,WAAYG,IACrCA,EAAMM,iBACNN,EAAM2B,kBACN7rB,KAAKqV,WAAWQ,cAAcC,QAAS,EACvC8W,EAAUZ,MAAMjI,WAAa,yBAG/B6I,EAAU7C,iBAAiB,cAAeG,IACxCA,EAAMM,iBACNN,EAAM2B,kBACN7rB,KAAKqV,WAAWQ,cAAcC,QAAS,EACvC8W,EAAUZ,MAAMjI,WAAa,0BAI7B8I,IAEFA,EAAY9C,iBAAiB,aAAcG,IACzCA,EAAMM,iBACNN,EAAM2B,kBACN7rB,KAAKqV,WAAWQ,cAAcE,UAAW,EACzC8W,EAAYb,MAAMjI,WAAa,6BAGjC8I,EAAY9C,iBAAiB,WAAYG,IACvCA,EAAMM,iBACNN,EAAM2B,kBACN7rB,KAAKqV,WAAWQ,cAAcE,UAAW,EACzC8W,EAAYb,MAAMjI,WAAa,yBAGjC8I,EAAY9C,iBAAiB,cAAeG,IAC1CA,EAAMM,iBACNN,EAAM2B,kBACN7rB,KAAKqV,WAAWQ,cAAcE,UAAW,EACzC8W,EAAYb,MAAMjI,WAAa,yBAGrC,CAEAuG,kBAAAA,GACE,MAAMwC,EAAiBzkB,SAAS0W,eAAe,kBACzCgO,EAAgB1kB,SAAS0W,eAAe,iBACxCiO,EAAgB3kB,SAAS0W,eAAe,iBAE9C,GAAI+N,GAAkBC,GAAiBC,EAAe,CAEpD,MAAMC,EAAe/C,IACfA,IACFA,EAAMM,iBACNN,EAAM2B,mBAERkB,EAAcG,UAAUjiB,OAAO,UAE/B5C,SAAS9E,KAAKyoB,MAAMmB,SAAW,SAG/BntB,KAAKotB,sBAIDC,EAAanD,IACbA,IACFA,EAAMM,iBACNN,EAAM2B,mBAERkB,EAAcG,UAAUnrB,IAAI,UAE5BsG,SAAS9E,KAAKyoB,MAAMmB,SAAW,IAIjCL,EAAe/C,iBAAiB,QAASkD,GACzCD,EAAcjD,iBAAiB,QAASsD,GAGxCN,EAAchD,iBAAiB,QAASG,IAElCA,EAAMzG,SAAWsJ,GACnBM,EAAWnD,KAKf7hB,SAAS0hB,iBAAiB,UAAWG,IAEnB,WAAdA,EAAMoD,KACLP,EAAcG,UAAUK,SAAS,WAElCF,KAGN,CAGArtB,KAAKwtB,qBAGLxtB,KAAKytB,iBACP,CAEAD,kBAAAA,GACE,MAAME,EAAqBrlB,SAAS0W,eAAe,sBAC7C4O,EAAoBtlB,SAAS0W,eAAe,qBAC5C6O,EAAkBvlB,SAAS0W,eAAe,mBAE1C8O,EAAoBxlB,SAAS0W,eAAe,qBAC5C+O,EAAmBzlB,SAAS0W,eAAe,oBAC3CgP,EAAiB1lB,SAAS0W,eAAe,kBAE3C2O,GAAsB1tB,KAAK0c,aAC7BgR,EAAmB3D,iBAAiB,QAASG,IAC3C,MAAMzc,EAASugB,SAAS9D,EAAMzG,OAAOhc,OAAS,IAC9CzH,KAAK0c,YAAYpL,gBAAgB7D,GAC7BogB,IACFA,EAAkBI,YAAc,GAAG/D,EAAMzG,OAAOhc,YAKlDkmB,GAAqB3tB,KAAK0c,aAC5BiR,EAAkB5D,iBAAiB,QAASG,IAC1C,MAAMzc,EAASugB,SAAS9D,EAAMzG,OAAOhc,OAAS,IAC9CzH,KAAK0c,YAAYlL,eAAe/D,GAC5BqgB,IACFA,EAAiBG,YAAc,GAAG/D,EAAMzG,OAAOhc,YAKjDmmB,GAAmB5tB,KAAK0c,aAC1BkR,EAAgB7D,iBAAiB,QAASG,IACxC,MAAMzc,EAASugB,SAAS9D,EAAMzG,OAAOhc,OAAS,IAC9CzH,KAAK0c,YAAYjL,aAAahE,GAC1BsgB,IACFA,EAAeE,YAAc,GAAG/D,EAAMzG,OAAOhc,WAIrD,CAEA2lB,kBAAAA,GACE,IAAKptB,KAAK0c,YACR,OAGF,MAAMnK,EAAQvS,KAAK0c,YAAY/K,WAEzB+b,EAAqBrlB,SAAS0W,eAAe,sBAC7C4O,EAAoBtlB,SAAS0W,eAAe,qBAC5C6O,EAAkBvlB,SAAS0W,eAAe,mBAE1C8O,EAAoBxlB,SAAS0W,eAAe,qBAC5C+O,EAAmBzlB,SAAS0W,eAAe,oBAC3CgP,EAAiB1lB,SAAS0W,eAAe,kBAE/C,GAAI2O,EAAoB,CACtB,MAAMjmB,EAAQ9E,KAAKurB,MAA2B,IAArB3b,EAAM9G,cAC/BiiB,EAAmBjmB,MAAQA,EACvBomB,IACFA,EAAkBI,YAAc,GAAGxmB,KAEvC,CAEA,GAAIkmB,EAAmB,CACrB,MAAMlmB,EAAQ9E,KAAKurB,MAA0B,IAApB3b,EAAM7G,aAC/BiiB,EAAkBlmB,MAAQA,EACtBqmB,IACFA,EAAiBG,YAAc,GAAGxmB,KAEtC,CAEA,GAAImmB,EAAiB,CACnB,MAAMnmB,EAAQ9E,KAAKurB,MAAwB,IAAlB3b,EAAM5G,WAC/BiiB,EAAgBnmB,MAAQA,EACpBsmB,IACFA,EAAeE,YAAc,GAAGxmB,KAEpC,CACF,CAEAgmB,eAAAA,GACE,MAAMU,EAAgB9lB,SAAS0W,eAAe,iBACxCqP,EAAgB/lB,SAAS0W,eAAe,iBAG9C,IAAIsP,EAAiB,KAGrBniB,OAAO6d,iBAAiB,sBAAuBG,IAC7Cne,QAAQC,IAAI,mCAEZke,EAAMM,iBAEN6D,EAAiBnE,EAGbiE,GACFA,EAAcjB,UAAUjiB,OAAO,UAE7BmjB,GACFA,EAAclB,UAAUnrB,IAAI,YAK5BosB,GACFA,EAAcpE,iBAAiB,QAASuE,UACtC,IAAKD,EAEH,YADAtiB,QAAQC,IAAI,kCAKdqiB,EAAeE,SAGf,MAAMC,QAAEA,SAAkBH,EAAeI,WAEzB,aAAZD,GACFziB,QAAQC,IAAI,uCACZmiB,EAAcF,YAAc,sBAC5BE,EAAcO,UAAW,GAEzB3iB,QAAQC,IAAI,wCAIdqiB,EAAiB,KACjBF,EAAcjB,UAAUnrB,IAAI,YAKhCmK,OAAO6d,iBAAiB,eAAgB,KACtChe,QAAQC,IAAI,qCACRmiB,GACFA,EAAcjB,UAAUnrB,IAAI,UAE1BqsB,IACFA,EAAcH,YAAc,gCAC5BG,EAAclB,UAAUjiB,OAAO,WAGjCojB,EAAiB,OAIfniB,OAAOyiB,WAAW,8BAA8BC,SAAW1iB,OAAO2iB,UAAUC,YAC9E/iB,QAAQC,IAAI,gDACRmiB,GACFA,EAAcjB,UAAUnrB,IAAI,UAE1BqsB,IACFA,EAAcH,YAAc,8BAC5BG,EAAclB,UAAUjiB,OAAO,YAIjC8jB,WAAW,MACJV,GAAkBF,GAAiBA,EAAcjB,UAAUK,SAAS,WACnEa,IACFA,EAAcH,YAAc,+EAC5BG,EAAclB,UAAUjiB,OAAO,YAGlC,IAEP,CAEA+e,cAAAA,GACEhqB,KAAKoc,OAAO4S,OAAS9iB,OAAOsT,WAAatT,OAAOuT,YAChDzf,KAAKoc,OAAO6S,yBACZjvB,KAAKqc,SAASkD,QAAQrT,OAAOsT,WAAYtT,OAAOuT,YAClD,CAEA+L,YAAAA,CAAahoB,EAAY,MACvB,MAAM2gB,EAAiBnkB,KAAK2c,OAAOpF,cAII,IAArCvX,KAAKqV,WAAW2H,eAAe9a,GACM,IAArClC,KAAKqV,WAAW2H,eAAe7a,IAG/BnC,KAAKid,eAAeC,YAClBld,KAAKqV,WAAW2H,eAAe9a,EAC/BlC,KAAKid,eAAeG,aACnB,GAAK5Z,GACRxD,KAAKid,eAAeE,UAClBnd,KAAKqV,WAAW2H,eAAe7a,EAC/BnC,KAAKid,eAAeG,aACnB,GAAK5Z,GAGRxD,KAAKid,eAAeE,SAAWxa,KAAKC,KACjCD,KAAKoU,GAAK,EACXpU,KAAKE,IAAIF,KAAKoU,GAAK,EAAG/W,KAAKid,eAAeE,YAK9C,MAIM+R,EAAc,EAAM/K,EAAehiB,EAEnCqG,EALa,GAIK7F,KAAKE,IAAI,EAAmC,GAAhCF,KAAKC,IAAI,EAAGssB,EAAc,KAIxDC,EATW,GASDxsB,KAAKkU,IAAI7W,KAAKid,eAAeC,YACvCkS,EAVW,GAUDzsB,KAAK2W,IAAItZ,KAAKid,eAAeC,YACvCmS,EACJ7mB,EAZe,GAYN7F,KAAKkU,IAAI7W,KAAKid,eAAeE,UAAuB,GAEzDyF,EAAS,IAAIlgB,EAAcysB,EAASE,EAASD,GAC7CE,EAAiBnL,EAAeziB,QAAQK,IAAI6gB,GAQlD,IAAI2M,EAGFA,EAFEvvB,KAAKuc,SAEY5Z,KAAKE,IAAI,GAAKF,KAAKC,IAAI,GAAKsJ,OAAOsT,WAAa,OAGhD7c,KAAKE,IAAI,EAAKF,KAAKC,IAAI,EAAKsJ,OAAOsT,WAAa,OAIrE,MAAMgQ,EAAoC,GAAZhsB,EAG9B,IAAIisB,EAAyB,EAC7B,GAAIzvB,KAAK2c,QAAU3c,KAAK2c,OAAO5J,SAAU,CAEvC,MAAM2c,EAA2B1vB,KAAK2c,OAAO7J,eAC1CpR,QACAsU,YACChW,KAAKqd,4BAGPoS,EAAyB,EAAwB,IAD/C,EAAIC,EAAyBC,IAAI3vB,KAAKqd,6BAG1Crd,KAAKqd,0BAA4BqS,EAAyBhuB,OAC5D,MACE1B,KAAKqd,0BAA4B,KAInC,MAAMuS,EAA0BjtB,KAAKE,IACnC,EAnC0B,IAqCxB0sB,EACAC,EACAC,GAIJzvB,KAAKoc,OAAOhb,SAASkV,KAAKgZ,EAAgBM,GAG1C,MAAMC,EAAe1L,EAAeziB,QAGpC,GAAI1B,KAAK2c,QAAU3c,KAAK2c,OAAO5J,SAAU,CACvC,MAAM+c,EAAoB9vB,KAAK2c,OAAO7J,eAAepR,QAAQsU,YAE7D6Z,EAAa9tB,IAAI+tB,EAAkBjuB,eAAe,IAClDguB,EAAa1tB,GAAK,CACpB,MACE0tB,EAAa1tB,GAAK,EAGpBnC,KAAKoc,OAAOuE,OAAOkP,EACrB,CAEApR,aAAAA,GACE,MAAMsR,EAAUtjB,IACdujB,sBAAsBD,GAGtB,MAAMvsB,EACJxD,KAAKsd,SAAW,GAAK7Q,EAAczM,KAAKsd,UAAY,IAAO,KAC7Dtd,KAAKsd,SAAW7Q,EAEhBzM,KAAKwE,OAAOhB,GACZxD,KAAKiwB,UAEPF,EAAQ,EACV,CAUAG,qBAAAA,CAAsBhuB,EAAGE,EAAGoF,EAAM2oB,GAEhC,MAAMC,EAAYztB,KAAKypB,KAAK+D,EAAK7Y,UAAUpV,GAAK,EAAIiuB,EAAK7Y,UAAUlV,GAAK,GAClEiuB,EAAOF,EAAK7Y,UAAUpV,EAAIkuB,EAC1BE,EAAOH,EAAK7Y,UAAUlV,EAAIguB,EAG1BG,GAASF,EAAOnuB,EAAIouB,EAAOluB,GAAK+tB,EAAK/iB,UAAY5F,EAAO2oB,EAAKxN,MAC7D6N,EAAW7tB,KAAKkU,IAAI0Z,GACpBE,EAAW9tB,KAAK2W,IAAIiX,GAGpBG,EAAkBP,EAAKQ,UAAYR,EAAK/iB,UAE9C,MAAO,CACLlL,EAAGwuB,EAAkBL,EAAOG,EAAWL,EAAKnL,UAC5C7iB,EAAGsuB,EAAWN,EAAKnL,UACnB5iB,EAAGsuB,EAAkBJ,EAAOE,EAAWL,EAAKnL,UAEhD,CAEAxgB,MAAAA,CAAOhB,GACL,IAAKxD,KAAKsc,SACR,OAIF9Y,EAAYb,KAAKE,IAAIW,EAAW,MAGhCxD,KAAK0S,cAAclO,OAAOhB,GAG1B,MAAMkB,EAAmB1E,KAAK2c,OAAOpF,cAAc7V,QAKnD,GAJA1B,KAAK2c,OAAOvH,YAAYpV,KAAKqV,YAC7BrV,KAAK2c,OAAOnY,SAGRxE,KAAK0c,aAAe1c,KAAK0c,YAAYnR,cAAe,CACtD,MAAMqlB,EAAkB5wB,KAAK2c,OAAOpF,cACX7S,EAAiBrD,WAAWuvB,GAG9B,KAEjBjuB,KAAKmH,SAAW,KAElB9J,KAAK0c,YAAYnO,UAAU,WAAYqiB,EAG7C,CAWA,GARA5wB,KAAKyc,eAAejY,OAAOhB,GAGvBxD,KAAK8Z,MACP9Z,KAAK8Z,KAAKtV,OAAOhB,GAIfxD,KAAK0c,aAAe1c,KAAK0c,YAAYnR,cAAe,CACtD,MAAMslB,EAAY7wB,KAAK2c,OAAOpF,cACxB7G,EAAU1Q,KAAKoc,OAAO0U,kBAAkB,IAAIpuB,GAC5CiO,EAAK3Q,KAAKoc,OAAOzL,GACvB3Q,KAAK0c,YAAYjM,uBAAuBogB,EAAWngB,EAASC,EAC9D,CAGA3Q,KAAKwrB,aAAahoB,GAGlBxD,KAAKkkB,6BAGLlkB,KAAK+wB,WAGL/wB,KAAKqpB,MAAM9Z,QAAQyhB,IACjB,MAAMvH,EAAOuH,EAAS5d,KAChBmG,EAAWkQ,EAAKlQ,SAGlBA,EAASuQ,aACXL,EAAKwH,aAAa1X,EAASuQ,aAAcvQ,EAAS3G,gBAGlD6W,EAAKhV,SAAStS,GAAKoX,EAAS3G,cAC5B6W,EAAKhV,SAASvS,GAA8B,GAAzBqX,EAAS3G,eAI9B,MAAMpL,EAAoB,KAAbkP,KAAKC,MACZua,EACJ3X,EAASsQ,UACqD,GAA9DlnB,KAAKkU,IAAIrP,EAAO+R,EAASoQ,WAAapQ,EAASqQ,aACjDH,EAAKroB,SAASe,EAAI+uB,EAGlB,MAAM1W,EAAc,GAAkD,GAA5C7X,KAAKkU,IAAW,EAAPrP,EAAW+R,EAASqQ,aACvDH,EAAKpiB,SAASkR,kBAAoBiC,IAIpCxa,KAAK4c,mBAAmBrN,QAAQ4hB,IAC9B,MAAM/d,EAAO+d,EAAU/d,KACvB,GAAIA,EAAKmG,SAASyN,WAAa5T,EAAKmG,SAAS0N,WAAY,CACvD,MAAMzf,EAAoB,KAAbkP,KAAKC,MACZya,EACJzuB,KAAKkU,IAAIrP,EAAO4L,EAAKmG,SAASyN,WAAa5T,EAAKmG,SAAS0N,WACrDoK,EACJ1uB,KAAK2W,IAAI9R,EAAO4L,EAAKmG,SAASyN,UAAY,IAC1C5T,EAAKmG,SAAS0N,WACd,GACF7T,EAAKqB,SAASvS,EAAIkvB,EAClBhe,EAAKqB,SAASrS,EAAIivB,CACpB,IAIFrxB,KAAK6c,aAAatN,QAAQ+hB,IACxB,MAAM/X,EAAW+X,EAAS/X,SACpB/R,EAAoB,KAAbkP,KAAKC,MAGlB4C,EAAS4P,WAAa5P,EAASoO,UAAYnkB,EAG3C,MAAM+tB,EACJhY,EAAS2P,WAAWhnB,EACpBS,KAAK2W,IAAIC,EAAS4P,WAAa5P,EAASmO,WACpC8J,EACJjY,EAAS2P,WAAW9mB,EACpBO,KAAKkU,IAAI0C,EAAS4P,WAAa5P,EAASmO,WACpC+J,EACJlY,EAAS2P,WAAW/mB,EAA0C,GAAtCQ,KAAKkU,IAAIrP,EAAO+R,EAAS6P,WAEnDkI,EAASlwB,SAASiT,IAAIkd,EAAOE,EAAOD,GAGpC,MAAME,EAAiBnY,EAAS4P,UAAYxmB,KAAKoU,GAAK,EAItD,GAHAua,EAAS7c,SAAStS,EAAIuvB,EAGQ,cAA1BnY,EAASkO,aAA8B,CAEzC6J,EAAS5Z,SAASnI,QAAQoI,IACxB,QAAqCga,IAAjCha,EAAM4B,SAASiP,cAA6B,CAC9C,MAAMoJ,EACgD,GAApDjvB,KAAKkU,IAAW,EAAPrP,EAAWmQ,EAAM4B,SAASiP,eACrC7Q,EAAMlD,SAASvS,EAAI0vB,EACnBja,EAAMlD,SAASrS,EACuC,GAApDO,KAAKkU,IAAW,EAAPrP,EAAWmQ,EAAM4B,SAASiP,cACvC,IAIF,MAAMqJ,EAAa,EAAyB,GAArBlvB,KAAKkU,IAAW,EAAPrP,GAC5B8pB,EAAS5Z,SAAS,IACpB4Z,EAAS5Z,SAAS,GAAGxC,MAAMuN,UAAUoP,EAEzC,KAAqC,SAA1BtY,EAASkO,cAEd6J,EAAS5Z,SAAS,KAEpB4Z,EAAS5Z,SAAS,GAAGjD,SAAStS,EAAyB,GAArBQ,KAAKkU,IAAW,EAAPrP,IAI7C8pB,EAAS5Z,SAASnI,QAAQ,CAACoI,EAAOnX,KAC5BA,EAAQ,IAEVmX,EAAMlD,SAASrS,EACbuV,EAAMlD,SAASrS,EAAiC,GAA7BO,KAAKkU,IAAW,EAAPrP,EAAWhH,OAGV,aAA1B+Y,EAASkO,cAElB6J,EAAS5Z,SAASnI,QAAQoI,IACpBA,EAAM/Q,UAAoC,kBAAxB+Q,EAAM/Q,SAAS3B,OACnC0S,EAAMlD,SAASrS,EAAyB,GAArBO,KAAKkU,IAAW,EAAPrP,QAOpC,MAAMA,EAAoB,KAAbkP,KAAKC,MA0ClB,GAAI3W,KAAK8kB,aAAe9kB,KAAKmlB,sBAAuB,CAClD,MAAM3d,EAAoB,KAAbkP,KAAKC,MACZsO,EAAgBjlB,KAAK8kB,YAAYle,SAAS+D,WAAWvJ,SAAS8jB,MAGpE,IAAK,IAAI5f,EAAI,EAAGA,EAAI2f,EAAcpgB,OAAQS,GAAK,EAAG,CAChD,MAAMpD,EAAIlC,KAAKmlB,sBAAsB7f,GAC/BlD,EAAIpC,KAAKmlB,sBAAsB7f,EAAI,GAsBnCwsB,EAlBJnvB,KAAKkU,IACH3U,EAAIlC,KAAK+kB,WAAW3X,UAAY5F,EAAOxH,KAAK+kB,WAAWpC,OACrD3iB,KAAK+kB,WAAWC,UAEpBriB,KAAKkU,IACHzU,EAAIpC,KAAK+kB,WAAW3X,UAAY,GAC9B5F,EAAOxH,KAAK+kB,WAAWpC,MAAQ,IAEnC3iB,KAAK+kB,WAAWC,UAChB,GAEAriB,KAAKkU,KACF3U,EAAIE,GAAKpC,KAAK+kB,WAAW3X,UAAY,IACpC5F,EAAOxH,KAAK+kB,WAAWpC,MAAQ,KAEnC3iB,KAAK+kB,WAAWC,UAChB,GAMFC,EAAc3f,GAAKpD,EACnB+iB,EAAc3f,EAAI,GAAKwsB,EACvB7M,EAAc3f,EAAI,GAAKlD,CACzB,CACApC,KAAK8kB,YAAYle,SAAS+D,WAAWvJ,SAAS8H,aAAc,CAC9D,CAIA,GAAIlJ,KAAKulB,aAAevlB,KAAKwlB,sBAAuB,CAClD,MAAMuM,EAAgB/xB,KAAKulB,YAAY3e,SAAS+D,WAAWvJ,SAAS8jB,MAGpE,IAAK,IAAI5f,EAAI,EAAGA,EAAIysB,EAAcltB,OAAQS,GAAK,EAAG,CAChD,MAAMpD,EAAIlC,KAAKwlB,sBAAsBlgB,GAC/BlD,EAAIpC,KAAKwlB,sBAAsBlgB,EAAI,GAGnCwsB,EAC2B,EAA/BnvB,KAAKkU,IAAQ,GAAJ3U,EAAiB,EAAPsF,GACe,EAAlC7E,KAAKkU,IAAQ,IAAJzU,EAAkB,IAAPoF,GAGhBwqB,EAAgB,IAClBF,EAAaE,GACfD,EAAczsB,EAAI,GAAKwsB,EAAa,GACpC9xB,KAAKulB,YAAYle,SAASqM,QAAU/Q,KAAKE,IACvC,GAC+B,IAA9BivB,EAAaE,KAGhBD,EAAczsB,EAAI,IAAK,EAE3B,CAEAtF,KAAKulB,YAAY3e,SAAS+D,WAAWvJ,SAAS8H,aAAc,CAC9D,CA8BA,GA3BIlJ,KAAKgiB,QACPhiB,KAAKgiB,OAAOzS,QAAQ0S,IAClB,MAAM1I,EAAW0I,EAAW1I,SACtBgB,EAAgB/S,EAAO+R,EAASoJ,MAAQpJ,EAASqJ,OAGvDX,EAAW7gB,SAASc,EAClBqX,EAASmJ,iBAAiBxgB,EAA8B,EAA1BS,KAAKkU,IAAI0D,GACzC0H,EAAW7gB,SAASgB,EAClBmX,EAASmJ,iBAAiBtgB,EAAoC,EAAhCO,KAAK2W,IAAoB,GAAhBiB,GAGzC0H,EAAWvK,SAASnI,QAAQ,CAAClN,EAAQ7B,KAEnC6B,EAAOoS,SAAStS,GAAK,KAAgB,KAAR3B,EAG7B,MAAMyxB,EAAc5vB,EAAOgF,SAASqM,SAAW,GAC/CrR,EAAOgF,SAASqM,QAAU/Q,KAAKC,IAC7B,GACAqvB,EAAoD,GAAtCtvB,KAAKkU,IAAoB,EAAhB0D,EAAoB/Z,QAO/CR,KAAKujB,eAAiBvjB,KAAKujB,cAAchK,SAAU,CACrD,MAAMA,EAAWvZ,KAAKujB,cAAchK,SAK9BJ,EAJgB3R,EAAO+R,EAASyJ,gBAGlBzJ,EAAS6J,YAAc,EAAIzgB,KAAKoU,IAG9C7U,EACJS,KAAK2W,IAAIH,GAASI,EAAS0J,gBAAkB1J,EAASmJ,iBAAiBxgB,EACnEC,EAAgC,GAA5BQ,KAAKiT,IAAIjT,KAAKkU,IAAIsC,IAAe,GACrC/W,EAAImX,EAASmJ,iBAAiBtgB,EAEpCpC,KAAKujB,cAAcniB,SAASiT,IAAInS,EAAGC,EAAGC,GAGlCpC,KAAKwjB,gBACPxjB,KAAKwjB,eAAepiB,SAAS+D,KAAKnF,KAAKujB,cAAcniB,SAEzD,CAGIpB,KAAKkjB,kBACPljB,KAAKkjB,iBAAiB3T,QAAQ2K,IAC5B,MAAMX,EAAWW,EAAMX,SACjBgB,EACJ/S,EAAO+R,EAASyJ,eAAiBzJ,EAASE,gBAGtC0V,EAAUxsB,KAAKkU,IAAI0D,GAAiBhB,EAAS0J,gBAC7CmM,EAAUzsB,KAAK2W,IAAoB,IAAhBiB,GAAuBhB,EAAS0J,gBACnDoM,EAA0C,EAAhC1sB,KAAKkU,IAAoB,GAAhB0D,GAEzBL,EAAM9Y,SAASc,EAAIqX,EAASmJ,iBAAiBxgB,EAAIitB,EACjDjV,EAAM9Y,SAASe,EAAIoX,EAASmJ,iBAAiBvgB,EAAIktB,EACjDnV,EAAM9Y,SAASgB,EAAImX,EAASmJ,iBAAiBtgB,EAAIgtB,EAGjD,MAAM8C,EAAqB,GAAoC,GAA9BvvB,KAAKkU,IAAoB,EAAhB0D,GAC1CL,EAAMD,WAAaja,KAAKuc,SAAW,GAAM,IAAO2V,IAKpDlyB,KAAKmyB,sBAGLnyB,KAAKoyB,oBACP,CAEAD,mBAAAA,GAEE,MAAME,EAAmBryB,KAAK0S,cAAcxO,gBAAgBpB,gBAC1D9C,KAAK2c,OAAOzJ,aAGd,IAAK,MAAMlO,KAAaqtB,EACtB,GAAuB,gBAAnBrtB,EAAUC,OAA2BD,EAAUE,UAAW,CAE5DF,EAAUE,WAAY,EAGtB,MAAM8rB,EAAWhxB,KAAKqpB,MAAMzf,KAAK0oB,GAAKA,EAAEpf,cAAgBlO,GACxD,GAAIgsB,EAAU,CAEZhxB,KAAKmG,MAAM8E,OAAO+lB,EAAS5d,MAG3BpT,KAAK0S,cAAcnO,gBAAgBysB,EAAS9d,aAG5C,MAAM1S,EAAQR,KAAKqpB,MAAM5oB,QAAQuwB,IACnB,IAAVxwB,GACFR,KAAKqpB,MAAM3oB,OAAOF,EAAO,GAI3BR,KAAK8c,YACL9c,KAAK+wB,WAGD/wB,KAAK0c,aACP1c,KAAK0c,YAAYnO,UAAU,cAAeyiB,EAAS5d,KAAKhS,UAI1DpB,KAAKyc,eAAezS,YAAYgnB,EAAS5d,KAAKhS,SAAU,CACtD8I,MAAO,GACPtE,KAAM,IACNlC,SAAU,IAAIhB,EAAc,EAAG,EAAG,GAClC2G,kBAAmB,IAAI3G,EAAc,EAAG,EAAG,GAC3CmD,MAAO,IAAIc,EAAY,UACvB/E,KAAM,CAAEiB,IAAK,EAAGD,IAAK,KAGvBmJ,QAAQC,IAAI,4BAA4BhM,KAAK8c,aAGnB,IAAtB9c,KAAKqpB,MAAMxkB,QACb7E,KAAKuyB,cAET,CACF,CAEJ,CAKAA,YAAAA,GACMvyB,KAAK8Z,OAAS9Z,KAAK8Z,KAAKY,mBAC1B1a,KAAK8Z,KAAKE,WAGNha,KAAK0c,aACP1c,KAAK0c,YAAYnO,UAAU,eAAgBvO,KAAK8Z,KAAKvC,eAGvDxL,QAAQC,IAAI,sDAEhB,CAKAomB,kBAAAA,GACE,IAAKpyB,KAAK8Z,OAAS9Z,KAAK8Z,KAAKY,iBAC3B,OAIF,MAAM2X,EAAmBryB,KAAK0S,cAAcxO,gBAAgBpB,gBAC1D9C,KAAK2c,OAAOzJ,aAGd,IAAK,MAAMlO,KAAaqtB,EACtB,GAAuB,SAAnBrtB,EAAUC,MAAmBD,EAAU8U,OACzC/N,QAAQC,IAAI,+BACWhH,EAAU8U,KAAKO,iBAClB,CAClBtO,QAAQC,IAAI,0CACZhM,KAAKmO,gBACL,KACF,CAGN,CAEAA,aAAAA,GACEpC,QAAQC,IAAI,sBAGZhM,KAAKwyB,wBAGDxyB,KAAK0c,aACP1c,KAAK0c,YAAYnO,UAAU,iBAG7BvO,KAAK+c,cAGD/c,KAAK8Z,MACP9Z,KAAK8Z,KAAK7T,QAIZjG,KAAKme,oBACLne,KAAK+wB,UACP,CAKAyB,qBAAAA,GAIE,GAHAzmB,QAAQC,IAAI,oCAGRhM,KAAKyc,gBAAkBzc,KAAK8Z,KAAM,CACpC,MAAMyN,EAAevnB,KAAK8Z,KAAKvC,cAG/BvX,KAAKyc,eAAezS,YAAYud,EAAc,CAC5Crd,MAAO,GACPtE,KAAM,KACNlC,SAAU,IAAIhB,EAAc,EAAG,EAAG,GAClC2G,kBAAmB,IAAI3G,EAAc,EAAG,EAAG,GAC3Cd,KAAM,CAAEiB,IAAK,EAAGD,IAAK,IACrBiD,MAAO,IAAIc,EAAY,WAIzB3G,KAAKyc,eAAezS,YAAYud,EAAc,CAC5Crd,MAAO,GACPtE,KAAM,EACNlC,SAAU,IAAIhB,EAAc,EAAG,GAAK,GACpC2G,kBAAmB,IAAI3G,EAAc,EAAG,EAAG,GAC3Cd,KAAM,CAAEiB,IAAK,EAAGD,IAAK,GACrBiD,MAAO,IAAIc,EAAY,WAE3B,CAGI3G,KAAKoc,QACPpc,KAAKyyB,iBAAiB,GAAK,GAI7BzyB,KAAK0yB,mBACP,CAKAA,iBAAAA,GACE,MAAMC,EAAQtqB,SAASC,cAAc,OAcrC,GAbAqqB,EAAM3G,MAAM4G,QAAU,6SAajBvqB,SAASwqB,cAAc,qBAAsB,CAChD,MAAM7G,EAAQ3jB,SAASC,cAAc,SACrC0jB,EAAM8G,GAAK,mBACX9G,EAAMiC,YAAc,qJAOpB5lB,SAASwgB,KAAKkK,YAAY/G,EAC5B,CAEA3jB,SAAS9E,KAAKwvB,YAAYJ,GAG1B5D,WAAW,KACL4D,EAAMK,YACRL,EAAMK,WAAWC,YAAYN,IAE9B,KACL,CAKAF,gBAAAA,CAAiBxY,EAAY,GAAKzM,EAAW,IAC3C,IAAKxN,KAAKoc,OACR,OAGF,MAAMsG,EAAmB1iB,KAAKoc,OAAOhb,SAASM,QACxCsO,EAAY0G,KAAKC,MAEjBuc,EAAiBA,KACrB,MACMC,GADWzc,KAAKC,MAAQ3G,GAAa,IAChBxC,EAE3B,GAAI2lB,EAAW,EAAG,CAEhB,MAAMC,EAAmBnZ,GAAa,EAAIkZ,GAGpCE,GAAU1wB,KAAKmH,SAAW,IAAOspB,EAAmB,EACpDE,GAAU3wB,KAAKmH,SAAW,IAAOspB,EAAmB,EACpDG,GAAU5wB,KAAKmH,SAAW,IAAOspB,EAAmB,EAE1DpzB,KAAKoc,OAAOhb,SAAS+D,KAAKud,GAC1B1iB,KAAKoc,OAAOhb,SAASW,IAAI,IAAIW,EAAc2wB,EAAQC,EAAQC,IAE3DvD,sBAAsBkD,EACxB,MAEElzB,KAAKoc,OAAOhb,SAAS+D,KAAKud,IAI9BwQ,GACF,CAEAnC,QAAAA,GAKE,GAJA1oB,SAAS0W,eAAe,aAAakP,YAAcjuB,KAAK8c,UACxDzU,SAAS0W,eAAe,eAAekP,YAAcjuB,KAAK+c,YAGtD/c,KAAK2c,OAAQ,CACf,MAGMzO,EADe,EAFElO,KAAK2c,OAAOpF,cAGSpV,EAGtCqxB,EAAyBtlB,EAAMoZ,QAAQ,GAC7Cjf,SAAS0W,eAAe,cAAckP,YAAcuF,CACtD,CACF,CAEAvD,MAAAA,GACE,IACMjwB,KAAKqc,UAAYrc,KAAKmG,OAASnG,KAAKoc,QACtCpc,KAAKqc,SAAS4T,OAAOjwB,KAAKmG,MAAOnG,KAAKoc,OAE1C,CAAE,MAAOpP,GAEHhN,KAAKyzB,gBAAkB,IACzB1nB,QAAQkB,KAAK,sBAAuBD,GACpChN,KAAKyzB,iBAAmBzzB,KAAKyzB,iBAAmB,GAAK,EAEzD,CACF,CAEAlV,WAAAA,GACE,MAAMmV,EAAiBrrB,SAAS0W,eAAe7C,GAC3CwX,GACFA,EAAexG,UAAUnrB,IAAI,SAEjC,CAEAyc,MAAAA,GACE,MAAMmV,EAAYtrB,SAAS0W,eAAe7C,GACtCyX,GACFA,EAAUzG,UAAUjiB,OAAO,UAE7BjL,KAAK+wB,UACP,CAEAjS,SAAAA,CAAUD,GACR,MAAM6U,EAAiBrrB,SAAS0W,eAAe7C,GAC3CwX,IACFA,EAAeE,UAAY,uHAGlB/U,mNAMT6U,EAAexG,UAAUjiB,OAAO,UAEpC,CAEAuR,YAAAA,GACE,MAAO,iEAAiEqX,KACtEhF,UAAUiF,UAEd,EAIF5nB,OAAO6d,iBACL,mBACAuE,UACE,IACEviB,QAAQC,IAAI,mDACZ,MAAM+nB,EAAO,IAAI5X,EACjBjQ,OAAO8nB,eAAiBD,QAClBA,EAAK9nB,YACb,CAAE,MAAOe,GACPjB,QAAQiB,MAAM,+CAAgDA,GAE9D,MAAM0mB,EAAiBrrB,SAAS0W,eAAe,WAC3C2U,IACFA,EAAeE,UAAY,+JAGoB5mB,EAAM6R,mOAOzD,GAEF,CAAEoL,SAAS,IAIb/d,OAAO6d,iBACL,mBACAG,IACEA,EAAMM,iBACNze,QAAQkB,KAAK,uBAEf,CAAEgd,SAAS,IAGb/d,OAAO6d,iBACL,uBACA,KACEhe,QAAQC,IAAI,2BAGd,CAAEie,SAAS,IAIb5hB,SAAS0hB,iBACP,mBACA,KACM1hB,SAAS4rB,OAEXloB,QAAQC,IAAI,sCAGZD,QAAQC,IAAI,iBAGhB,CAAEie,SAAS"}