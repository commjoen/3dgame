System.register(["./three-legacy-CxKyhTv9.js"],function(t,e){"use strict";var i,s,n,o,a,r,c,l,h,d,u,m,p,y,g,v,f,w,x,S,M,C,b,E,A,V,B,z,T;return{setters:[t=>{i=t.V,s=t.C,n=t.B,o=t.a,a=t.S,r=t.A,c=t.P,l=t.T,h=t.b,d=t.M,u=t.c,m=t.d,p=t.e,y=t.f,g=t.g,v=t.D,f=t.h,w=t.i,x=t.E,S=t.W,M=t.j,C=t.k,b=t.l,E=t.m,A=t.n,V=t.o,B=t.p,z=t.q,T=t.r}],execute:function(){class t{constructor(){this.colliders=[],this.staticColliders=[]}addCollider(t,e=!1){(e?this.staticColliders:this.colliders).push(t)}removeCollider(t){let e=this.colliders.indexOf(t);-1===e?(e=this.staticColliders.indexOf(t),-1!==e&&this.staticColliders.splice(e,1)):this.colliders.splice(e,1)}checkCollision(t,e){return"sphere"===t.collisionType&&"sphere"===e.collisionType?this.checkSphereCollision(t,e):"box"===t.collisionType&&"box"===e.collisionType?this.checkAABBCollision(t,e):("sphere"===t.collisionType&&"box"===e.collisionType||"box"===t.collisionType&&"sphere"===e.collisionType)&&this.checkSphereAABBCollision(t,e)}checkSphereCollision(t,e){return t.position.distanceTo(e.position)<=t.radius+e.radius}checkAABBCollision(t,e){const i=t.position.clone().sub(t.size.clone().multiplyScalar(.5)),s=t.position.clone().add(t.size.clone().multiplyScalar(.5)),n=e.position.clone().sub(e.size.clone().multiplyScalar(.5)),o=e.position.clone().add(e.size.clone().multiplyScalar(.5));return i.x<=o.x&&s.x>=n.x&&i.y<=o.y&&s.y>=n.y&&i.z<=o.z&&s.z>=n.z}checkSphereAABBCollision(t,e){const s="sphere"===t.collisionType?t:e,n="box"===t.collisionType?t:e,o=n.position.clone().sub(n.size.clone().multiplyScalar(.5)),a=n.position.clone().add(n.size.clone().multiplyScalar(.5)),r=new i(Math.max(o.x,Math.min(s.position.x,a.x)),Math.max(o.y,Math.min(s.position.y,a.y)),Math.max(o.z,Math.min(s.position.z,a.z)));return s.position.distanceTo(r)<=s.radius}checkCollisions(t){const e=[];for(const i of this.colliders)i!==t&&this.checkCollision(t,i)&&e.push(i);for(const i of this.staticColliders)this.checkCollision(t,i)&&e.push(i);return e}}class e{constructor(){this.buoyancyForce=2,this.dragCoefficient=.95,this.currentDirection=new i(.1,0,.05),this.currentStrength=.02}applyBuoyancy(t,e){const s=new i(0,this.buoyancyForce*e,0);t.velocity.add(s)}applyDrag(t){t.velocity.multiplyScalar(this.dragCoefficient)}applyCurrent(t,e=1,i){const s=this.currentDirection.clone().multiplyScalar(this.currentStrength*e*i);t.velocity.add(s)}applyUnderwaterEffects(t,e){this.applyBuoyancy(t,e),this.applyDrag(t),this.applyCurrent(t,1,e)}}class k{constructor(){this.gravity=new i(0,-9.8,0),this.waterDensity=1e3,this.collisionSystem=new t,this.underwaterPhysics=new e,this.rigidBodies=[],this.isUnderwater=!0}addRigidBody(t){this.rigidBodies.push(t),t.collisionType&&this.collisionSystem.addCollider(t,t.isStatic)}removeRigidBody(t){const e=this.rigidBodies.indexOf(t);-1!==e&&(this.rigidBodies.splice(e,1),this.collisionSystem.removeCollider(t))}update(t){for(const e of this.rigidBodies)this.updateBody(e,t)}updateBody(t,e){if(t.isStatic)return;t.velocity||(t.velocity=new i);const s=t.position.clone();if(this.isUnderwater)this.underwaterPhysics.applyUnderwaterEffects(t,e);else{const i=this.gravity.clone().multiplyScalar(e);t.velocity.add(i)}const n=t.velocity.clone().multiplyScalar(e);t.position.add(n);const o=this.collisionSystem.checkCollisions(t);o.length>0&&this.resolveCollisions(t,o,s)}resolveCollisions(t,e,i){e.filter(t=>("collectible"!==t.type||t.collected)&&"gate"!==t.type).length>0&&(t.position.copy(i),t.velocity.multiplyScalar(.3)),t.onCollision&&t.onCollision(e)}checkCollisions(){const t=[];for(let e=0;e<this.rigidBodies.length;e++){const i=this.rigidBodies[e],s=this.collisionSystem.checkCollisions(i);for(const e of s)t.push([i,e])}return t}createSphereBody(t,e,s=!1){return{position:t.clone(),velocity:new i,collisionType:"sphere",radius:e,isStatic:s}}createBoxBody(t,e,s=!1){return{position:t.clone(),velocity:new i,collisionType:"box",size:e.clone(),isStatic:s}}}class L{constructor(t,e,i,s,n){this.position=t.clone(),this.velocity=e.clone(),this.life=i,this.maxLife=i,this.size=s,this.color=n.clone(),this.alpha=1,this.active=!0}update(t){this.active&&(this.position.add(this.velocity.clone().multiplyScalar(t)),this.life-=t,this.alpha=this.life/this.maxLife,this.life<=0&&(this.active=!1))}reset(t,e,i,s,n){this.position.copy(t),this.velocity.copy(e),this.life=i,this.maxLife=i,this.size=s,this.color.copy(n),this.alpha=1,this.active=!0}}class P{constructor(t,e=1e3){this.scene=t,this.maxParticles=e,this.particles=[],this.emitters=[],this.initializeParticlePool(),this.createParticleRenderSystem(),this.createUnderwaterEmitters()}initializeParticlePool(){for(let t=0;t<this.maxParticles;t++){const t=new L(new i,new i,1,1,new s(16777215));t.active=!1,this.particles.push(t)}}createParticleRenderSystem(){this.geometry=new n,this.positions=new Float32Array(3*this.maxParticles),this.colors=new Float32Array(3*this.maxParticles),this.sizes=new Float32Array(this.maxParticles),this.alphas=new Float32Array(this.maxParticles),this.geometry.setAttribute("position",new o(this.positions,3)),this.geometry.setAttribute("color",new o(this.colors,3)),this.geometry.setAttribute("size",new o(this.sizes,1)),this.geometry.setAttribute("alpha",new o(this.alphas,1)),this.material=new a({uniforms:{time:{value:0},pointTexture:{value:this.createParticleTexture()}},vertexShader:"\n        attribute float size;\n        attribute float alpha;\n        attribute vec3 color;\n        \n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vAlpha = alpha;\n          vColor = color;\n          \n          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n          gl_PointSize = size * (300.0 / -mvPosition.z);\n          gl_Position = projectionMatrix * mvPosition;\n        }\n      ",fragmentShader:"\n        uniform sampler2D pointTexture;\n        \n        varying float vAlpha;\n        varying vec3 vColor;\n        \n        void main() {\n          vec4 texColor = texture2D(pointTexture, gl_PointCoord);\n          gl_FragColor = vec4(vColor, vAlpha * texColor.a);\n        }\n      ",transparent:!0,blending:r,depthWrite:!1}),this.points=new c(this.geometry,this.material),this.scene.add(this.points)}createParticleTexture(){const t=document.createElement("canvas");t.width=64,t.height=64;const e=t.getContext("2d"),i=e.createRadialGradient(32,32,0,32,32,32);i.addColorStop(0,"rgba(255,255,255,1)"),i.addColorStop(.2,"rgba(255,255,255,0.8)"),i.addColorStop(.4,"rgba(255,255,255,0.4)"),i.addColorStop(1,"rgba(255,255,255,0)"),e.fillStyle=i,e.fillRect(0,0,64,64);const s=new l(t);return s.needsUpdate=!0,s}createUnderwaterEmitters(){this.addEmitter({type:"bubbles",position:new i(0,-10,0),rate:5,life:8,size:{min:2,max:6},velocity:new i(0,2,0),velocityVariation:new i(.5,.5,.5),color:new s(8900331),colorVariation:.1,area:new i(20,2,20)}),this.addEmitter({type:"debris",position:new i(0,0,0),rate:3,life:15,size:{min:1,max:3},velocity:new i(.1,.05,.1),velocityVariation:new i(.3,.2,.3),color:new s(16777215),colorVariation:.2,area:new i(40,20,40)}),this.addEmitter({type:"lightRays",position:new i(0,15,0),rate:.5,life:20,size:{min:8,max:15},velocity:new i(0,-.5,0),velocityVariation:new i(.1,.2,.1),color:new s(16766720),colorVariation:.1,area:new i(30,5,30)})}addEmitter(t){const e={...t,accumulator:0,active:!0};this.emitters.push(e)}emitParticle(t){const e=this.particles.find(t=>!t.active);if(!e)return;const s=t.position.clone().add(new i((Math.random()-.5)*t.area.x,(Math.random()-.5)*t.area.y,(Math.random()-.5)*t.area.z)),n=t.velocity.clone().add(new i((Math.random()-.5)*t.velocityVariation.x,(Math.random()-.5)*t.velocityVariation.y,(Math.random()-.5)*t.velocityVariation.z)),o=t.size.min+Math.random()*(t.size.max-t.size.min),a=t.color.clone();t.colorVariation>0&&a.offsetHSL((Math.random()-.5)*t.colorVariation,0,(Math.random()-.5)*t.colorVariation*.5),e.reset(s,n,t.life,o,a)}createBurst(t,e={}){const n=e.count||20,o=e.life||2,a=e.velocity||new i(0,1,0),r=e.velocityVariation||new i(2,2,2),c=e.color||new s(16766720),l=e.size||{min:2,max:8};for(let s=0;s<n;s++){const e=this.particles.find(t=>!t.active);if(!e)break;const s=a.clone().add(new i((Math.random()-.5)*r.x,(Math.random()-.5)*r.y,(Math.random()-.5)*r.z)),n=l.min+Math.random()*(l.max-l.min);e.reset(t.clone(),s,o,n,c)}}update(t){for(const i of this.emitters){if(!i.active)continue;i.accumulator+=t;const e=1/i.rate;for(;i.accumulator>=e;)this.emitParticle(i),i.accumulator-=e}let e=0;for(let i=0;i<this.particles.length;i++){const s=this.particles[i];if(s.active){s.update(t);const i=3*e;this.positions[i]=s.position.x,this.positions[i+1]=s.position.y,this.positions[i+2]=s.position.z,this.colors[i]=s.color.r,this.colors[i+1]=s.color.g,this.colors[i+2]=s.color.b,this.sizes[e]=s.size,this.alphas[e]=s.alpha,e++}}this.geometry.attributes.position.needsUpdate=!0,this.geometry.attributes.color.needsUpdate=!0,this.geometry.attributes.size.needsUpdate=!0,this.geometry.attributes.alpha.needsUpdate=!0,this.geometry.setDrawRange(0,e),this.material.uniforms.time.value+=t}setEmitterActive(t,e){const i=this.emitters.find(e=>e.type===t);i&&(i.active=e)}clear(){for(const t of this.particles)t.active=!1}dispose(){this.scene.remove(this.points),this.geometry.dispose(),this.material.dispose(),this.material.uniforms.pointTexture.value&&this.material.uniforms.pointTexture.value.dispose()}}class I{constructor(){this.audioContext=null,this.listener=null,this.sounds=new Map,this.isInitialized=!1,this.isMuted=!1,this.masterVolume=.5,this.musicVolume=.5,this.sfxVolume=.5,this.underwaterFilterFrequency=800,this.reverbAmount=.3,this.loadSettings(),console.log("🔊 AudioEngine created")}async initialize(){try{this.audioContext=new(window.AudioContext||window.webkitAudioContext),this.listener=this.audioContext.listener,this.masterGain=this.audioContext.createGain(),this.masterGain.gain.setValueAtTime(this.masterVolume,this.audioContext.currentTime),this.masterGain.connect(this.audioContext.destination),this.musicGain=this.audioContext.createGain(),this.sfxGain=this.audioContext.createGain(),this.musicGain.gain.setValueAtTime(this.musicVolume,this.audioContext.currentTime),this.sfxGain.gain.setValueAtTime(this.sfxVolume,this.audioContext.currentTime),this.musicGain.connect(this.masterGain),this.sfxGain.connect(this.masterGain),this.createUnderwaterEffects(),this.createSoundEffects(),this.isInitialized=!0,console.log("✅ AudioEngine initialized successfully")}catch(t){console.warn("⚠️ AudioEngine initialization failed:",t)}}createUnderwaterEffects(){this.audioContext&&(this.underwaterFilter=this.audioContext.createBiquadFilter(),this.underwaterFilter.type="lowpass",this.underwaterFilter.frequency.setValueAtTime(this.underwaterFilterFrequency,this.audioContext.currentTime),this.underwaterFilter.Q.setValueAtTime(1,this.audioContext.currentTime),this.underwaterFilter.connect(this.masterGain),console.log("🌊 Underwater audio effects created"))}createSoundEffects(){this.audioContext&&(this.soundConfigs={starCollect:{type:"sine",frequency:880,duration:.4,volume:.3,envelope:{attack:.01,decay:.1,sustain:.8,release:.3},harmonics:[{frequency:1320,volume:.5},{frequency:1760,volume:.3}]},gateActivate:{type:"triangle",frequency:220,duration:1.5,volume:.4,envelope:{attack:.2,decay:.3,sustain:.7,release:.5},modulation:{frequency:4,depth:20}},levelComplete:{type:"square",frequency:440,duration:2.5,volume:.5,envelope:{attack:.1,decay:.2,sustain:.8,release:.4},melody:[440,554.37,659.25,880]},swimming:{type:"sine",frequency:200,duration:.2,volume:.15,envelope:{attack:.05,decay:.1,sustain:.5,release:.05}},underwater:{type:"sine",frequency:80,duration:-1,volume:.12,envelope:{attack:2,decay:0,sustain:1,release:2},modulation:{frequency:.3,depth:5}}},console.log("🎵 Enhanced sound effects configured"))}playSound(t,e=null){if(!this.isInitialized||this.isMuted||!this.audioContext)return;const i=this.soundConfigs[t];if(i)try{const s=this.audioContext.currentTime;if(i.melody)return void this.playMelody(i,e);const n=this.audioContext.createOscillator(),o=this.audioContext.createGain();if(n.type=i.type,n.frequency.setValueAtTime(i.frequency,s),i.modulation){const t=this.audioContext.createOscillator(),e=this.audioContext.createGain();t.frequency.setValueAtTime(i.modulation.frequency,s),e.gain.setValueAtTime(i.modulation.depth,s),t.connect(e),e.connect(n.frequency),t.start(s),i.duration>0&&t.stop(s+i.duration)}const a=i.envelope||{attack:.01,decay:.1,sustain:.8,release:.2},r=s+a.attack,c=r+a.decay,l=i.volume*a.sustain,h=i.duration>0?s+i.duration:s+1;o.gain.setValueAtTime(0,s),o.gain.linearRampToValueAtTime(i.volume,r),o.gain.linearRampToValueAtTime(l,c),o.gain.setValueAtTime(l,h-a.release),o.gain.linearRampToValueAtTime(0,h),n.connect(o);const d=[];if(i.harmonics&&i.harmonics.forEach(t=>{const e=this.audioContext.createOscillator(),n=this.audioContext.createGain();e.type=i.type,e.frequency.setValueAtTime(t.frequency,s),n.gain.setValueAtTime(t.volume*i.volume,s),n.gain.linearRampToValueAtTime(0,h),e.connect(n),n.connect(o),e.start(s),i.duration>0&&e.stop(h),d.push(e)}),e){const t=this.audioContext.createPanner();t.panningModel="HRTF",t.setPosition(e.x,e.y,e.z),o.connect(t),t.connect(this.underwaterFilter),this.underwaterFilter.connect(this.sfxGain)}else o.connect(this.underwaterFilter),this.underwaterFilter.connect(this.sfxGain);n.start(s),i.duration>0&&n.stop(h),console.log(`🔊 Playing enhanced sound: ${t}`)}catch(s){console.warn(`Failed to play sound "${t}":`,s)}else console.warn(`Sound "${t}" not found`)}playMelody(t,e=null){const i=t.duration/t.melody.length;t.melody.forEach((s,n)=>{const o=this.audioContext.currentTime+n*i,a=this.audioContext.createOscillator(),r=this.audioContext.createGain();if(a.type=t.type,a.frequency.setValueAtTime(s,o),r.gain.setValueAtTime(0,o),r.gain.linearRampToValueAtTime(t.volume,o+.05),r.gain.linearRampToValueAtTime(0,o+i-.05),a.connect(r),e){const t=this.audioContext.createPanner();t.panningModel="HRTF",t.setPosition(e.x,e.y,e.z),r.connect(t),t.connect(this.underwaterFilter),this.underwaterFilter.connect(this.sfxGain)}else r.connect(this.underwaterFilter),this.underwaterFilter.connect(this.sfxGain);a.start(o),a.stop(o+i)})}startAmbientSound(){if(this.isInitialized&&!this.isMuted&&!this.ambientOscillator)try{this.ambientOscillator=this.audioContext.createOscillator(),this.ambientGain=this.audioContext.createGain(),this.ambientOscillator.type="sine",this.ambientOscillator.frequency.setValueAtTime(60,this.audioContext.currentTime),this.ambientGain.gain.setValueAtTime(0,this.audioContext.currentTime),this.ambientGain.gain.linearRampToValueAtTime(.08,this.audioContext.currentTime+3),this.ambientOscillator.connect(this.ambientGain),this.ambientGain.connect(this.underwaterFilter),this.underwaterFilter.connect(this.musicGain),this.ambientOscillator.start(),this.createBackgroundMusic(),console.log("🌊 Ambient underwater sound and music started")}catch(t){console.warn("Failed to start ambient sound:",t)}}createBackgroundMusic(){this.musicLayers=[],[{frequency:110,volume:.03,type:"sine"},{frequency:146.83,volume:.025,type:"sine"},{frequency:164.81,volume:.02,type:"triangle"},{frequency:220,volume:.015,type:"sine"}].forEach((t,e)=>{const i=this.audioContext.createOscillator(),s=this.audioContext.createGain(),n=this.audioContext.createOscillator(),o=this.audioContext.createGain();i.type=t.type,i.frequency.setValueAtTime(t.frequency,this.audioContext.currentTime),n.type="sine",n.frequency.setValueAtTime(.1+.05*e,this.audioContext.currentTime),o.gain.setValueAtTime(2,this.audioContext.currentTime),n.connect(o),o.connect(i.frequency),s.gain.setValueAtTime(0,this.audioContext.currentTime),s.gain.linearRampToValueAtTime(t.volume,this.audioContext.currentTime+5+e),i.connect(s),s.connect(this.underwaterFilter),this.underwaterFilter.connect(this.musicGain),i.start(),n.start(),this.musicLayers.push({oscillator:i,gainNode:s,lfo:n,lfoGain:o})})}stopAmbientSound(){if(this.ambientOscillator)try{this.ambientGain.gain.linearRampToValueAtTime(0,this.audioContext.currentTime+1),this.ambientOscillator.stop(this.audioContext.currentTime+1),this.ambientOscillator=null,this.ambientGain=null}catch(t){console.warn("Error stopping ambient sound:",t)}this.musicLayers&&(this.musicLayers.forEach(e=>{try{e.gainNode.gain.linearRampToValueAtTime(0,this.audioContext.currentTime+1),e.oscillator.stop(this.audioContext.currentTime+1),e.lfo.stop(this.audioContext.currentTime+1)}catch(t){console.warn("Error stopping music layer:",t)}}),this.musicLayers=null),console.log("🔇 Ambient sound and music stopped")}updateListenerPosition(t,e,i){if(this.listener&&this.isInitialized)try{this.listener.positionX?(this.listener.positionX.setValueAtTime(t.x,this.audioContext.currentTime),this.listener.positionY.setValueAtTime(t.y,this.audioContext.currentTime),this.listener.positionZ.setValueAtTime(t.z,this.audioContext.currentTime),this.listener.forwardX.setValueAtTime(e.x,this.audioContext.currentTime),this.listener.forwardY.setValueAtTime(e.y,this.audioContext.currentTime),this.listener.forwardZ.setValueAtTime(e.z,this.audioContext.currentTime),this.listener.upX.setValueAtTime(i.x,this.audioContext.currentTime),this.listener.upY.setValueAtTime(i.y,this.audioContext.currentTime),this.listener.upZ.setValueAtTime(i.z,this.audioContext.currentTime)):(this.listener.setPosition(t.x,t.y,t.z),this.listener.setOrientation(e.x,e.y,e.z,i.x,i.y,i.z))}catch{}}setMasterVolume(t){this.masterVolume=Math.max(0,Math.min(1,t)),this.masterGain&&this.audioContext&&this.masterGain.gain.setValueAtTime(this.masterVolume,this.audioContext.currentTime),this.saveSettings()}setMusicVolume(t){this.musicVolume=Math.max(0,Math.min(1,t)),this.musicGain&&this.audioContext&&this.musicGain.gain.setValueAtTime(this.musicVolume,this.audioContext.currentTime),this.saveSettings()}setSfxVolume(t){this.sfxVolume=Math.max(0,Math.min(1,t)),this.sfxGain&&this.audioContext&&this.sfxGain.gain.setValueAtTime(this.sfxVolume,this.audioContext.currentTime),this.saveSettings()}toggleMute(){return this.isMuted=!this.isMuted,this.isMuted?this.stopAmbientSound():this.isInitialized&&this.startAmbientSound(),console.log("🔊 Audio "+(this.isMuted?"muted":"unmuted")),this.isMuted}getState(){return{isInitialized:this.isInitialized,isMuted:this.isMuted,masterVolume:this.masterVolume,musicVolume:this.musicVolume,sfxVolume:this.sfxVolume}}loadSettings(){try{const s=localStorage.getItem("oceanAdventure_audioSettings");if(s){var t,e,i;const n=JSON.parse(s);this.masterVolume=null!==(t=n.masterVolume)&&void 0!==t?t:.5,this.musicVolume=null!==(e=n.musicVolume)&&void 0!==e?e:.5,this.sfxVolume=null!==(i=n.sfxVolume)&&void 0!==i?i:.5}}catch(s){console.warn("Failed to load audio settings:",s)}}saveSettings(){try{const t={masterVolume:this.masterVolume,musicVolume:this.musicVolume,sfxVolume:this.sfxVolume};localStorage.setItem("oceanAdventure_audioSettings",JSON.stringify(t))}catch(t){console.warn("Failed to save audio settings:",t)}}dispose(){this.stopAmbientSound(),this.audioContext&&"closed"!==this.audioContext.state&&this.audioContext.close(),this.sounds.clear(),this.isInitialized=!1,console.log("🗑️ AudioEngine disposed")}}class G{constructor(t,e){this.scene=t,this.physicsEngine=e,this.moveSpeed=8,this.rotationSpeed=3,this.maxVelocity=5,this.movementVector=new i,this.isMoving=!1,this.createPlayerMesh(),this.createPhysicsBody(),this.physicsBody.onCollision=t=>this.handleCollisions(t)}createPlayerMesh(){const t=new h(.5,1.5,4,8),e=new d({color:65416,transparent:!0,opacity:.9,shininess:50,specular:4500070,emissive:8721,emissiveIntensity:.1});this.mesh=new u(t,e),this.mesh.castShadow=!0,this.mesh.receiveShadow=!0,this.mesh.position.set(0,2,0),this.scene.add(this.mesh)}createPhysicsBody(){this.physicsBody=this.physicsEngine.createSphereBody(this.mesh.position.clone(),1,!1),this.physicsEngine.addRigidBody(this.physicsBody)}handleInput(t){this.movementVector.set(0,0,0),this.isMoving=!1,t.keys&&(t.keys.forward&&(this.movementVector.z-=1,this.isMoving=!0),t.keys.backward&&(this.movementVector.z+=1,this.isMoving=!0),t.keys.left&&(this.movementVector.x-=1,this.isMoving=!0),t.keys.right&&(this.movementVector.x+=1,this.isMoving=!0),t.keys.up&&(this.movementVector.y+=1,this.isMoving=!0),t.keys.down&&(this.movementVector.y-=1,this.isMoving=!0)),t.joystick&&(this.movementVector.x+=t.joystick.x,this.movementVector.z+=t.joystick.y,(Math.abs(t.joystick.x)>.1||Math.abs(t.joystick.y)>.1)&&(this.isMoving=!0)),t.mobileButtons&&(t.mobileButtons.swimUp&&(this.movementVector.y+=1,this.isMoving=!0),t.mobileButtons.swimDown&&(this.movementVector.y-=1,this.isMoving=!0)),this.movementVector.length()>1&&this.movementVector.normalize(),this.applyMovement()}applyMovement(){if(!this.isMoving)return void this.physicsBody.velocity.multiplyScalar(.9);const t=this.movementVector.clone().multiplyScalar(.016*this.moveSpeed);if(this.physicsBody.velocity.add(t),this.physicsBody.velocity.length()>this.maxVelocity&&this.physicsBody.velocity.normalize().multiplyScalar(this.maxVelocity),this.movementVector.length()>.1){const t=Math.atan2(this.movementVector.x,this.movementVector.z);this.mesh.rotation.y=m.lerp(this.mesh.rotation.y,t,.016*this.rotationSpeed)}}update(){this.mesh.position.copy(this.physicsBody.position);const t=.001*Date.now(),e=.02*Math.sin(2*t);this.mesh.position.y+=e}handleCollisions(t){for(const e of t)"collectible"===e.type?this.handleCollectibleCollision(e):"obstacle"===e.type?this.handleObstacleCollision(e):"environment"===e.type&&this.handleEnvironmentCollision(e)}handleCollectibleCollision(t){console.log("Player collected item:",t)}handleObstacleCollision(t){const e=this.physicsBody.position.clone().sub(t.position).normalize();this.physicsBody.velocity.add(e.multiplyScalar(2))}handleEnvironmentCollision(){}getPosition(){return this.physicsBody.position.clone()}setPosition(t){this.mesh.position.copy(t),this.physicsBody.position.copy(t)}getVelocity(){return this.physicsBody.velocity.clone()}getIsMoving(){return this.isMoving||this.physicsBody.velocity.length()>.1}dispose(){this.physicsEngine.removeRigidBody(this.physicsBody),this.scene.remove(this.mesh),this.mesh.geometry.dispose(),this.mesh.material.dispose()}}class D{constructor(t,e,s=new i(0,0,-15)){this.scene=t,this.physicsEngine=e,this.position=s.clone(),this.width=4,this.height=6,this.depth=.5,this.isActivated=!1,this.isCollected=!1,this.pulseSpeed=.02,this.rotationSpeed=.01,this.time=0,this.createGateMesh(),this.createPhysicsBody(),console.log("🚪 Gate created at position:",s)}createGateMesh(){const t=new p(this.width,.3,8,32),e=new d({color:65535,emissive:26214,emissiveIntensity:.5,transparent:!0,opacity:.9,shininess:100});this.gateMesh=new u(t,e),this.gateMesh.position.copy(this.position),this.gateMesh.castShadow=!0,this.gateMesh.receiveShadow=!0;const i=new y(1.5*this.width,this.height),s=new g({color:35071,transparent:!0,opacity:.3,side:v});this.portalMesh=new u(i,s),this.portalMesh.position.copy(this.position),this.gateLight=new f(65535,1,25),this.gateLight.position.copy(this.position),this.gateLight.position.z+=1,this.rimLights=[];for(let n=0;n<6;n++){const t=n/6*Math.PI*2,e=new f(35071,.3,10),i=1.2*this.width;e.position.set(this.position.x+Math.cos(t)*i,this.position.y+Math.sin(t)*i*.7,this.position.z+2*(Math.random()-.5)),e.userData={originalAngle:t,animationOffset:Math.random()*Math.PI*2},this.rimLights.push(e)}this.setVisibility(!1)}createPhysicsBody(){this.physicsBody=[];const t=this.width-.8;for(let i=0;i<8;i++){const e=i/8*Math.PI*2,s=Math.cos(e)*t,n=Math.sin(e)*t*.7,o=this.position.clone();o.x+=s,o.y+=n;const a=this.physicsEngine.createSphereBody(o,2,!0);a.type="gate",a.gate=this,this.physicsEngine.addRigidBody(a),this.physicsBody.push(a)}const e=this.physicsEngine.createSphereBody(this.position.clone(),3,!0);e.type="gate",e.gate=this,this.physicsEngine.addRigidBody(e),this.physicsBody.push(e)}activate(){this.isActivated||(this.isActivated=!0,this.setVisibility(!0),this.gateMesh.material.emissiveIntensity=.8,this.gateLight.intensity=1.5,this.rimLights.forEach(t=>{t.intensity=.4}),console.log("✨ Gate activated!"))}deactivate(){this.isActivated=!1,this.setVisibility(!1),this.gateMesh.material.emissiveIntensity=.5,this.gateLight.intensity=1,this.rimLights.forEach(t=>{t.intensity=.1})}setVisibility(t){t?(this.scene.add(this.gateMesh),this.scene.add(this.portalMesh),this.scene.add(this.gateLight),this.rimLights.forEach(t=>this.scene.add(t))):(this.scene.remove(this.gateMesh),this.scene.remove(this.portalMesh),this.scene.remove(this.gateLight),this.rimLights.forEach(t=>this.scene.remove(t)))}onPlayerEnter(){return!(!this.isActivated||this.isCollected||(this.isCollected=!0,console.log("🎯 Player entered gate - Level Complete!"),this.gateMesh.material.emissiveIntensity=1,this.gateLight.intensity=2,0))}update(t){if(!this.isActivated)return;this.time+=t;const e=.4+.3*Math.sin(this.time*this.pulseSpeed*10);this.gateMesh.material.emissiveIntensity=e,this.gateLight.intensity=.8+e,this.gateMesh.rotation.z+=this.rotationSpeed,this.portalMesh.material.opacity=.2+.2*Math.sin(this.time*this.pulseSpeed*15),this.rimLights.forEach((t,e)=>{const i=t.userData,s=.5*this.time+i.animationOffset,n=.2+.2*Math.sin(s+.5*e);t.intensity=n;const o=1.2*this.width,a=.1*Math.sin(2*s);t.position.set(this.position.x+Math.cos(i.originalAngle)*(o+a),this.position.y+Math.sin(i.originalAngle)*(o+a)*.7,this.position.z+.5*Math.sin(3*s))})}getPosition(){return this.position.clone()}getIsActivated(){return this.isActivated}getIsCollected(){return this.isCollected}reset(){this.isCollected=!1,this.deactivate(),this.time=0}dispose(){Array.isArray(this.physicsBody)?this.physicsBody.forEach(t=>{this.physicsEngine.removeRigidBody(t)}):this.physicsBody&&this.physicsEngine.removeRigidBody(this.physicsBody),this.setVisibility(!1),this.gateMesh&&(this.gateMesh.geometry.dispose(),this.gateMesh.material.dispose()),this.portalMesh&&(this.portalMesh.geometry.dispose(),this.portalMesh.material.dispose()),console.log("🗑️ Gate disposed")}}class F{static create(t=.2,e=.4,i=5,s=.1){const n=new w,o=2*Math.PI/i/2;let a=-Math.PI/2;n.moveTo(Math.cos(a)*e,Math.sin(a)*e);for(let c=0;c<i;c++)a+=o,n.lineTo(Math.cos(a)*t,Math.sin(a)*t),a+=o,n.lineTo(Math.cos(a)*e,Math.sin(a)*e);const r=new x(n,{depth:s,bevelEnabled:!0,bevelSegments:2,steps:2,bevelSize:.02,bevelThickness:.02});return r.center(),r}static createMaterial(t=16766720,e=.4){return new d({color:t,emissive:t,emissiveIntensity:e,shininess:100,specular:16777215,transparent:!0,opacity:.95})}static createVariants(){const t=[];return[{inner:.15,outer:.35,color:16766720},{inner:.18,outer:.38,color:16777088},{inner:.12,outer:.32,color:16753920},{inner:.2,outer:.4,color:16775885},{inner:.16,outer:.36,color:16757575}].forEach(e=>{const i=F.create(e.inner,e.outer),s=F.createMaterial(e.color);t.push({geometry:i,material:s,config:e})}),t}}const R="gameCanvas",O="loading",q="ui";class U{constructor(){this.scene=null,this.camera=null,this.renderer=null,this.canvas=null,this.isLoaded=!1,this.isMobile=this.detectMobile(),this.physicsEngine=null,this.particleSystem=null,this.audioEngine=null,this.player=null,this.gate=null,this.environmentObjects=[],this.starCount=0,this.levelNumber=1,this.inputState={keys:{forward:!1,backward:!1,left:!1,right:!1,up:!1,down:!1},joystick:{x:0,y:0},mobileButtons:{swimUp:!1,swimDown:!1}},this.lastTime=0,console.log("🌊 Ocean Adventure - Initializing...")}async initialize(){const t=[{name:"Canvas Setup",fn:()=>this.setupCanvas()},{name:"WebGL Renderer",fn:()=>this.setupRenderer()},{name:"3D Scene",fn:()=>this.setupScene()},{name:"Camera",fn:()=>this.setupCamera()},{name:"Lighting",fn:()=>this.setupLights()},{name:"Physics Engine",fn:()=>this.initializePhysics()},{name:"Particle System",fn:()=>this.initializeParticleSystem()},{name:"Audio Engine",fn:()=>this.initializeAudio()},{name:"Environment",fn:()=>this.createUnderwaterEnvironment()},{name:"Player",fn:()=>this.createPlayer()},{name:"Sample Stars",fn:()=>this.createSampleStars()},{name:"Gate",fn:()=>this.createGate()},{name:"Event Listeners",fn:()=>this.setupEventListeners()},{name:"UI Initialization",fn:()=>{this.hideLoading(),this.showUI()}},{name:"Game Loop",fn:()=>this.startGameLoop()}];try{console.log("🎮 Ocean Adventure - Starting initialization...");for(let i=0;i<t.length;i++){const s=t[i];console.log(`[${i+1}/${t.length}] Initializing ${s.name}...`);try{await s.fn(),console.log(`✅ ${s.name} initialized successfully`)}catch(e){throw console.error(`❌ Failed to initialize ${s.name}:`,e),new Error(`Initialization failed at step "${s.name}": ${e.message}`)}}this.isLoaded=!0,console.log("🎉 Ocean Adventure - Ready to play!")}catch(i){console.error("❌ Failed to initialize game:",i),this.showError("Failed to initialize game: "+i.message)}}setupCanvas(){if(console.log("🎮 Setting up canvas..."),this.canvas=document.getElementById(R),!this.canvas)throw new Error("Game canvas not found");console.log("✅ Canvas found and configured")}setupRenderer(){console.log("🎨 Setting up WebGL renderer...");try{this.renderer=new S({canvas:this.canvas,antialias:!this.isMobile,alpha:!1,powerPreference:this.isMobile?"low-power":"high-performance",failIfMajorPerformanceCaveat:!1,preserveDrawingBuffer:!1,premultipliedAlpha:!1,stencil:!1}),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.renderer.setClearColor(4386,1),this.renderer.shadowMap.enabled=!0,this.renderer.shadowMap.type=this.isMobile?M:C,this.renderer.outputColorSpace=b,this.renderer.toneMapping=E,this.renderer.toneMappingExposure=1;const t=this.renderer.getContext();if(!t)throw new Error("Failed to get WebGL context");t.getExtension("WEBGL_lose_context"),console.log("✅ WebGL renderer configured successfully")}catch(t){throw console.error("❌ Failed to setup WebGL renderer:",t),new Error(`WebGL initialization failed: ${t.message}`)}}setupScene(){console.log("🌊 Setting up 3D scene..."),this.scene=new A,console.log("✅ 3D scene created successfully")}initializePhysics(){this.physicsEngine=new k,console.log("⚡ Physics engine initialized")}initializeParticleSystem(){this.particleSystem=new P(this.scene,500),console.log("✨ Particle system initialized")}initializeAudio(){this.audioEngine=new I,console.log("🔊 Audio engine created (will initialize on user interaction)")}async tryInitializeAudio(){if(this.audioEngine&&!this.audioEngine.isInitialized)try{await this.audioEngine.initialize(),this.audioEngine.startAmbientSound(),console.log("🌊 Audio initialized and ambient sound started")}catch(t){console.warn("Audio initialization failed:",t)}}setupCamera(){this.camera=new V(75,window.innerWidth/window.innerHeight,.1,1e3),this.camera.position.set(0,5,10),this.camera.lookAt(0,0,0)}setupLights(){const t=new B(3368601,.3);this.scene.add(t);const e=new z(8900331,2.5);if(e.position.set(0,50,10),this.renderer.shadowMap.enabled){e.castShadow=!0;const t=this.isMobile?512:1024;e.shadow.mapSize.width=t,e.shadow.mapSize.height=t,e.shadow.camera.near=.5,e.shadow.camera.far=500,e.shadow.camera.left=-50,e.shadow.camera.right=50,e.shadow.camera.top=50,e.shadow.camera.bottom=-50,this.isMobile&&(e.shadow.bias=-5e-4)}this.scene.add(e),this.addUnderwaterVolumetricLights();const i=new z(4890367,.8);i.position.set(-20,10,-20),this.scene.add(i)}addUnderwaterVolumetricLights(){const t=[4890367,8900331,6591981,49151],e=this.isMobile?3:5;for(let i=0;i<e;i++){const s=new f(t[i%t.length],this.isMobile?2:3,30,2),n=i/e*Math.PI*2,o=15+10*Math.random();s.position.set(Math.cos(n)*o,8+5*Math.random(),Math.sin(n)*o),s.userData={originalPosition:s.position.clone(),animationOffset:Math.random()*Math.PI*2,animationSpeed:.5+.5*Math.random(),animationRadius:2+3*Math.random()},this.scene.add(s),this.volumetricLights||(this.volumetricLights=[]),this.volumetricLights.push(s)}}createUnderwaterEnvironment(){const t=new y(200,200),e=new d({color:27028,transparent:!0,opacity:.6,shininess:100,specular:8900331,side:v}),n=new u(t,e);n.rotation.x=-Math.PI/2,n.position.y=5,n.receiveShadow=!0,this.scene.add(n);const o=new y(100,100),a=new d({color:9127187,shininess:30,specular:2236962}),r=new u(o,a);r.rotation.x=-Math.PI/2,r.position.y=-5,r.receiveShadow=!0,this.scene.add(r);const c=this.physicsEngine.createBoxBody(new i(0,-5,0),new i(100,.1,100),!0);c.type="environment",this.physicsEngine.addRigidBody(c),this.createLevelBoundaries();for(let l=0;l<10;l++){const t=.5+1.5*Math.random(),e=new T(t),n=.3*Math.random(),o=new d({color:(new s).setHSL(n,.7,.5),shininess:60+40*Math.random(),specular:(new s).setHSL(n,.3,.8),transparent:!0,opacity:.9}),a=new u(e,o),r=new i(80*(Math.random()-.5),2*Math.random()-4,80*(Math.random()-.5));a.position.copy(r),a.castShadow=!0,a.receiveShadow=!0,this.scene.add(a);const c=this.physicsEngine.createSphereBody(r,1.2*t,!0);c.type="environment",c.mesh=a,this.physicsEngine.addRigidBody(c),this.environmentObjects.push({mesh:a,physicsBody:c})}}createLevelBoundaries(){console.log("🧱 Creating level boundaries...");const t=50,e=15;[{position:new i(0,7.5,t),size:new i(100,e,2),name:"North Wall"},{position:new i(0,7.5,-50),size:new i(100,e,2),name:"South Wall"},{position:new i(t,7.5,0),size:new i(2,e,100),name:"East Wall"},{position:new i(-50,7.5,0),size:new i(2,e,100),name:"West Wall"}].forEach(t=>{const e=this.physicsEngine.createBoxBody(t.position,t.size,!0);e.type="environment",e.name=t.name,this.physicsEngine.addRigidBody(e),console.log(`🧱 Created ${t.name} at position (${t.position.x.toFixed(1)}, ${t.position.y.toFixed(1)}, ${t.position.z.toFixed(1)})`)}),console.log("✅ Level boundaries created successfully")}createPlayer(){this.player=new G(this.scene,this.physicsEngine),console.log("🏊 Player created with physics")}createGate(){const t=new i(0,2,-15);this.gate=new D(this.scene,this.physicsEngine,t),console.log(`🚪 Gate created at position: (${t.x}, ${t.y}, ${t.z})`)}createSampleStars(){this.stars=[];const t=F.createVariants();for(let e=0;e<5;e++){const s=t[e%t.length],n=s.geometry.clone(),o=s.material.clone(),a=new u(n,o),r=new i(20*(Math.random()-.5),8*Math.random()-2,20*(Math.random()-.5));a.position.copy(r),a.castShadow=!0;const c=this.physicsEngine.createSphereBody(r,1,!0);c.type="collectible",c.mesh=a,c.collected=!1,this.physicsEngine.addRigidBody(c),a.userData={rotationSpeed:.02+.02*Math.random(),floatSpeed:.01+.01*Math.random(),floatOffset:Math.random()*Math.PI*2,originalY:r.y,physicsBody:c,rotationAxis:new i(Math.random()-.5,Math.random()-.5,Math.random()-.5).normalize()},this.stars.push({mesh:a,physicsBody:c}),this.scene.add(a)}console.log(`✨ Created ${this.stars.length} sample stars`)}setupEventListeners(){window.addEventListener("resize",()=>this.onWindowResize(),{passive:!0}),window.addEventListener("keydown",t=>this.onKeyDown(t)),window.addEventListener("keyup",t=>this.onKeyUp(t)),this.isMobile&&this.setupTouchControls(),this.setupSettingsModal()}onKeyDown(t){switch(this.tryInitializeAudio(),t.code){case"ArrowUp":case"KeyW":this.inputState.keys.forward=!0;break;case"ArrowDown":case"KeyS":this.inputState.keys.backward=!0;break;case"ArrowLeft":case"KeyA":this.inputState.keys.left=!0;break;case"ArrowRight":case"KeyD":this.inputState.keys.right=!0;break;case"Space":this.inputState.keys.up=!0,t.preventDefault();break;case"ShiftLeft":this.inputState.keys.down=!0}}onKeyUp(t){switch(t.code){case"ArrowUp":case"KeyW":this.inputState.keys.forward=!1;break;case"ArrowDown":case"KeyS":this.inputState.keys.backward=!1;break;case"ArrowLeft":case"KeyA":this.inputState.keys.left=!1;break;case"ArrowRight":case"KeyD":this.inputState.keys.right=!1;break;case"Space":this.inputState.keys.up=!1;break;case"ShiftLeft":this.inputState.keys.down=!1}}setupTouchControls(){this.setupVirtualJoystick(),this.setupMobileButtons(),this.touchState={startX:0,startY:0,currentX:0,currentY:0,isActive:!1},this.canvas.addEventListener("touchstart",t=>{if(t.preventDefault(),this.tryInitializeAudio(),t.touches.length>0){const e=t.touches[0];this.touchState.startX=e.clientX,this.touchState.startY=e.clientY,this.touchState.currentX=e.clientX,this.touchState.currentY=e.clientY,this.touchState.isActive=!0}}),this.canvas.addEventListener("touchmove",t=>{if(t.preventDefault(),t.touches.length>0&&this.touchState.isActive){const e=t.touches[0];this.touchState.currentX=e.clientX,this.touchState.currentY=e.clientY;const i=this.touchState.currentX-this.touchState.startX,s=this.touchState.currentY-this.touchState.startY,n=.05,o=3;Math.abs(i)>20&&(this.player.position.x+=i/o*n*.01),Math.abs(s)>20&&(this.player.position.z+=s/o*n*.01),this.updateCamera()}}),this.canvas.addEventListener("touchend",t=>{t.preventDefault(),this.touchState.isActive=!1}),this.canvas.addEventListener("touchcancel",t=>{t.preventDefault(),this.touchState.isActive=!1})}setupVirtualJoystick(){const t=document.getElementById("virtualJoystick"),e=document.getElementById("joystickKnob");if(!t||!e)return;const i={isActive:!1,centerX:0,centerY:0,currentX:0,currentY:0};t.addEventListener("touchstart",s=>{if(s.preventDefault(),s.stopPropagation(),s.touches.length>0){const n=s.touches[0],o=t.getBoundingClientRect();i.isActive=!0,i.centerX=o.left+o.width/2,i.centerY=o.top+o.height/2,i.currentX=n.clientX,i.currentY=n.clientY,t.style.borderColor="rgba(255, 255, 255, 0.6)",t.style.background="rgba(0, 17, 34, 0.7)",this.updateJoystickKnob(e,i,o)}}),t.addEventListener("touchmove",s=>{if(s.preventDefault(),s.stopPropagation(),s.touches.length>0&&i.isActive){const n=s.touches[0],o=t.getBoundingClientRect();i.currentX=n.clientX,i.currentY=n.clientY;const a=i.currentX-i.centerX,r=i.currentY-i.centerY,c=Math.sqrt(a*a+r*r),l=o.width/2-20;if(c>5){const t=a/l,e=r/l;this.inputState.joystick.x=Math.max(-1,Math.min(1,1.2*t)),this.inputState.joystick.y=Math.max(-1,Math.min(1,1.2*e))}else this.inputState.joystick.x=0,this.inputState.joystick.y=0;this.updateJoystickKnob(e,i,o)}}),t.addEventListener("touchend",s=>{s.preventDefault(),s.stopPropagation(),i.isActive=!1,this.inputState.joystick.x=0,this.inputState.joystick.y=0,t.style.borderColor="rgba(255, 255, 255, 0.3)",t.style.background="rgba(0, 17, 34, 0.5)",e.style.transform="translate(-50%, -50%)"}),t.addEventListener("touchcancel",s=>{s.preventDefault(),s.stopPropagation(),i.isActive=!1,this.inputState.joystick.x=0,this.inputState.joystick.y=0,t.style.borderColor="rgba(255, 255, 255, 0.3)",t.style.background="rgba(0, 17, 34, 0.5)",e.style.transform="translate(-50%, -50%)"})}updateJoystickKnob(t,e,i){const s=e.currentX-e.centerX,n=e.currentY-e.centerY,o=Math.sqrt(s*s+n*n),a=i.width/2-20;if(o<=a)t.style.transform=`translate(calc(-50% + ${s}px), calc(-50% + ${n}px))`;else{const e=Math.atan2(n,s),i=Math.cos(e)*a,o=Math.sin(e)*a;t.style.transform=`translate(calc(-50% + ${i}px), calc(-50% + ${o}px))`}}setupMobileButtons(){const t=document.getElementById("swimUpBtn"),e=document.getElementById("swimDownBtn");t&&(t.addEventListener("touchstart",e=>{e.preventDefault(),e.stopPropagation(),this.inputState.mobileButtons.swimUp=!0,t.style.background="rgba(255, 255, 255, 0.4)"}),t.addEventListener("touchend",e=>{e.preventDefault(),e.stopPropagation(),this.inputState.mobileButtons.swimUp=!1,t.style.background="rgba(0, 17, 34, 0.6)"}),t.addEventListener("touchcancel",e=>{e.preventDefault(),e.stopPropagation(),this.inputState.mobileButtons.swimUp=!1,t.style.background="rgba(0, 17, 34, 0.6)"})),e&&(e.addEventListener("touchstart",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimDown=!0,e.style.background="rgba(255, 255, 255, 0.4)"}),e.addEventListener("touchend",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimDown=!1,e.style.background="rgba(0, 17, 34, 0.6)"}),e.addEventListener("touchcancel",t=>{t.preventDefault(),t.stopPropagation(),this.inputState.mobileButtons.swimDown=!1,e.style.background="rgba(0, 17, 34, 0.6)"}))}setupSettingsModal(){const t=document.getElementById("settingsButton"),e=document.getElementById("settingsModal"),i=document.getElementById("closeSettings");if(t&&e&&i){const s=t=>{t&&(t.preventDefault(),t.stopPropagation()),e.classList.remove("hidden"),document.body.style.overflow="hidden",this.updateAudioSliders()},n=t=>{t&&(t.preventDefault(),t.stopPropagation()),e.classList.add("hidden"),document.body.style.overflow=""};t.addEventListener("click",s),i.addEventListener("click",n),e.addEventListener("click",t=>{t.target===e&&n(t)}),document.addEventListener("keydown",t=>{"Escape"!==t.key||e.classList.contains("hidden")||n()})}this.setupAudioControls()}setupAudioControls(){const t=document.getElementById("masterVolumeSlider"),e=document.getElementById("musicVolumeSlider"),i=document.getElementById("sfxVolumeSlider"),s=document.getElementById("masterVolumeValue"),n=document.getElementById("musicVolumeValue"),o=document.getElementById("sfxVolumeValue");t&&this.audioEngine&&t.addEventListener("input",t=>{const e=parseInt(t.target.value)/100;this.audioEngine.setMasterVolume(e),s&&(s.textContent=`${t.target.value}%`)}),e&&this.audioEngine&&e.addEventListener("input",t=>{const e=parseInt(t.target.value)/100;this.audioEngine.setMusicVolume(e),n&&(n.textContent=`${t.target.value}%`)}),i&&this.audioEngine&&i.addEventListener("input",t=>{const e=parseInt(t.target.value)/100;this.audioEngine.setSfxVolume(e),o&&(o.textContent=`${t.target.value}%`)})}updateAudioSliders(){if(!this.audioEngine)return;const t=this.audioEngine.getState(),e=document.getElementById("masterVolumeSlider"),i=document.getElementById("musicVolumeSlider"),s=document.getElementById("sfxVolumeSlider"),n=document.getElementById("masterVolumeValue"),o=document.getElementById("musicVolumeValue"),a=document.getElementById("sfxVolumeValue");if(e){const i=Math.round(100*t.masterVolume);e.value=i,n&&(n.textContent=`${i}%`)}if(i){const e=Math.round(100*t.musicVolume);i.value=e,o&&(o.textContent=`${e}%`)}if(s){const e=Math.round(100*t.sfxVolume);s.value=e,a&&(a.textContent=`${e}%`)}}onWindowResize(){this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.renderer.setSize(window.innerWidth,window.innerHeight)}updateCamera(){const t=this.player.getPosition(),e=new i(0,5,10),s=t.clone().add(e);this.camera.position.lerp(s,.1),this.camera.lookAt(t)}startGameLoop(){const t=e=>{requestAnimationFrame(t);const i=this.lastTime>0?(e-this.lastTime)/1e3:.016;this.lastTime=e,this.update(i),this.render()};t(0)}update(t){if(!this.isLoaded)return;t=Math.min(t,.033),this.physicsEngine.update(t);const e=this.player.getPosition().clone();if(this.player.handleInput(this.inputState),this.player.update(),this.audioEngine&&this.audioEngine.isInitialized){const t=this.player.getPosition();e.distanceTo(t)>.01&&Math.random()<.05&&this.audioEngine.playSound("swimming",t)}if(this.particleSystem.update(t),this.gate&&this.gate.update(t),this.audioEngine&&this.audioEngine.isInitialized){const t=this.player.getPosition(),e=this.camera.getWorldDirection(new i),s=this.camera.up;this.audioEngine.updateListenerPosition(t,e,s)}if(this.updateCamera(),this.updateUI(),this.stars.forEach(t=>{const e=t.mesh,i=e.userData;i.rotationAxis?e.rotateOnAxis(i.rotationAxis,i.rotationSpeed):(e.rotation.y+=i.rotationSpeed,e.rotation.x+=.5*i.rotationSpeed);const s=.001*Date.now(),n=i.originalY+.3*Math.sin(s*i.floatSpeed+i.floatOffset);e.position.y=n;const o=.3+.1*Math.sin(2*s+i.floatOffset);e.material.emissiveIntensity=o}),this.volumetricLights){const t=.001*Date.now();this.volumetricLights.forEach(e=>{const i=e.userData,s=t*i.animationSpeed+i.animationOffset,n=Math.sin(s)*i.animationRadius,o=Math.cos(1.3*s)*i.animationRadius,a=1*Math.sin(.7*s);e.position.x=i.originalPosition.x+n,e.position.y=i.originalPosition.y+a,e.position.z=i.originalPosition.z+o;const r=.8+.2*Math.sin(3*s);e.intensity=(this.isMobile?.6:.8)*r})}this.checkStarCollection(),this.checkGateCollision()}checkStarCollection(){const t=this.physicsEngine.collisionSystem.checkCollisions(this.player.physicsBody);for(const e of t)if("collectible"===e.type&&!e.collected){e.collected=!0;const t=this.stars.find(t=>t.physicsBody===e);if(t){this.scene.remove(t.mesh),this.physicsEngine.removeRigidBody(t.physicsBody);const e=this.stars.indexOf(t);-1!==e&&this.stars.splice(e,1),this.starCount++,this.updateUI(),this.audioEngine&&this.audioEngine.playSound("starCollect",t.mesh.position),this.particleSystem.createBurst(t.mesh.position,{count:15,life:1.5,velocity:new i(0,2,0),velocityVariation:new i(3,3,3),color:new s(16766720),size:{min:3,max:8}}),console.log(`⭐ Star collected! Total: ${this.starCount}`),0===this.stars.length&&this.activateGate()}}}activateGate(){this.gate&&!this.gate.getIsActivated()&&(this.gate.activate(),this.audioEngine&&this.audioEngine.playSound("gateActivate",this.gate.getPosition()),console.log("🚪 Gate activated! Swim through to complete level!"))}checkGateCollision(){if(!this.gate||!this.gate.getIsActivated())return;const t=this.physicsEngine.collisionSystem.checkCollisions(this.player.physicsBody);for(const e of t)if("gate"===e.type&&e.gate&&(console.log("🎯 Gate collision detected!"),e.gate.onPlayerEnter())){console.log("🎉 Level completed via gate collision!"),this.levelComplete();break}}levelComplete(){console.log("🎉 Level Complete!"),this.startPortalTransition(),this.audioEngine&&this.audioEngine.playSound("levelComplete"),this.levelNumber++,this.gate&&this.gate.reset(),this.createSampleStars(),this.updateUI()}startPortalTransition(){if(console.log("🌊 Starting portal transition..."),this.particleSystem&&this.gate){const t=this.gate.getPosition();this.particleSystem.createParticles({position:t,count:50,spread:2,velocity:{min:3,max:8},lifetime:{min:1.5,max:3},size:{min:4,max:12},color:new s(8900331),behavior:"swirl"}),this.particleSystem.createParticles({position:t,count:30,spread:3,velocity:{min:2,max:6},lifetime:{min:2,max:4},size:{min:2,max:6},color:new s(16766720),behavior:"sparkle"})}this.camera&&this.startCameraShake(.3,1),this.createScreenFlash()}createScreenFlash(){const t=document.createElement("div");if(t.style.cssText="\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: radial-gradient(circle, rgba(135, 206, 235, 0.3) 0%, transparent 70%);\n      pointer-events: none;\n      z-index: 1000;\n      animation: portalFlash 1.2s ease-out forwards;\n    ",!document.querySelector("#portalFlashStyle")){const t=document.createElement("style");t.id="portalFlashStyle",t.textContent="\n        @keyframes portalFlash {\n          0% { opacity: 0; }\n          20% { opacity: 1; }\n          100% { opacity: 0; }\n        }\n      ",document.head.appendChild(t)}document.body.appendChild(t),setTimeout(()=>{t.parentNode&&t.parentNode.removeChild(t)},1200)}startCameraShake(t=.2,e=.5){if(!this.camera)return;const s=this.camera.position.clone(),n=Date.now(),o=()=>{const a=(Date.now()-n)/1e3/e;if(a<1){const e=t*(1-a),n=(Math.random()-.5)*e*2,r=(Math.random()-.5)*e*2,c=(Math.random()-.5)*e*2;this.camera.position.copy(s),this.camera.position.add(new i(n,r,c)),requestAnimationFrame(o)}else this.camera.position.copy(s)};o()}updateUI(){if(document.getElementById("starCount").textContent=this.starCount,document.getElementById("levelNumber").textContent=this.levelNumber,this.player){const t=this.player.getPosition(),e=5,i=Math.max(0,e-t.y);document.getElementById("depthMeter").textContent=i.toFixed(1)}}render(){try{this.renderer&&this.scene&&this.camera&&this.renderer.render(this.scene,this.camera)}catch(t){this.webglErrorCount<5&&(console.warn("WebGL render error:",t),this.webglErrorCount=(this.webglErrorCount||0)+1)}}hideLoading(){const t=document.getElementById(O);t&&t.classList.add("hidden")}showUI(){const t=document.getElementById(q);t&&t.classList.remove("hidden"),this.updateUI()}showError(t){const e=document.getElementById(O);e&&(e.innerHTML=`\n        <div style="color: #ff4444; text-align: center;">\n          <h3>⚠️ Error Loading Game</h3>\n          <p>${t}</p>\n          <p style="margin-top: 20px; font-size: 14px; color: #ccc;">\n            Please check the browser console for more details and try refreshing the page.\n          </p>\n        </div>\n      `,e.classList.remove("hidden"))}detectMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}}window.addEventListener("DOMContentLoaded",async()=>{try{console.log("🌊 Ocean Adventure - Starting initialization...");const t=new U;await t.initialize()}catch(t){console.error("❌ Critical error during game initialization:",t);const e=document.getElementById("loading");e&&(e.innerHTML=`\n          <div style="color: #ff4444; text-align: center;">\n            <h3>⚠️ Critical Error</h3>\n            <p>Failed to initialize Ocean Adventure: ${t.message}</p>\n            <p style="margin-top: 20px; font-size: 14px; color: #ccc;">\n              Please check the browser console for more details and try refreshing the page.\n            </p>\n          </div>\n        `)}},{passive:!0}),window.addEventListener("webglcontextlost",t=>{t.preventDefault(),console.warn("WebGL context lost")},{passive:!1}),window.addEventListener("webglcontextrestored",()=>{console.log("WebGL context restored")},{passive:!0}),document.addEventListener("visibilitychange",()=>{document.hidden?console.log("Game paused due to page visibility"):console.log("Game resumed")},{passive:!0})}}});
//# sourceMappingURL=index-legacy-BKoRLss_.js.map
