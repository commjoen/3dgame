name: Regenerate Previews Page

on:
  workflow_dispatch: # Allow manual triggering
  schedule:
    - cron: '0 6 * * *' # Daily at 6 AM UTC to ensure previews page stays updated

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  regenerate-previews:
    name: Regenerate Previews Page
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout gh-pages branch
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      
    - name: Initialize gh-pages branch if needed
      run: |
        if [ ! -d ".git" ]; then
          echo "Creating new gh-pages branch..."
          git init
          git remote add origin https://${{ secrets.GITHUB_TOKEN }}@github.com/commjoen/3dgame.git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "# Ocean Adventure - GitHub Pages" > README.md
          git add README.md
          git commit -m "Initialize gh-pages branch"
          git branch -M gh-pages
          git push --set-upstream origin gh-pages
        fi
      
    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://${{ secrets.GITHUB_TOKEN }}@github.com/commjoen/3dgame.git
        
    - name: Fetch latest changes
      run: |
        git fetch origin gh-pages || echo "Branch may not exist yet"
        git reset --hard origin/gh-pages || echo "No remote branch to reset to"
        
    - name: Generate previews.html
      run: |
        # Get current date
        CURRENT_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
        
        # Generate the enhanced previews index with audio testing capabilities
        cat > previews.html << EOF
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Ocean Adventure - PR Previews & Audio Test</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    margin: 40px; 
                    background: linear-gradient(to bottom, #1e40af, #0f172a);
                    color: white;
                    min-height: 100vh;
                }
                .container { max-width: 1000px; margin: 0 auto; }
                .preview-item { 
                    background: rgba(255,255,255,0.1); 
                    margin: 20px 0; 
                    padding: 20px; 
                    border-radius: 8px;
                    border: 1px solid rgba(255,255,255,0.2);
                }
                .preview-item h3 { margin-top: 0; color: #60a5fa; }
                .preview-link { 
                    display: inline-block;
                    background: #1e40af; 
                    color: white; 
                    padding: 10px 20px; 
                    text-decoration: none; 
                    border-radius: 4px;
                    margin: 5px 5px 5px 0;
                }
                .preview-link:hover { background: #1d4ed8; }
                .main-link { background: #059669; }
                .main-link:hover { background: #047857; }
                .regenerate-info {
                    background: rgba(255,255,255,0.05);
                    padding: 15px;
                    border-radius: 8px;
                    margin: 20px 0;
                    border-left: 4px solid #60a5fa;
                }
                .audio-test-section {
                    background: rgba(34, 197, 94, 0.1);
                    border: 1px solid rgba(34, 197, 94, 0.3);
                    border-left: 4px solid #22c55e;
                }
                .status-indicator {
                    display: inline-block;
                    width: 12px;
                    height: 12px;
                    border-radius: 50%;
                    margin-right: 8px;
                }
                .status-unknown { background: #6b7280; }
                .status-loading { background: #f59e0b; animation: pulse 2s infinite; }
                .status-working { background: #22c55e; }
                .status-error { background: #ef4444; }
                @keyframes pulse {
                    0%, 100% { opacity: 1; }
                    50% { opacity: 0.5; }
                }
                .test-button {
                    background: #22c55e;
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 4px;
                    cursor: pointer;
                    margin: 5px;
                    font-size: 14px;
                }
                .test-button:hover { background: #16a34a; }
                .test-button:disabled { 
                    background: #6b7280; 
                    cursor: not-allowed; 
                }
                .game-preview {
                    background: rgba(255,255,255,0.05);
                    border-radius: 8px;
                    padding: 20px;
                    margin: 20px 0;
                }
                .game-preview iframe {
                    width: 100%;
                    height: 400px;
                    border: none;
                    border-radius: 8px;
                    background: #000;
                }
                #status-log {
                    background: rgba(0,0,0,0.3);
                    color: #e5e7eb;
                    padding: 15px;
                    border-radius: 8px;
                    font-family: monospace;
                    font-size: 14px;
                    max-height: 200px;
                    overflow-y: auto;
                    white-space: pre-wrap;
                    margin: 15px 0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üåä Ocean Adventure - Preview Deployments</h1>
                
                <div class="regenerate-info">
                    <p><strong>Last updated:</strong> ${CURRENT_DATE}</p>
                    <p>This page shows all active PR previews, deployment status, and includes audio testing capabilities.</p>
                </div>

                <!-- Audio Test Section -->
                <div class="preview-item audio-test-section">
                    <h3>üîä Audio System Test</h3>
                    <p>Test audio functionality for Ocean Adventure deployments:</p>
                    <button class="test-button" onclick="testWebAudio()">Test Web Audio API</button>
                    <button class="test-button" onclick="testOceanAudio()" id="oceanBtn" disabled>Test Ocean Sounds</button>
                    <button class="test-button" onclick="testGameDeployments()" id="deployBtn">Test All Deployments</button>
                    
                    <div id="status-log">Ready to test audio systems...</div>
                </div>

                <!-- Game Preview Section -->
                <div class="preview-item">
                    <h3>üéÆ Live Game Preview</h3>
                    <p>Try the game directly here (main branch deployment):</p>
                    <div class="game-preview">
                        <iframe src="/3dgame/" 
                                title="Ocean Adventure Game"
                                id="game-iframe"
                                allow="autoplay; fullscreen; gamepad; microphone; camera"
                                sandbox="allow-same-origin allow-scripts allow-popups allow-forms allow-pointer-lock">
                        </iframe>
                    </div>
                    <p><small>üí° Click in the game area and use WASD or arrow keys to move. Press any key to initialize audio.<br>
                    ‚ö†Ô∏è If the game doesn't work properly in the preview, <a href="/3dgame/" target="_blank" style="color: #60a5fa;">open it in a new tab</a> for the full experience.</small></p>
                </div>
                
                <!-- Main Deployment -->
                <div class="preview-item">
                    <h3>üöÄ Main Branch (Stable)</h3>
                    <p>The stable version deployed from the main branch.</p>
                    <div id="main-status" style="margin: 10px 0;">
                        <span class="status-indicator status-unknown" id="main-indicator"></span>
                        <span id="main-status-text">Status unknown</span>
                    </div>
                    <a href="/3dgame/" class="preview-link main-link">Play Main Version</a>
                    <a href="/3dgame/" target="_blank" class="preview-link">Open in New Tab</a>
                    <a href="https://github.com/commjoen/3dgame" class="preview-link">View Repository</a>
                    <button class="test-button" onclick="testDeployment('main', '/3dgame/')">Test Audio</button>
                </div>
        EOF
        
        # Add current PR previews
        pr_count=0
        for dir in pr-*/; do
            if [ -d "$dir" ]; then
                pr_num=${dir#pr-}
                pr_num=${pr_num%/}
                echo "                <div class=\"preview-item\">" >> previews.html
                echo "                    <h3>üîÑ Pull Request #$pr_num</h3>" >> previews.html
                echo "                    <p>Preview deployment for PR #$pr_num</p>" >> previews.html
                echo "                    <div id=\"pr${pr_num}-status\" style=\"margin: 10px 0;\">" >> previews.html
                echo "                        <span class=\"status-indicator status-unknown\" id=\"pr${pr_num}-indicator\"></span>" >> previews.html
                echo "                        <span id=\"pr${pr_num}-status-text\">Status unknown</span>" >> previews.html
                echo "                    </div>" >> previews.html
                echo "                    <a href=\"/3dgame/$dir\" class=\"preview-link\">Play PR #$pr_num</a>" >> previews.html
                echo "                    <a href=\"https://github.com/commjoen/3dgame/pull/$pr_num\" class=\"preview-link\">View PR</a>" >> previews.html
                echo "                    <button class=\"test-button\" onclick=\"testDeployment('pr$pr_num', '/3dgame/$dir')\">Test Audio</button>" >> previews.html
                echo "                </div>" >> previews.html
                pr_count=$((pr_count + 1))
            fi
        done
        
        # Add message if no PR previews exist
        if [ $pr_count -eq 0 ]; then
            cat >> previews.html << EOF
                <div class="preview-item">
                    <h3>üìù No Active PR Previews</h3>
                    <p>PR previews will appear here when pull requests are opened against the main branch.</p>
                    <a href="https://github.com/commjoen/3dgame/pulls" class="preview-link">View Open PRs</a>
                </div>
        EOF
        fi
        
        # Add closing HTML and JavaScript
        cat >> previews.html << 'EOF'
            </div>

            <script>
                // Status logging
                function log(message) {
                    const statusLog = document.getElementById('status-log');
                    const timestamp = new Date().toLocaleTimeString();
                    statusLog.textContent += `${timestamp}: ${message}\n`;
                    statusLog.scrollTop = statusLog.scrollHeight;
                    console.log(message);
                }

                // Update deployment status
                function updateStatus(deployment, status, message) {
                    const indicator = document.getElementById(`${deployment}-indicator`);
                    const statusText = document.getElementById(`${deployment}-status-text`);
                    
                    if (indicator) {
                        indicator.className = `status-indicator status-${status}`;
                    }
                    if (statusText) {
                        statusText.textContent = message;
                    }
                }

                // Test Web Audio API
                window.testWebAudio = async function() {
                    log('Testing Web Audio API support...');
                    try {
                        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        log('‚úÖ Web Audio API supported');
                        log(`Audio context state: ${audioContext.state}`);
                        
                        // Test basic sound
                        const oscillator = audioContext.createOscillator();
                        const gainNode = audioContext.createGain();
                        
                        oscillator.type = 'sine';
                        oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
                        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                        gainNode.gain.linearRampToValueAtTime(0.2, audioContext.currentTime + 0.1);
                        gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);
                        
                        oscillator.connect(gainNode);
                        gainNode.connect(audioContext.destination);
                        oscillator.start();
                        oscillator.stop(audioContext.currentTime + 0.5);
                        
                        log('üîä Played test sound successfully');
                        document.getElementById('oceanBtn').disabled = false;
                        window.audioContext = audioContext;
                        
                    } catch (error) {
                        log(`‚ùå Web Audio API test failed: ${error.message}`);
                    }
                }

                // Test Ocean-style sounds
                window.testOceanAudio = function() {
                    if (!window.audioContext) {
                        log('‚ùå Audio context not initialized - run Web Audio test first');
                        return;
                    }

                    log('üåä Testing Ocean Adventure audio effects...');
                    
                    try {
                        // Create underwater ambient sound
                        const oscillator = window.audioContext.createOscillator();
                        const gainNode = window.audioContext.createGain();
                        const filter = window.audioContext.createBiquadFilter();
                        
                        // Configure underwater sound
                        oscillator.type = 'sine';
                        oscillator.frequency.setValueAtTime(60, window.audioContext.currentTime);
                        
                        filter.type = 'lowpass';
                        filter.frequency.setValueAtTime(800, window.audioContext.currentTime);
                        filter.Q.setValueAtTime(1, window.audioContext.currentTime);
                        
                        gainNode.gain.setValueAtTime(0, window.audioContext.currentTime);
                        gainNode.gain.linearRampToValueAtTime(0.1, window.audioContext.currentTime + 2);
                        
                        oscillator.connect(gainNode);
                        gainNode.connect(filter);
                        filter.connect(window.audioContext.destination);
                        
                        oscillator.start();
                        log('üîä Started underwater ambient sound');
                        
                        // Test star collection sound
                        setTimeout(() => {
                            const starOsc = window.audioContext.createOscillator();
                            const starGain = window.audioContext.createGain();
                            
                            starOsc.type = 'sine';
                            starOsc.frequency.setValueAtTime(880, window.audioContext.currentTime);
                            starGain.gain.setValueAtTime(0, window.audioContext.currentTime);
                            starGain.gain.linearRampToValueAtTime(0.3, window.audioContext.currentTime + 0.1);
                            starGain.gain.linearRampToValueAtTime(0, window.audioContext.currentTime + 0.3);
                            
                            starOsc.connect(starGain);
                            starGain.connect(filter);
                            starOsc.start();
                            starOsc.stop(window.audioContext.currentTime + 0.3);
                            
                            log('‚≠ê Played star collection sound');
                        }, 1000);
                        
                        // Stop ambient after 5 seconds
                        setTimeout(() => {
                            gainNode.gain.linearRampToValueAtTime(0, window.audioContext.currentTime + 1);
                            oscillator.stop(window.audioContext.currentTime + 1);
                            log('üîá Stopped ambient sound');
                        }, 5000);
                        
                    } catch (error) {
                        log(`‚ùå Ocean audio test failed: ${error.message}`);
                    }
                }

                // Test specific deployment
                window.testDeployment = async function(name, url) {
                    log(`Testing deployment: ${name} (${url})`);
                    updateStatus(name, 'loading', 'Testing...');
                    
                    try {
                        // Test if the deployment is accessible
                        const response = await fetch(url, { method: 'HEAD' });
                        if (response.ok) {
                            updateStatus(name, 'working', 'Deployment accessible');
                            log(`‚úÖ ${name} deployment is accessible`);
                            
                            // Test if audio would work (check if we can create audio context)
                            try {
                                if (window.audioContext || new (window.AudioContext || window.webkitAudioContext)()) {
                                    log(`‚úÖ ${name} should support audio`);
                                    updateStatus(name, 'working', 'Accessible with audio support');
                                }
                            } catch (audioError) {
                                log(`‚ö†Ô∏è ${name} audio support unknown: ${audioError.message}`);
                                updateStatus(name, 'working', 'Accessible, audio unknown');
                            }
                        } else {
                            updateStatus(name, 'error', 'Deployment not accessible');
                            log(`‚ùå ${name} deployment returned status: ${response.status}`);
                        }
                    } catch (error) {
                        updateStatus(name, 'error', 'Connection failed');
                        log(`‚ùå ${name} deployment test failed: ${error.message}`);
                    }
                }

                // Test all deployments
                window.testGameDeployments = async function() {
                    log('Testing all game deployments...');
                    
                    // Test main deployment
                    await testDeployment('main', '/3dgame/');
                    
                    // Test PR deployments
                    const prElements = document.querySelectorAll('[id^="pr"][id$="-status"]');
                    for (const element of prElements) {
                        const prId = element.id.replace('-status', '');
                        const prNum = prId.replace('pr', '');
                        await testDeployment(prId, `/3dgame/pr-${prNum}/`);
                    }
                    
                    log('Deployment testing completed');
                }

                // Initialize page
                document.addEventListener('DOMContentLoaded', function() {
                    // Test main deployment on load
                    testDeployment('main', '/3dgame/');
                    
                    log('üåä Ocean Adventure Preview Manager loaded');
                    log('Click "Test Web Audio API" to begin audio testing');
                });

                // Handle iframe load events and provide user guidance
                const gameIframe = document.getElementById('game-iframe');
                
                gameIframe.onerror = function() {
                    log('‚ùå Failed to load game preview iframe');
                };
                
                gameIframe.onload = function() {
                    log('‚úÖ Game preview iframe loaded successfully');
                    log('üí° If you experience issues with controls or audio in the preview, try opening the game in a new tab');
                };
                
                // Add click handler to focus iframe for better input handling
                gameIframe.addEventListener('click', function() {
                    gameIframe.focus();
                    log('üéØ Game preview focused - controls should now work properly');
                });
            </script>
        </body>
        </html>
EOF
        
        echo "Generated previews.html with $pr_count PR preview(s)"
        
    - name: Commit and push changes
      run: |
        git add previews.html
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Regenerate previews.html - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push origin gh-pages
          echo "Successfully updated previews.html"
        fi