name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [24.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Type check
      run: npm run type-check

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      
    - name: Run E2E tests
      run: npm run test:e2e
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  mobile-compatibility:
    name: Mobile Compatibility Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Run mobile tests
      run: npm run test:mobile
      
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: test-results/
        retention-days: 30

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Bundle size analysis
      run: npm run analyze:bundle
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: |
          lighthouseci/
          bundle-analysis/
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, e2e-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: write
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: https://commjoen.github.io/3dgame/
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      env:
        VITE_BASE_PATH: /3dgame/
        
    - name: Checkout gh-pages branch
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        path: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      
    - name: Initialize gh-pages branch if needed
      run: |
        if [ ! -d "gh-pages" ] || [ ! -d "gh-pages/.git" ]; then
          echo "Creating new gh-pages branch..."
          mkdir -p gh-pages
          cd gh-pages
          git init
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/commjoen/3dgame.git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          echo "# Ocean Adventure - GitHub Pages" > README.md
          git add README.md
          git commit -m "Initialize gh-pages branch"
          git branch -M gh-pages
          git push --set-upstream origin gh-pages
          cd ..
        fi
      
    - name: Deploy to gh-pages
      run: |
        # Ensure gh-pages directory exists and is properly initialized
        cd gh-pages
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/commjoen/3dgame.git
        
        # Fetch latest changes and reset to remote state
        git fetch origin gh-pages || echo "No remote gh-pages branch yet"
        git reset --hard origin/gh-pages 2>/dev/null || echo "Creating new gh-pages content"
        
        # Clean main branch files while preserving PR directories
        find . -maxdepth 1 -type f ! -name '.gitignore' -delete 2>/dev/null || true
        find . -maxdepth 1 -type d ! -name 'pr-*' ! -name '.git' ! -name '.' -exec rm -rf {} + 2>/dev/null || true
        
        # Copy new build files
        cp -r ../dist/* . 2>/dev/null || echo "No dist files to copy"
        
        # Create or update previews index
        cat > previews.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Ocean Adventure - PR Previews</title>
            <style>
                body { 
                    font-family: Arial, sans-serif; 
                    margin: 40px; 
                    background: linear-gradient(to bottom, #1e40af, #0f172a);
                    color: white;
                    min-height: 100vh;
                }
                .container { max-width: 800px; margin: 0 auto; }
                .preview-item { 
                    background: rgba(255,255,255,0.1); 
                    margin: 20px 0; 
                    padding: 20px; 
                    border-radius: 8px;
                    border: 1px solid rgba(255,255,255,0.2);
                }
                .preview-item h3 { margin-top: 0; color: #60a5fa; }
                .preview-link { 
                    display: inline-block;
                    background: #1e40af; 
                    color: white; 
                    padding: 10px 20px; 
                    text-decoration: none; 
                    border-radius: 4px;
                    margin: 5px 5px 5px 0;
                }
                .preview-link:hover { background: #1d4ed8; }
                .main-link { background: #059669; }
                .main-link:hover { background: #047857; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>ðŸŒŠ Ocean Adventure - Preview Deployments</h1>
                <div class="preview-item">
                    <h3>ðŸš€ Main Branch (Stable)</h3>
                    <p>The stable version deployed from the main branch.</p>
                    <a href="/3dgame/" class="preview-link main-link">Play Main Version</a>
                </div>
        EOF
        
        # Add any existing PR previews to the index
        for dir in pr-*/; do
            if [ -d "$dir" ]; then
                pr_num=${dir#pr-}
                pr_num=${pr_num%/}
                echo "                <div class=\"preview-item\">" >> previews.html
                echo "                    <h3>ðŸ”„ Pull Request #$pr_num</h3>" >> previews.html
                echo "                    <p>Preview deployment for PR #$pr_num</p>" >> previews.html
                echo "                    <a href=\"/3dgame/$dir\" class=\"preview-link\">Play PR #$pr_num</a>" >> previews.html
                echo "                    <a href=\"https://github.com/commjoen/3dgame/pull/$pr_num\" class=\"preview-link\">View PR</a>" >> previews.html
                echo "                </div>" >> previews.html
            fi
        done
        
        cat >> previews.html << 'EOF'
            </div>
        </body>
        </html>
        EOF
        
        # Add and commit changes
        git add .
        git diff --staged --quiet || git commit -m "Deploy main branch to GitHub Pages"
        git push origin gh-pages

  build-and-push-container:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=high
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        sarif: true
      continue-on-error: true
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('snyk.sarif') != ''
      with:
        sarif_file: snyk.sarif