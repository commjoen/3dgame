name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Basic validation required for builds (linting, formatting, type checking)
  validate:
    name: Validate Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [24.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linter
      run: npm run lint
      
    - name: Check code formatting
      run: npm run format:check
      
    - name: Type check
      run: npm run type-check

  # Comprehensive tests that can fail without blocking builds
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    continue-on-error: true
    
    strategy:
      matrix:
        node-version: [24.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run unit tests
      run: npm run test:unit
      
    - name: Run integration tests
      run: npm run test:integration

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: validate
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers with retries
      run: |
        for i in {1..3}; do
          echo "Attempt $i: Installing Playwright browsers..."
          if npx playwright install --with-deps chromium; then
            echo "Successfully installed Playwright browsers"
            break
          else
            echo "Failed to install browsers on attempt $i"
            if [ $i -eq 3 ]; then
              echo "All attempts failed, continuing with system browser fallback"
              exit 0
            fi
            sleep 10
          fi
        done
      
    - name: Build application
      run: npm run build
      
    - name: Run E2E tests with fallback
      run: |
        if npm run test:e2e; then
          echo "E2E tests passed"
        else
          echo "E2E tests failed, running fallback validation"
          npm run test:e2e:fallback
        fi
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  mobile-compatibility:
    name: Mobile Compatibility Check
    runs-on: ubuntu-latest
    needs: validate
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Install Playwright browsers with retries
      run: |
        for i in {1..3}; do
          echo "Attempt $i: Installing Playwright browsers..."
          if npx playwright install --with-deps chromium; then
            echo "Successfully installed Playwright browsers"
            break
          else
            echo "Failed to install browsers on attempt $i"
            if [ $i -eq 3 ]; then
              echo "All attempts failed, continuing with system browser fallback"
              exit 0
            fi
            sleep 10
          fi
        done
      
    - name: Run mobile tests with fallback
      run: |
        if npm run test:mobile; then
          echo "Mobile tests passed"
        else
          echo "Mobile tests failed, running fallback validation"
          npm run test:mobile:fallback
        fi
      
    - name: Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results
        path: test-results/
        retention-days: 30

  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    needs: validate
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Run Lighthouse CI
      run: |
        echo "Lighthouse CI temporarily disabled due to base path configuration issues"
        echo "Will be re-enabled after fixing static server configuration"
        # npm install -g @lhci/cli@0.12.x
        # lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Bundle size analysis
      run: npm run analyze:bundle
      
    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: |
          lighthouseci/
          bundle-analysis/
        retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [validate]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for production
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  prepare-pages:
    name: Prepare GitHub Pages Artifacts
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    outputs:
      pages-artifact-id: ${{ steps.pages-artifact.outputs.artifact-id }}
      
    steps:
    - name: Debug deployment context
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Event: ${{ github.event_name }}"
        echo "Actor: ${{ github.actor }}"
        echo "Preparing GitHub Pages artifacts..."
        
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application for GitHub Pages
      run: npm run build
      env:
        VITE_BASE_PATH: /3dgame/
        
    - name: Verify build output
      run: |
        echo "Checking dist directory contents:"
        ls -la dist/
        echo "Verifying index.html exists and has correct paths:"
        if [ -f "dist/index.html" ]; then
          echo "✓ index.html exists"
          head -20 dist/index.html
        else
          echo "✗ index.html not found"
          exit 1
        fi
        
    - name: Checkout existing gh-pages branch
      uses: actions/checkout@v5
      with:
        ref: gh-pages
        path: gh-pages
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
      
    - name: Preserve PR previews and merge with main deployment
      run: |
        echo "Preparing combined GitHub Pages deployment..."
        
        # Create a temporary directory for the combined deployment
        mkdir -p pages-deployment
        
        # First, copy the new main branch build
        cp -r dist/* pages-deployment/
        
        # Check if gh-pages branch exists and has content
        if [ -d "gh-pages" ] && [ -d "gh-pages/.git" ]; then
          echo "Found existing gh-pages branch, preserving PR previews..."
          
          # Preserve PR preview directories
          for dir in gh-pages/pr-*/; do
            if [ -d "$dir" ]; then
              pr_dir=$(basename "$dir")
              echo "Preserving $pr_dir"
              cp -r "$dir" "pages-deployment/$pr_dir"
            fi
          done
          
          # Preserve or create the previews.html file
          if [ -f "gh-pages/previews.html" ]; then
            echo "Preserving existing previews.html"
            cp "gh-pages/previews.html" "pages-deployment/previews.html"
          else
            echo "Creating default previews.html"
            # Create a default previews.html file when none exists
            CURRENT_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')
            
            # Generate the HTML content using echo to avoid YAML parsing issues
            {
              echo '<!DOCTYPE html>'
              echo '<html lang="en">'
              echo '<head>'
              echo '    <meta charset="UTF-8">'
              echo '    <meta name="viewport" content="width=device-width, initial-scale=1.0">'
              echo '    <title>Ocean Adventure - PR Previews</title>'
              echo '    <style>'
              echo '        body { font-family: Arial, sans-serif; margin: 40px; background: linear-gradient(to bottom, #1e40af, #0f172a); color: white; min-height: 100vh; }'
              echo '        .container { max-width: 800px; margin: 0 auto; }'
              echo '        .preview-item { background: rgba(255,255,255,0.1); margin: 20px 0; padding: 20px; border-radius: 8px; border: 1px solid rgba(255,255,255,0.2); }'
              echo '        .preview-item h3 { margin-top: 0; color: #60a5fa; }'
              echo '        .preview-link { display: inline-block; background: #1e40af; color: white; padding: 10px 20px; text-decoration: none; border-radius: 4px; margin: 5px 5px 5px 0; }'
              echo '        .preview-link:hover { background: #1d4ed8; }'
              echo '        .main-link { background: #059669; }'
              echo '        .main-link:hover { background: #047857; }'
              echo '        .regenerate-info { background: rgba(255,255,255,0.05); padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #60a5fa; }'
              echo '    </style>'
              echo '</head>'
              echo '<body>'
              echo '    <div class="container">'
              echo '        <h1>🌊 Ocean Adventure - Preview Deployments</h1>'
              echo '        <div class="regenerate-info">'
              echo "            <p><strong>Last updated:</strong> ${CURRENT_DATE}</p>"
              echo '            <p>This page is automatically updated when PR previews are deployed.</p>'
              echo '        </div>'
              echo '        <div class="preview-item">'
              echo '            <h3>🚀 Main Branch (Stable)</h3>'
              echo '            <p>The stable version deployed from the main branch.</p>'
              echo '            <a href="/3dgame/" class="preview-link main-link">Play Main Version</a>'
              echo '            <a href="https://github.com/commjoen/3dgame" class="preview-link">View Repository</a>'
              echo '        </div>'
              echo '        <div class="preview-item">'
              echo '            <h3>📝 No Active PR Previews</h3>'
              echo '            <p>PR previews will appear here when pull requests are opened against the main branch.</p>'
              echo '            <a href="https://github.com/commjoen/3dgame/pulls" class="preview-link">View Open PRs</a>'
              echo '        </div>'
              echo '    </div>'
              echo '</body>'
              echo '</html>'
            } > "pages-deployment/previews.html"
          fi
          
          # Preserve other important files
          if [ -f "gh-pages/README.md" ]; then
            echo "Preserving README.md"
            cp "gh-pages/README.md" "pages-deployment/README.md"
          fi
        else
          echo "No existing gh-pages branch found, creating fresh deployment"
        fi
        
        # Show what will be deployed
        echo "Final deployment contents:"
        ls -la pages-deployment/
        
    - name: Setup Pages
      uses: actions/configure-pages@v5
      
    - name: Upload to GitHub Pages
      id: pages-artifact
      uses: actions/upload-pages-artifact@v4
      with:
        path: pages-deployment

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [prepare-pages]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    continue-on-error: true
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:      
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        artifact_id: ${{ needs.prepare-pages.outputs.pages-artifact-id }}
        
    - name: Deployment success notification
      if: success()
      run: |
        echo "✅ GitHub Pages deployment successful!"
        echo ""
        echo "🌐 Main application: ${{ steps.deployment.outputs.page_url }}"
        echo "📋 PR previews: ${{ steps.deployment.outputs.page_url }}previews.html"
        echo ""
        echo "ℹ️ The deployment preserves all existing PR previews and the previews.html index page."
        echo "Both the main application and PR preview system are now working together."
        
    - name: Deployment status check
      if: failure()
      run: |
        echo "❌ GitHub Pages deployment failed!"
        echo ""
        echo "📋 This is likely because GitHub Pages is not properly configured."
        echo "🔧 To fix this issue:"
        echo "   1. Go to your repository Settings > Pages"
        echo "   2. Set Source to 'GitHub Actions'"
        echo "   3. Save the settings"
        echo "   4. Re-run this workflow or push a new commit to main"
        echo ""
        echo "📖 For detailed troubleshooting, see:"
        echo "   https://github.com/${{ github.repository }}/blob/main/GITHUB_PAGES_TROUBLESHOOTING.md"
        echo ""
        echo "🎉 The build artifacts are ready and uploaded!"
        echo "   You can also deploy manually using the artifacts from this run."
        echo ""
        echo "🐳 Alternative: Use container deployment:"
        echo "   docker run -p 8080:80 ghcr.io/${{ github.repository }}:latest"

  build-and-push-container:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: [build]
    # Ensure containers are built on every main branch commit and all PRs
    if: (github.event_name == 'push' && contains(github.ref, 'refs/heads/main')) || (github.event_name == 'push' && contains(github.ref, 'refs/heads/develop')) || github.event_name == 'pull_request'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1
          network=host
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=main,enable={{is_default_branch}}
          type=sha,prefix={{branch}}-,enable={{is_default_branch}}
          type=sha,prefix=commit-,enable=${{ github.event_name == 'pull_request' }}
        labels: |
          org.opencontainers.image.title=Ocean Adventure
          org.opencontainers.image.description=A 3D browser-based underwater platform game
          org.opencontainers.image.url=https://commjoen.github.io/3dgame/
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.ref_name }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          org.opencontainers.image.revision=${{ github.sha }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    continue-on-error: true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=high
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        sarif: true
      continue-on-error: true
        
    - name: Upload Snyk results to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v3
      if: always() && hashFiles('snyk.sarif') != ''
      with:
        sarif_file: snyk.sarif